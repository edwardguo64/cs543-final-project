// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pooling4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state11 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [8:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten117_reg_125;
reg   [4:0] c_0_reg_136;
reg   [7:0] indvar_flatten63_reg_148;
reg   [2:0] h_0_reg_160;
reg   [5:0] indvar_flatten24_reg_171;
reg   [2:0] w_0_reg_183;
reg   [3:0] indvar_flatten_reg_195;
reg   [1:0] i_0_reg_207;
reg   [1:0] j_0_reg_219;
wire   [3:0] shl_ln_fu_237_p3;
reg   [3:0] shl_ln_reg_984;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln88_fu_249_p2;
reg   [3:0] add_ln88_reg_989;
wire   [0:0] icmp_ln80_fu_255_p2;
reg   [0:0] icmp_ln80_reg_994;
reg   [0:0] icmp_ln80_reg_994_pp0_iter1_reg;
wire   [10:0] add_ln80_fu_261_p2;
reg   [10:0] add_ln80_reg_998;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln81_fu_267_p2;
reg   [0:0] icmp_ln81_reg_1003;
wire   [2:0] select_ln89_fu_273_p3;
reg   [2:0] select_ln89_reg_1012;
wire   [0:0] xor_ln89_fu_281_p2;
reg   [0:0] xor_ln89_reg_1017;
wire   [0:0] and_ln89_6_fu_305_p2;
reg   [0:0] and_ln89_6_reg_1024;
wire   [2:0] h_fu_311_p2;
reg   [2:0] h_reg_1032;
wire   [0:0] or_ln81_1_fu_323_p2;
reg   [0:0] or_ln81_1_reg_1038;
wire   [0:0] and_ln81_3_fu_329_p2;
reg   [0:0] and_ln81_3_reg_1045;
wire   [0:0] or_ln82_1_fu_341_p2;
reg   [0:0] or_ln82_1_reg_1054;
wire   [1:0] select_ln82_fu_347_p3;
reg   [1:0] select_ln82_reg_1059;
wire   [4:0] select_ln89_1_fu_361_p3;
reg   [4:0] select_ln89_1_reg_1066;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
wire   [2:0] select_ln81_fu_445_p3;
reg   [2:0] select_ln81_reg_1073;
wire   [2:0] select_ln81_2_fu_467_p3;
reg   [2:0] select_ln81_2_reg_1078;
wire   [2:0] w_fu_510_p2;
reg   [2:0] w_reg_1084;
wire   [1:0] select_ln83_fu_577_p3;
reg   [1:0] select_ln83_reg_1089;
wire   [0:0] select_ln83_1_fu_589_p3;
reg   [0:0] select_ln83_1_reg_1095;
wire   [8:0] add_ln89_1_fu_619_p2;
reg   [8:0] add_ln89_1_reg_1100;
wire   [1:0] select_ln83_4_fu_638_p3;
reg   [1:0] select_ln83_4_reg_1106;
wire   [3:0] add_ln88_1_fu_649_p2;
reg   [3:0] add_ln88_1_reg_1111;
wire   [0:0] and_ln92_fu_661_p2;
reg   [0:0] and_ln92_reg_1116;
reg   [0:0] and_ln92_reg_1116_pp0_iter1_reg;
reg   [0:0] and_ln92_reg_1116_pp0_iter2_reg;
reg   [0:0] and_ln92_reg_1116_pp0_iter3_reg;
wire   [3:0] select_ln83_5_fu_673_p3;
reg   [3:0] select_ln83_5_reg_1120;
wire   [5:0] select_ln82_4_fu_686_p3;
reg   [5:0] select_ln82_4_reg_1125;
wire   [7:0] select_ln81_5_fu_700_p3;
reg   [7:0] select_ln81_5_reg_1130;
wire   [2:0] select_ln82_2_fu_754_p3;
reg   [2:0] select_ln82_2_reg_1135;
reg    ap_enable_reg_pp0_iter1;
reg   [8:0] output_addr_reg_1140;
reg   [8:0] output_addr_reg_1140_pp0_iter2_reg;
reg   [8:0] output_addr_reg_1140_pp0_iter3_reg;
wire   [1:0] j_fu_812_p2;
reg   [1:0] j_reg_1150;
wire   [31:0] max_value_fu_828_p3;
reg   [31:0] max_value_reg_1155;
reg   [31:0] input_load_reg_1162;
wire   [31:0] max_value_1_fu_919_p3;
reg   [31:0] max_value_1_reg_1169;
reg   [31:0] max_value_1_reg_1169_pp0_iter3_reg;
wire   [31:0] select_ln5_fu_971_p3;
reg   [31:0] select_ln5_reg_1176;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [10:0] ap_phi_mux_indvar_flatten117_phi_fu_129_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_c_0_phi_fu_140_p4;
wire    ap_block_pp0_stage1;
reg   [7:0] ap_phi_mux_indvar_flatten63_phi_fu_152_p4;
reg   [2:0] ap_phi_mux_h_0_phi_fu_164_p4;
reg   [5:0] ap_phi_mux_indvar_flatten24_phi_fu_175_p4;
reg   [2:0] ap_phi_mux_w_0_phi_fu_187_p4;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_199_p4;
reg   [1:0] ap_phi_mux_i_0_phi_fu_211_p4;
reg   [1:0] ap_phi_mux_j_0_phi_fu_223_p4;
wire   [63:0] zext_ln93_2_fu_769_p1;
wire   [63:0] zext_ln89_5_fu_807_p1;
reg   [31:0] max_value_4_fu_96;
reg   [31:0] grp_fu_231_p0;
reg   [31:0] grp_fu_231_p1;
wire   [3:0] zext_ln83_fu_245_p1;
wire   [0:0] icmp_ln83_fu_287_p2;
wire   [0:0] icmp_ln82_fu_299_p2;
wire   [0:0] xor_ln81_fu_317_p2;
wire   [0:0] and_ln89_5_fu_293_p2;
wire   [0:0] or_ln82_fu_335_p2;
wire   [4:0] c_fu_355_p2;
wire   [7:0] tmp_6_fu_368_p3;
wire   [5:0] tmp_7_fu_380_p3;
wire   [8:0] zext_ln89_2_fu_388_p1;
wire   [8:0] zext_ln89_1_fu_376_p1;
wire   [0:0] trunc_ln83_fu_404_p1;
wire   [0:0] icmp_ln92_fu_419_p2;
wire   [0:0] icmp_ln84_fu_430_p2;
wire   [0:0] or_ln81_fu_441_p2;
wire   [3:0] shl_ln88_mid1_fu_453_p3;
wire   [3:0] select_ln89_2_fu_398_p3;
wire   [3:0] shl_ln88_s_fu_472_p3;
wire   [0:0] and_ln89_2_fu_408_p2;
wire   [3:0] select_ln89_3_fu_413_p3;
wire   [0:0] and_ln89_3_fu_425_p2;
wire   [0:0] and_ln89_4_fu_436_p2;
wire   [3:0] shl_ln88_1_mid1_fu_516_p3;
wire   [3:0] select_ln81_3_fu_480_p3;
wire   [0:0] and_ln81_fu_488_p2;
wire   [0:0] xor_ln82_fu_531_p2;
wire   [3:0] select_ln81_1_fu_460_p3;
wire   [3:0] select_ln81_4_fu_493_p3;
wire   [0:0] and_ln81_1_fu_500_p2;
wire   [0:0] and_ln81_2_fu_505_p2;
wire   [0:0] and_ln82_2_fu_555_p2;
wire   [0:0] or_ln83_fu_566_p2;
wire   [0:0] or_ln83_1_fu_571_p2;
wire   [1:0] i_fu_561_p2;
wire   [0:0] trunc_ln83_1_fu_585_p1;
wire   [0:0] and_ln82_fu_536_p2;
wire   [3:0] zext_ln83_1_fu_597_p1;
wire   [3:0] add_ln88_2_fu_601_p2;
wire   [3:0] select_ln82_3_fu_542_p3;
wire   [3:0] select_ln83_2_fu_607_p3;
wire   [8:0] add_ln89_fu_392_p2;
wire   [8:0] zext_ln83_2_fu_615_p1;
wire   [0:0] icmp_ln92_2_fu_625_p2;
wire   [0:0] and_ln82_1_fu_549_p2;
wire   [3:0] zext_ln84_fu_645_p1;
wire   [3:0] select_ln82_1_fu_524_p3;
wire   [0:0] select_ln83_3_fu_630_p3;
wire   [0:0] icmp_ln92_1_fu_655_p2;
wire   [3:0] add_ln83_1_fu_667_p2;
wire   [5:0] add_ln82_1_fu_680_p2;
wire   [7:0] add_ln81_1_fu_694_p2;
wire   [6:0] tmp_8_fu_710_p3;
wire   [7:0] zext_ln89_fu_707_p1;
wire   [7:0] zext_ln93_fu_717_p1;
wire   [7:0] add_ln93_fu_721_p2;
wire   [7:0] zext_ln81_fu_727_p1;
wire   [7:0] add_ln93_1_fu_730_p2;
wire   [9:0] zext_ln93_1_fu_736_p1;
wire   [9:0] p_shl1_cast_fu_740_p3;
wire   [9:0] add_ln93_2_fu_748_p2;
wire   [9:0] zext_ln82_fu_759_p1;
wire   [9:0] add_ln93_3_fu_763_p2;
wire   [9:0] tmp_9_fu_781_p3;
wire   [11:0] zext_ln89_3_fu_788_p1;
wire   [11:0] p_shl_cast_fu_774_p3;
wire   [11:0] add_ln89_2_fu_792_p2;
wire   [11:0] zext_ln89_4_fu_798_p1;
wire   [11:0] add_ln89_3_fu_801_p2;
wire   [0:0] trunc_ln84_fu_820_p1;
wire   [0:0] or_ln86_fu_823_p2;
wire   [31:0] bitcast_ln89_fu_837_p1;
wire   [31:0] bitcast_ln89_1_fu_854_p1;
wire   [7:0] tmp_fu_840_p4;
wire   [22:0] trunc_ln89_fu_850_p1;
wire   [0:0] icmp_ln89_1_fu_877_p2;
wire   [0:0] icmp_ln89_fu_871_p2;
wire   [7:0] tmp_2_fu_857_p4;
wire   [22:0] trunc_ln89_1_fu_867_p1;
wire   [0:0] icmp_ln89_3_fu_895_p2;
wire   [0:0] icmp_ln89_2_fu_889_p2;
wire   [0:0] or_ln89_fu_883_p2;
wire   [0:0] or_ln89_1_fu_901_p2;
wire   [0:0] and_ln89_fu_907_p2;
wire   [0:0] grp_fu_231_p2;
wire   [0:0] and_ln89_1_fu_913_p2;
wire   [31:0] bitcast_ln5_fu_930_p1;
wire   [7:0] tmp_4_fu_933_p4;
wire   [22:0] trunc_ln5_fu_943_p1;
wire   [0:0] icmp_ln5_1_fu_953_p2;
wire   [0:0] icmp_ln5_fu_947_p2;
wire   [0:0] or_ln5_fu_959_p2;
wire   [0:0] and_ln5_fu_965_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state11;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

lenet_cnn_fcmp_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
lenet_cnn_fcmp_32dEe_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_231_p0),
    .din1(grp_fu_231_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_231_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        c_0_reg_136 <= select_ln89_1_reg_1066;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_136 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        h_0_reg_160 <= select_ln81_2_reg_1078;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        h_0_reg_160 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_207 <= select_ln83_4_reg_1106;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_207 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten117_reg_125 <= add_ln80_reg_998;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten117_reg_125 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten24_reg_171 <= select_ln82_4_reg_1125;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten24_reg_171 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten63_reg_148 <= select_ln81_5_reg_1130;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten63_reg_148 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_195 <= select_ln83_5_reg_1120;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_195 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        j_0_reg_219 <= j_reg_1150;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_219 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_0_reg_183 <= select_ln82_2_reg_1135;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w_0_reg_183 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln80_reg_998 <= add_ln80_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln88_1_reg_1111 <= add_ln88_1_fu_649_p2;
        add_ln89_1_reg_1100 <= add_ln89_1_fu_619_p2;
        and_ln92_reg_1116 <= and_ln92_fu_661_p2;
        select_ln81_reg_1073 <= select_ln81_fu_445_p3;
        select_ln83_1_reg_1095 <= select_ln83_1_fu_589_p3;
        select_ln83_reg_1089 <= select_ln83_fu_577_p3;
        w_reg_1084 <= w_fu_510_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln88_reg_989 <= add_ln88_fu_249_p2;
        icmp_ln80_reg_994 <= icmp_ln80_fu_255_p2;
        icmp_ln80_reg_994_pp0_iter1_reg <= icmp_ln80_reg_994;
        max_value_1_reg_1169_pp0_iter3_reg <= max_value_1_reg_1169;
        output_addr_reg_1140_pp0_iter2_reg <= output_addr_reg_1140;
        output_addr_reg_1140_pp0_iter3_reg <= output_addr_reg_1140_pp0_iter2_reg;
        shl_ln_reg_984[3 : 1] <= shl_ln_fu_237_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_255_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln81_3_reg_1045 <= and_ln81_3_fu_329_p2;
        and_ln89_6_reg_1024 <= and_ln89_6_fu_305_p2;
        h_reg_1032 <= h_fu_311_p2;
        icmp_ln81_reg_1003 <= icmp_ln81_fu_267_p2;
        or_ln81_1_reg_1038 <= or_ln81_1_fu_323_p2;
        or_ln82_1_reg_1054 <= or_ln82_1_fu_341_p2;
        select_ln82_reg_1059 <= select_ln82_fu_347_p3;
        select_ln89_reg_1012 <= select_ln89_fu_273_p3;
        xor_ln89_reg_1017 <= xor_ln89_fu_281_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        and_ln92_reg_1116_pp0_iter1_reg <= and_ln92_reg_1116;
        and_ln92_reg_1116_pp0_iter2_reg <= and_ln92_reg_1116_pp0_iter1_reg;
        and_ln92_reg_1116_pp0_iter3_reg <= and_ln92_reg_1116_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_load_reg_1162 <= input_r_q0;
        max_value_reg_1155 <= max_value_fu_828_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_reg_1150 <= j_fu_812_p2;
        select_ln82_2_reg_1135 <= select_ln82_2_fu_754_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_value_1_reg_1169 <= max_value_1_fu_919_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_value_4_fu_96 <= max_value_1_fu_919_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_addr_reg_1140 <= zext_ln93_2_fu_769_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'd1 == and_ln92_reg_1116_pp0_iter2_reg) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln5_reg_1176 <= select_ln5_fu_971_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln81_2_reg_1078 <= select_ln81_2_fu_467_p3;
        select_ln81_5_reg_1130 <= select_ln81_5_fu_700_p3;
        select_ln82_4_reg_1125 <= select_ln82_4_fu_686_p3;
        select_ln83_4_reg_1106 <= select_ln83_4_fu_638_p3;
        select_ln83_5_reg_1120 <= select_ln83_5_fu_673_p3;
        select_ln89_1_reg_1066 <= select_ln89_1_fu_361_p3;
    end
end

always @ (*) begin
    if ((icmp_ln80_fu_255_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_994_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_c_0_phi_fu_140_p4 = select_ln89_1_reg_1066;
    end else begin
        ap_phi_mux_c_0_phi_fu_140_p4 = c_0_reg_136;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_h_0_phi_fu_164_p4 = select_ln81_2_reg_1078;
    end else begin
        ap_phi_mux_h_0_phi_fu_164_p4 = h_0_reg_160;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_211_p4 = select_ln83_4_reg_1106;
    end else begin
        ap_phi_mux_i_0_phi_fu_211_p4 = i_0_reg_207;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten117_phi_fu_129_p4 = add_ln80_reg_998;
    end else begin
        ap_phi_mux_indvar_flatten117_phi_fu_129_p4 = indvar_flatten117_reg_125;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten24_phi_fu_175_p4 = select_ln82_4_reg_1125;
    end else begin
        ap_phi_mux_indvar_flatten24_phi_fu_175_p4 = indvar_flatten24_reg_171;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten63_phi_fu_152_p4 = select_ln81_5_reg_1130;
    end else begin
        ap_phi_mux_indvar_flatten63_phi_fu_152_p4 = indvar_flatten63_reg_148;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_994 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_199_p4 = select_ln83_5_reg_1120;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_199_p4 = indvar_flatten_reg_195;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_994_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_j_0_phi_fu_223_p4 = j_reg_1150;
    end else begin
        ap_phi_mux_j_0_phi_fu_223_p4 = j_0_reg_219;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_994_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_w_0_phi_fu_187_p4 = select_ln82_2_reg_1135;
    end else begin
        ap_phi_mux_w_0_phi_fu_187_p4 = w_0_reg_183;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_231_p0 = max_value_1_reg_1169;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_231_p0 = max_value_fu_828_p3;
    end else begin
        grp_fu_231_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_231_p1 = 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_231_p1 = input_r_q0;
    end else begin
        grp_fu_231_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'd1 == and_ln92_reg_1116_pp0_iter3_reg))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln80_fu_255_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((icmp_ln80_fu_255_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln80_fu_261_p2 = (ap_phi_mux_indvar_flatten117_phi_fu_129_p4 + 11'd1);

assign add_ln81_1_fu_694_p2 = (indvar_flatten63_reg_148 + 8'd1);

assign add_ln82_1_fu_680_p2 = (indvar_flatten24_reg_171 + 6'd1);

assign add_ln83_1_fu_667_p2 = (indvar_flatten_reg_195 + 4'd1);

assign add_ln88_1_fu_649_p2 = (zext_ln84_fu_645_p1 + select_ln82_1_fu_524_p3);

assign add_ln88_2_fu_601_p2 = (zext_ln83_1_fu_597_p1 + select_ln81_1_fu_460_p3);

assign add_ln88_fu_249_p2 = (shl_ln_fu_237_p3 + zext_ln83_fu_245_p1);

assign add_ln89_1_fu_619_p2 = (add_ln89_fu_392_p2 + zext_ln83_2_fu_615_p1);

assign add_ln89_2_fu_792_p2 = (zext_ln89_3_fu_788_p1 + p_shl_cast_fu_774_p3);

assign add_ln89_3_fu_801_p2 = (add_ln89_2_fu_792_p2 + zext_ln89_4_fu_798_p1);

assign add_ln89_fu_392_p2 = (zext_ln89_2_fu_388_p1 + zext_ln89_1_fu_376_p1);

assign add_ln93_1_fu_730_p2 = (add_ln93_fu_721_p2 + zext_ln81_fu_727_p1);

assign add_ln93_2_fu_748_p2 = (zext_ln93_1_fu_736_p1 + p_shl1_cast_fu_740_p3);

assign add_ln93_3_fu_763_p2 = (add_ln93_2_fu_748_p2 + zext_ln82_fu_759_p1);

assign add_ln93_fu_721_p2 = (zext_ln89_fu_707_p1 + zext_ln93_fu_717_p1);

assign and_ln5_fu_965_p2 = (or_ln5_fu_959_p2 & grp_fu_231_p2);

assign and_ln81_1_fu_500_p2 = (or_ln81_1_reg_1038 & and_ln89_3_fu_425_p2);

assign and_ln81_2_fu_505_p2 = (or_ln81_1_reg_1038 & and_ln89_4_fu_436_p2);

assign and_ln81_3_fu_329_p2 = (or_ln81_1_fu_323_p2 & and_ln89_5_fu_293_p2);

assign and_ln81_fu_488_p2 = (or_ln81_1_reg_1038 & and_ln89_2_fu_408_p2);

assign and_ln82_1_fu_549_p2 = (xor_ln82_fu_531_p2 & and_ln81_1_fu_500_p2);

assign and_ln82_2_fu_555_p2 = (xor_ln82_fu_531_p2 & and_ln81_2_fu_505_p2);

assign and_ln82_fu_536_p2 = (xor_ln82_fu_531_p2 & and_ln81_fu_488_p2);

assign and_ln89_1_fu_913_p2 = (grp_fu_231_p2 & and_ln89_fu_907_p2);

assign and_ln89_2_fu_408_p2 = (xor_ln89_reg_1017 & trunc_ln83_fu_404_p1);

assign and_ln89_3_fu_425_p2 = (xor_ln89_reg_1017 & icmp_ln92_fu_419_p2);

assign and_ln89_4_fu_436_p2 = (xor_ln89_reg_1017 & icmp_ln84_fu_430_p2);

assign and_ln89_5_fu_293_p2 = (xor_ln89_fu_281_p2 & icmp_ln83_fu_287_p2);

assign and_ln89_6_fu_305_p2 = (xor_ln89_fu_281_p2 & icmp_ln82_fu_299_p2);

assign and_ln89_fu_907_p2 = (or_ln89_fu_883_p2 & or_ln89_1_fu_901_p2);

assign and_ln92_fu_661_p2 = (select_ln83_3_fu_630_p3 & icmp_ln92_1_fu_655_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln5_fu_930_p1 = max_value_1_reg_1169_pp0_iter3_reg;

assign bitcast_ln89_1_fu_854_p1 = input_load_reg_1162;

assign bitcast_ln89_fu_837_p1 = max_value_reg_1155;

assign c_fu_355_p2 = (5'd1 + ap_phi_mux_c_0_phi_fu_140_p4);

assign h_fu_311_p2 = (3'd1 + select_ln89_fu_273_p3);

assign i_fu_561_p2 = (2'd1 + select_ln82_reg_1059);

assign icmp_ln5_1_fu_953_p2 = ((trunc_ln5_fu_943_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_947_p2 = ((tmp_4_fu_933_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln80_fu_255_p2 = ((ap_phi_mux_indvar_flatten117_phi_fu_129_p4 == 11'd1600) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_267_p2 = ((ap_phi_mux_indvar_flatten63_phi_fu_152_p4 == 8'd100) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_299_p2 = ((ap_phi_mux_indvar_flatten24_phi_fu_175_p4 == 6'd20) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_287_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_199_p4 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_430_p2 = ((ap_phi_mux_j_0_phi_fu_223_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln89_1_fu_877_p2 = ((trunc_ln89_fu_850_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln89_2_fu_889_p2 = ((tmp_2_fu_857_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln89_3_fu_895_p2 = ((trunc_ln89_1_fu_867_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_871_p2 = ((tmp_fu_840_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln92_1_fu_655_p2 = ((select_ln83_fu_577_p3 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln92_2_fu_625_p2 = ((select_ln82_reg_1059 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_419_p2 = ((i_0_reg_207 == 2'd1) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln89_5_fu_807_p1;

assign j_fu_812_p2 = (select_ln83_reg_1089 + 2'd1);

assign max_value_1_fu_919_p3 = ((and_ln89_1_fu_913_p2[0:0] === 1'b1) ? max_value_reg_1155 : input_load_reg_1162);

assign max_value_fu_828_p3 = ((or_ln86_fu_823_p2[0:0] === 1'b1) ? max_value_4_fu_96 : 32'd3546862757);

assign or_ln5_fu_959_p2 = (icmp_ln5_fu_947_p2 | icmp_ln5_1_fu_953_p2);

assign or_ln81_1_fu_323_p2 = (xor_ln81_fu_317_p2 | icmp_ln81_fu_267_p2);

assign or_ln81_fu_441_p2 = (icmp_ln81_reg_1003 | and_ln89_6_reg_1024);

assign or_ln82_1_fu_341_p2 = (or_ln82_fu_335_p2 | icmp_ln81_fu_267_p2);

assign or_ln82_fu_335_p2 = (and_ln89_6_fu_305_p2 | and_ln81_3_fu_329_p2);

assign or_ln83_1_fu_571_p2 = (or_ln83_fu_566_p2 | or_ln81_fu_441_p2);

assign or_ln83_fu_566_p2 = (and_ln82_2_fu_555_p2 | and_ln81_3_reg_1045);

assign or_ln86_fu_823_p2 = (trunc_ln84_fu_820_p1 | select_ln83_1_reg_1095);

assign or_ln89_1_fu_901_p2 = (icmp_ln89_3_fu_895_p2 | icmp_ln89_2_fu_889_p2);

assign or_ln89_fu_883_p2 = (icmp_ln89_fu_871_p2 | icmp_ln89_1_fu_877_p2);

assign output_r_address0 = output_addr_reg_1140_pp0_iter3_reg;

assign output_r_d0 = select_ln5_reg_1176;

assign p_shl1_cast_fu_740_p3 = {{add_ln93_1_fu_730_p2}, {2'd0}};

assign p_shl_cast_fu_774_p3 = {{add_ln89_1_reg_1100}, {3'd0}};

assign select_ln5_fu_971_p3 = ((and_ln5_fu_965_p2[0:0] === 1'b1) ? max_value_1_reg_1169_pp0_iter3_reg : 32'd0);

assign select_ln81_1_fu_460_p3 = ((and_ln89_6_reg_1024[0:0] === 1'b1) ? shl_ln88_mid1_fu_453_p3 : select_ln89_2_fu_398_p3);

assign select_ln81_2_fu_467_p3 = ((and_ln89_6_reg_1024[0:0] === 1'b1) ? h_reg_1032 : select_ln89_reg_1012);

assign select_ln81_3_fu_480_p3 = ((or_ln81_fu_441_p2[0:0] === 1'b1) ? 4'd0 : shl_ln88_s_fu_472_p3);

assign select_ln81_4_fu_493_p3 = ((and_ln89_6_reg_1024[0:0] === 1'b1) ? shl_ln88_mid1_fu_453_p3 : select_ln89_3_fu_413_p3);

assign select_ln81_5_fu_700_p3 = ((icmp_ln81_reg_1003[0:0] === 1'b1) ? 8'd1 : add_ln81_1_fu_694_p2);

assign select_ln81_fu_445_p3 = ((or_ln81_fu_441_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_w_0_phi_fu_187_p4);

assign select_ln82_1_fu_524_p3 = ((and_ln81_3_reg_1045[0:0] === 1'b1) ? shl_ln88_1_mid1_fu_516_p3 : select_ln81_3_fu_480_p3);

assign select_ln82_2_fu_754_p3 = ((and_ln81_3_reg_1045[0:0] === 1'b1) ? w_reg_1084 : select_ln81_reg_1073);

assign select_ln82_3_fu_542_p3 = ((and_ln81_3_reg_1045[0:0] === 1'b1) ? select_ln81_1_fu_460_p3 : select_ln81_4_fu_493_p3);

assign select_ln82_4_fu_686_p3 = ((or_ln81_fu_441_p2[0:0] === 1'b1) ? 6'd1 : add_ln82_1_fu_680_p2);

assign select_ln82_fu_347_p3 = ((or_ln82_1_fu_341_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_i_0_phi_fu_211_p4);

assign select_ln83_1_fu_589_p3 = ((and_ln82_2_fu_555_p2[0:0] === 1'b1) ? trunc_ln83_1_fu_585_p1 : and_ln82_fu_536_p2);

assign select_ln83_2_fu_607_p3 = ((and_ln82_2_fu_555_p2[0:0] === 1'b1) ? add_ln88_2_fu_601_p2 : select_ln82_3_fu_542_p3);

assign select_ln83_3_fu_630_p3 = ((and_ln82_2_fu_555_p2[0:0] === 1'b1) ? icmp_ln92_2_fu_625_p2 : and_ln82_1_fu_549_p2);

assign select_ln83_4_fu_638_p3 = ((and_ln82_2_fu_555_p2[0:0] === 1'b1) ? i_fu_561_p2 : select_ln82_reg_1059);

assign select_ln83_5_fu_673_p3 = ((or_ln82_1_reg_1054[0:0] === 1'b1) ? 4'd1 : add_ln83_1_fu_667_p2);

assign select_ln83_fu_577_p3 = ((or_ln83_1_fu_571_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_j_0_phi_fu_223_p4);

assign select_ln89_1_fu_361_p3 = ((icmp_ln81_reg_1003[0:0] === 1'b1) ? c_fu_355_p2 : ap_phi_mux_c_0_phi_fu_140_p4);

assign select_ln89_2_fu_398_p3 = ((icmp_ln81_reg_1003[0:0] === 1'b1) ? 4'd0 : shl_ln_reg_984);

assign select_ln89_3_fu_413_p3 = ((icmp_ln81_reg_1003[0:0] === 1'b1) ? 4'd0 : add_ln88_reg_989);

assign select_ln89_fu_273_p3 = ((icmp_ln81_fu_267_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_h_0_phi_fu_164_p4);

assign shl_ln88_1_mid1_fu_516_p3 = {{w_fu_510_p2}, {1'd0}};

assign shl_ln88_mid1_fu_453_p3 = {{h_reg_1032}, {1'd0}};

assign shl_ln88_s_fu_472_p3 = {{ap_phi_mux_w_0_phi_fu_187_p4}, {1'd0}};

assign shl_ln_fu_237_p3 = {{ap_phi_mux_h_0_phi_fu_164_p4}, {1'd0}};

assign tmp_2_fu_857_p4 = {{bitcast_ln89_1_fu_854_p1[30:23]}};

assign tmp_4_fu_933_p4 = {{bitcast_ln5_fu_930_p1[30:23]}};

assign tmp_6_fu_368_p3 = {{select_ln89_1_fu_361_p3}, {3'd0}};

assign tmp_7_fu_380_p3 = {{select_ln89_1_fu_361_p3}, {1'd0}};

assign tmp_8_fu_710_p3 = {{select_ln89_1_reg_1066}, {2'd0}};

assign tmp_9_fu_781_p3 = {{add_ln89_1_reg_1100}, {1'd0}};

assign tmp_fu_840_p4 = {{bitcast_ln89_fu_837_p1[30:23]}};

assign trunc_ln5_fu_943_p1 = bitcast_ln5_fu_930_p1[22:0];

assign trunc_ln83_1_fu_585_p1 = i_fu_561_p2[0:0];

assign trunc_ln83_fu_404_p1 = i_0_reg_207[0:0];

assign trunc_ln84_fu_820_p1 = select_ln83_reg_1089[0:0];

assign trunc_ln89_1_fu_867_p1 = bitcast_ln89_1_fu_854_p1[22:0];

assign trunc_ln89_fu_850_p1 = bitcast_ln89_fu_837_p1[22:0];

assign w_fu_510_p2 = (3'd1 + select_ln81_fu_445_p3);

assign xor_ln81_fu_317_p2 = (icmp_ln82_fu_299_p2 ^ 1'd1);

assign xor_ln82_fu_531_p2 = (1'd1 ^ and_ln81_3_reg_1045);

assign xor_ln89_fu_281_p2 = (icmp_ln81_fu_267_p2 ^ 1'd1);

assign zext_ln81_fu_727_p1 = select_ln81_2_reg_1078;

assign zext_ln82_fu_759_p1 = select_ln82_2_fu_754_p3;

assign zext_ln83_1_fu_597_p1 = i_fu_561_p2;

assign zext_ln83_2_fu_615_p1 = select_ln83_2_fu_607_p3;

assign zext_ln83_fu_245_p1 = ap_phi_mux_i_0_phi_fu_211_p4;

assign zext_ln84_fu_645_p1 = select_ln83_fu_577_p3;

assign zext_ln89_1_fu_376_p1 = tmp_6_fu_368_p3;

assign zext_ln89_2_fu_388_p1 = tmp_7_fu_380_p3;

assign zext_ln89_3_fu_788_p1 = tmp_9_fu_781_p3;

assign zext_ln89_4_fu_798_p1 = add_ln88_1_reg_1111;

assign zext_ln89_5_fu_807_p1 = add_ln89_3_fu_801_p2;

assign zext_ln89_fu_707_p1 = select_ln89_1_reg_1066;

assign zext_ln93_1_fu_736_p1 = add_ln93_1_fu_730_p2;

assign zext_ln93_2_fu_769_p1 = add_ln93_3_fu_763_p2;

assign zext_ln93_fu_717_p1 = tmp_8_fu_710_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_984[0] <= 1'b0;
end

endmodule //max_pooling4
