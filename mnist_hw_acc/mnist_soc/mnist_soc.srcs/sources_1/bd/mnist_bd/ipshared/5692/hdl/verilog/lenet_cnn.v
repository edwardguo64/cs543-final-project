// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lenet_cnn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.560510,HLS_SYN_LAT=549664,HLS_SYN_TPT=none,HLS_SYN_MEM=175,HLS_SYN_DSP=26,HLS_SYN_FF=27720,HLS_SYN_LUT=33852,HLS_VERSION=2019_1}" *)

module lenet_cnn (
        ap_clk,
        ap_rst_n,
        m_axi_DATA_IMAGE_AWVALID,
        m_axi_DATA_IMAGE_AWREADY,
        m_axi_DATA_IMAGE_AWADDR,
        m_axi_DATA_IMAGE_AWID,
        m_axi_DATA_IMAGE_AWLEN,
        m_axi_DATA_IMAGE_AWSIZE,
        m_axi_DATA_IMAGE_AWBURST,
        m_axi_DATA_IMAGE_AWLOCK,
        m_axi_DATA_IMAGE_AWCACHE,
        m_axi_DATA_IMAGE_AWPROT,
        m_axi_DATA_IMAGE_AWQOS,
        m_axi_DATA_IMAGE_AWREGION,
        m_axi_DATA_IMAGE_AWUSER,
        m_axi_DATA_IMAGE_WVALID,
        m_axi_DATA_IMAGE_WREADY,
        m_axi_DATA_IMAGE_WDATA,
        m_axi_DATA_IMAGE_WSTRB,
        m_axi_DATA_IMAGE_WLAST,
        m_axi_DATA_IMAGE_WID,
        m_axi_DATA_IMAGE_WUSER,
        m_axi_DATA_IMAGE_ARVALID,
        m_axi_DATA_IMAGE_ARREADY,
        m_axi_DATA_IMAGE_ARADDR,
        m_axi_DATA_IMAGE_ARID,
        m_axi_DATA_IMAGE_ARLEN,
        m_axi_DATA_IMAGE_ARSIZE,
        m_axi_DATA_IMAGE_ARBURST,
        m_axi_DATA_IMAGE_ARLOCK,
        m_axi_DATA_IMAGE_ARCACHE,
        m_axi_DATA_IMAGE_ARPROT,
        m_axi_DATA_IMAGE_ARQOS,
        m_axi_DATA_IMAGE_ARREGION,
        m_axi_DATA_IMAGE_ARUSER,
        m_axi_DATA_IMAGE_RVALID,
        m_axi_DATA_IMAGE_RREADY,
        m_axi_DATA_IMAGE_RDATA,
        m_axi_DATA_IMAGE_RLAST,
        m_axi_DATA_IMAGE_RID,
        m_axi_DATA_IMAGE_RUSER,
        m_axi_DATA_IMAGE_RRESP,
        m_axi_DATA_IMAGE_BVALID,
        m_axi_DATA_IMAGE_BREADY,
        m_axi_DATA_IMAGE_BRESP,
        m_axi_DATA_IMAGE_BID,
        m_axi_DATA_IMAGE_BUSER,
        m_axi_DATA_PARAMETERS_AWVALID,
        m_axi_DATA_PARAMETERS_AWREADY,
        m_axi_DATA_PARAMETERS_AWADDR,
        m_axi_DATA_PARAMETERS_AWID,
        m_axi_DATA_PARAMETERS_AWLEN,
        m_axi_DATA_PARAMETERS_AWSIZE,
        m_axi_DATA_PARAMETERS_AWBURST,
        m_axi_DATA_PARAMETERS_AWLOCK,
        m_axi_DATA_PARAMETERS_AWCACHE,
        m_axi_DATA_PARAMETERS_AWPROT,
        m_axi_DATA_PARAMETERS_AWQOS,
        m_axi_DATA_PARAMETERS_AWREGION,
        m_axi_DATA_PARAMETERS_AWUSER,
        m_axi_DATA_PARAMETERS_WVALID,
        m_axi_DATA_PARAMETERS_WREADY,
        m_axi_DATA_PARAMETERS_WDATA,
        m_axi_DATA_PARAMETERS_WSTRB,
        m_axi_DATA_PARAMETERS_WLAST,
        m_axi_DATA_PARAMETERS_WID,
        m_axi_DATA_PARAMETERS_WUSER,
        m_axi_DATA_PARAMETERS_ARVALID,
        m_axi_DATA_PARAMETERS_ARREADY,
        m_axi_DATA_PARAMETERS_ARADDR,
        m_axi_DATA_PARAMETERS_ARID,
        m_axi_DATA_PARAMETERS_ARLEN,
        m_axi_DATA_PARAMETERS_ARSIZE,
        m_axi_DATA_PARAMETERS_ARBURST,
        m_axi_DATA_PARAMETERS_ARLOCK,
        m_axi_DATA_PARAMETERS_ARCACHE,
        m_axi_DATA_PARAMETERS_ARPROT,
        m_axi_DATA_PARAMETERS_ARQOS,
        m_axi_DATA_PARAMETERS_ARREGION,
        m_axi_DATA_PARAMETERS_ARUSER,
        m_axi_DATA_PARAMETERS_RVALID,
        m_axi_DATA_PARAMETERS_RREADY,
        m_axi_DATA_PARAMETERS_RDATA,
        m_axi_DATA_PARAMETERS_RLAST,
        m_axi_DATA_PARAMETERS_RID,
        m_axi_DATA_PARAMETERS_RUSER,
        m_axi_DATA_PARAMETERS_RRESP,
        m_axi_DATA_PARAMETERS_BVALID,
        m_axi_DATA_PARAMETERS_BREADY,
        m_axi_DATA_PARAMETERS_BRESP,
        m_axi_DATA_PARAMETERS_BID,
        m_axi_DATA_PARAMETERS_BUSER,
        m_axi_DATA_FC6_OUTPUT_AWVALID,
        m_axi_DATA_FC6_OUTPUT_AWREADY,
        m_axi_DATA_FC6_OUTPUT_AWADDR,
        m_axi_DATA_FC6_OUTPUT_AWID,
        m_axi_DATA_FC6_OUTPUT_AWLEN,
        m_axi_DATA_FC6_OUTPUT_AWSIZE,
        m_axi_DATA_FC6_OUTPUT_AWBURST,
        m_axi_DATA_FC6_OUTPUT_AWLOCK,
        m_axi_DATA_FC6_OUTPUT_AWCACHE,
        m_axi_DATA_FC6_OUTPUT_AWPROT,
        m_axi_DATA_FC6_OUTPUT_AWQOS,
        m_axi_DATA_FC6_OUTPUT_AWREGION,
        m_axi_DATA_FC6_OUTPUT_AWUSER,
        m_axi_DATA_FC6_OUTPUT_WVALID,
        m_axi_DATA_FC6_OUTPUT_WREADY,
        m_axi_DATA_FC6_OUTPUT_WDATA,
        m_axi_DATA_FC6_OUTPUT_WSTRB,
        m_axi_DATA_FC6_OUTPUT_WLAST,
        m_axi_DATA_FC6_OUTPUT_WID,
        m_axi_DATA_FC6_OUTPUT_WUSER,
        m_axi_DATA_FC6_OUTPUT_ARVALID,
        m_axi_DATA_FC6_OUTPUT_ARREADY,
        m_axi_DATA_FC6_OUTPUT_ARADDR,
        m_axi_DATA_FC6_OUTPUT_ARID,
        m_axi_DATA_FC6_OUTPUT_ARLEN,
        m_axi_DATA_FC6_OUTPUT_ARSIZE,
        m_axi_DATA_FC6_OUTPUT_ARBURST,
        m_axi_DATA_FC6_OUTPUT_ARLOCK,
        m_axi_DATA_FC6_OUTPUT_ARCACHE,
        m_axi_DATA_FC6_OUTPUT_ARPROT,
        m_axi_DATA_FC6_OUTPUT_ARQOS,
        m_axi_DATA_FC6_OUTPUT_ARREGION,
        m_axi_DATA_FC6_OUTPUT_ARUSER,
        m_axi_DATA_FC6_OUTPUT_RVALID,
        m_axi_DATA_FC6_OUTPUT_RREADY,
        m_axi_DATA_FC6_OUTPUT_RDATA,
        m_axi_DATA_FC6_OUTPUT_RLAST,
        m_axi_DATA_FC6_OUTPUT_RID,
        m_axi_DATA_FC6_OUTPUT_RUSER,
        m_axi_DATA_FC6_OUTPUT_RRESP,
        m_axi_DATA_FC6_OUTPUT_BVALID,
        m_axi_DATA_FC6_OUTPUT_BREADY,
        m_axi_DATA_FC6_OUTPUT_BRESP,
        m_axi_DATA_FC6_OUTPUT_BID,
        m_axi_DATA_FC6_OUTPUT_BUSER,
        s_axi_CTL_AWVALID,
        s_axi_CTL_AWREADY,
        s_axi_CTL_AWADDR,
        s_axi_CTL_WVALID,
        s_axi_CTL_WREADY,
        s_axi_CTL_WDATA,
        s_axi_CTL_WSTRB,
        s_axi_CTL_ARVALID,
        s_axi_CTL_ARREADY,
        s_axi_CTL_ARADDR,
        s_axi_CTL_RVALID,
        s_axi_CTL_RREADY,
        s_axi_CTL_RDATA,
        s_axi_CTL_RRESP,
        s_axi_CTL_BVALID,
        s_axi_CTL_BREADY,
        s_axi_CTL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 90'd1;
parameter    ap_ST_fsm_state2 = 90'd2;
parameter    ap_ST_fsm_state3 = 90'd4;
parameter    ap_ST_fsm_state4 = 90'd8;
parameter    ap_ST_fsm_state5 = 90'd16;
parameter    ap_ST_fsm_state6 = 90'd32;
parameter    ap_ST_fsm_state7 = 90'd64;
parameter    ap_ST_fsm_state8 = 90'd128;
parameter    ap_ST_fsm_pp0_stage0 = 90'd256;
parameter    ap_ST_fsm_state19 = 90'd512;
parameter    ap_ST_fsm_state20 = 90'd1024;
parameter    ap_ST_fsm_state21 = 90'd2048;
parameter    ap_ST_fsm_state22 = 90'd4096;
parameter    ap_ST_fsm_state23 = 90'd8192;
parameter    ap_ST_fsm_state24 = 90'd16384;
parameter    ap_ST_fsm_state25 = 90'd32768;
parameter    ap_ST_fsm_state26 = 90'd65536;
parameter    ap_ST_fsm_pp1_stage0 = 90'd131072;
parameter    ap_ST_fsm_state30 = 90'd262144;
parameter    ap_ST_fsm_state31 = 90'd524288;
parameter    ap_ST_fsm_state32 = 90'd1048576;
parameter    ap_ST_fsm_state33 = 90'd2097152;
parameter    ap_ST_fsm_state34 = 90'd4194304;
parameter    ap_ST_fsm_state35 = 90'd8388608;
parameter    ap_ST_fsm_state36 = 90'd16777216;
parameter    ap_ST_fsm_state37 = 90'd33554432;
parameter    ap_ST_fsm_pp2_stage0 = 90'd67108864;
parameter    ap_ST_fsm_state41 = 90'd134217728;
parameter    ap_ST_fsm_state42 = 90'd268435456;
parameter    ap_ST_fsm_state43 = 90'd536870912;
parameter    ap_ST_fsm_state44 = 90'd1073741824;
parameter    ap_ST_fsm_state45 = 90'd2147483648;
parameter    ap_ST_fsm_state46 = 90'd4294967296;
parameter    ap_ST_fsm_state47 = 90'd8589934592;
parameter    ap_ST_fsm_state48 = 90'd17179869184;
parameter    ap_ST_fsm_pp3_stage0 = 90'd34359738368;
parameter    ap_ST_fsm_state52 = 90'd68719476736;
parameter    ap_ST_fsm_state53 = 90'd137438953472;
parameter    ap_ST_fsm_state54 = 90'd274877906944;
parameter    ap_ST_fsm_state55 = 90'd549755813888;
parameter    ap_ST_fsm_state56 = 90'd1099511627776;
parameter    ap_ST_fsm_state57 = 90'd2199023255552;
parameter    ap_ST_fsm_state58 = 90'd4398046511104;
parameter    ap_ST_fsm_state59 = 90'd8796093022208;
parameter    ap_ST_fsm_pp4_stage0 = 90'd17592186044416;
parameter    ap_ST_fsm_state63 = 90'd35184372088832;
parameter    ap_ST_fsm_state64 = 90'd70368744177664;
parameter    ap_ST_fsm_state65 = 90'd140737488355328;
parameter    ap_ST_fsm_state66 = 90'd281474976710656;
parameter    ap_ST_fsm_state67 = 90'd562949953421312;
parameter    ap_ST_fsm_state68 = 90'd1125899906842624;
parameter    ap_ST_fsm_state69 = 90'd2251799813685248;
parameter    ap_ST_fsm_state70 = 90'd4503599627370496;
parameter    ap_ST_fsm_pp5_stage0 = 90'd9007199254740992;
parameter    ap_ST_fsm_state74 = 90'd18014398509481984;
parameter    ap_ST_fsm_state75 = 90'd36028797018963968;
parameter    ap_ST_fsm_state76 = 90'd72057594037927936;
parameter    ap_ST_fsm_state77 = 90'd144115188075855872;
parameter    ap_ST_fsm_state78 = 90'd288230376151711744;
parameter    ap_ST_fsm_state79 = 90'd576460752303423488;
parameter    ap_ST_fsm_state80 = 90'd1152921504606846976;
parameter    ap_ST_fsm_state81 = 90'd2305843009213693952;
parameter    ap_ST_fsm_pp6_stage0 = 90'd4611686018427387904;
parameter    ap_ST_fsm_state85 = 90'd9223372036854775808;
parameter    ap_ST_fsm_state86 = 90'd18446744073709551616;
parameter    ap_ST_fsm_state87 = 90'd36893488147419103232;
parameter    ap_ST_fsm_state88 = 90'd73786976294838206464;
parameter    ap_ST_fsm_state89 = 90'd147573952589676412928;
parameter    ap_ST_fsm_state90 = 90'd295147905179352825856;
parameter    ap_ST_fsm_state91 = 90'd590295810358705651712;
parameter    ap_ST_fsm_state92 = 90'd1180591620717411303424;
parameter    ap_ST_fsm_pp7_stage0 = 90'd2361183241434822606848;
parameter    ap_ST_fsm_state96 = 90'd4722366482869645213696;
parameter    ap_ST_fsm_state97 = 90'd9444732965739290427392;
parameter    ap_ST_fsm_state98 = 90'd18889465931478580854784;
parameter    ap_ST_fsm_state99 = 90'd37778931862957161709568;
parameter    ap_ST_fsm_state100 = 90'd75557863725914323419136;
parameter    ap_ST_fsm_state101 = 90'd151115727451828646838272;
parameter    ap_ST_fsm_state102 = 90'd302231454903657293676544;
parameter    ap_ST_fsm_state103 = 90'd604462909807314587353088;
parameter    ap_ST_fsm_state104 = 90'd1208925819614629174706176;
parameter    ap_ST_fsm_state105 = 90'd2417851639229258349412352;
parameter    ap_ST_fsm_pp8_stage0 = 90'd4835703278458516698824704;
parameter    ap_ST_fsm_state119 = 90'd9671406556917033397649408;
parameter    ap_ST_fsm_pp9_stage0 = 90'd19342813113834066795298816;
parameter    ap_ST_fsm_state123 = 90'd38685626227668133590597632;
parameter    ap_ST_fsm_state124 = 90'd77371252455336267181195264;
parameter    ap_ST_fsm_state125 = 90'd154742504910672534362390528;
parameter    ap_ST_fsm_state126 = 90'd309485009821345068724781056;
parameter    ap_ST_fsm_state127 = 90'd618970019642690137449562112;
parameter    C_S_AXI_CTL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_IMAGE_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_IMAGE_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_IMAGE_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_IMAGE_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IMAGE_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IMAGE_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IMAGE_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IMAGE_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_IMAGE_USER_VALUE = 0;
parameter    C_M_AXI_DATA_IMAGE_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_IMAGE_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_PARAMETERS_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_PARAMETERS_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_PARAMETERS_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_PARAMETERS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PARAMETERS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PARAMETERS_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PARAMETERS_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PARAMETERS_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_PARAMETERS_USER_VALUE = 0;
parameter    C_M_AXI_DATA_PARAMETERS_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_PARAMETERS_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_FC6_OUTPUT_ID_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_OUTPUT_ADDR_WIDTH = 32;
parameter    C_M_AXI_DATA_FC6_OUTPUT_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA_FC6_OUTPUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_OUTPUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_OUTPUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_OUTPUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_OUTPUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_FC6_OUTPUT_USER_VALUE = 0;
parameter    C_M_AXI_DATA_FC6_OUTPUT_PROT_VALUE = 0;
parameter    C_M_AXI_DATA_FC6_OUTPUT_CACHE_VALUE = 3;

parameter C_S_AXI_CTL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_IMAGE_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_PARAMETERS_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA_FC6_OUTPUT_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_DATA_IMAGE_AWVALID;
input   m_axi_DATA_IMAGE_AWREADY;
output  [C_M_AXI_DATA_IMAGE_ADDR_WIDTH - 1:0] m_axi_DATA_IMAGE_AWADDR;
output  [C_M_AXI_DATA_IMAGE_ID_WIDTH - 1:0] m_axi_DATA_IMAGE_AWID;
output  [7:0] m_axi_DATA_IMAGE_AWLEN;
output  [2:0] m_axi_DATA_IMAGE_AWSIZE;
output  [1:0] m_axi_DATA_IMAGE_AWBURST;
output  [1:0] m_axi_DATA_IMAGE_AWLOCK;
output  [3:0] m_axi_DATA_IMAGE_AWCACHE;
output  [2:0] m_axi_DATA_IMAGE_AWPROT;
output  [3:0] m_axi_DATA_IMAGE_AWQOS;
output  [3:0] m_axi_DATA_IMAGE_AWREGION;
output  [C_M_AXI_DATA_IMAGE_AWUSER_WIDTH - 1:0] m_axi_DATA_IMAGE_AWUSER;
output   m_axi_DATA_IMAGE_WVALID;
input   m_axi_DATA_IMAGE_WREADY;
output  [C_M_AXI_DATA_IMAGE_DATA_WIDTH - 1:0] m_axi_DATA_IMAGE_WDATA;
output  [C_M_AXI_DATA_IMAGE_WSTRB_WIDTH - 1:0] m_axi_DATA_IMAGE_WSTRB;
output   m_axi_DATA_IMAGE_WLAST;
output  [C_M_AXI_DATA_IMAGE_ID_WIDTH - 1:0] m_axi_DATA_IMAGE_WID;
output  [C_M_AXI_DATA_IMAGE_WUSER_WIDTH - 1:0] m_axi_DATA_IMAGE_WUSER;
output   m_axi_DATA_IMAGE_ARVALID;
input   m_axi_DATA_IMAGE_ARREADY;
output  [C_M_AXI_DATA_IMAGE_ADDR_WIDTH - 1:0] m_axi_DATA_IMAGE_ARADDR;
output  [C_M_AXI_DATA_IMAGE_ID_WIDTH - 1:0] m_axi_DATA_IMAGE_ARID;
output  [7:0] m_axi_DATA_IMAGE_ARLEN;
output  [2:0] m_axi_DATA_IMAGE_ARSIZE;
output  [1:0] m_axi_DATA_IMAGE_ARBURST;
output  [1:0] m_axi_DATA_IMAGE_ARLOCK;
output  [3:0] m_axi_DATA_IMAGE_ARCACHE;
output  [2:0] m_axi_DATA_IMAGE_ARPROT;
output  [3:0] m_axi_DATA_IMAGE_ARQOS;
output  [3:0] m_axi_DATA_IMAGE_ARREGION;
output  [C_M_AXI_DATA_IMAGE_ARUSER_WIDTH - 1:0] m_axi_DATA_IMAGE_ARUSER;
input   m_axi_DATA_IMAGE_RVALID;
output   m_axi_DATA_IMAGE_RREADY;
input  [C_M_AXI_DATA_IMAGE_DATA_WIDTH - 1:0] m_axi_DATA_IMAGE_RDATA;
input   m_axi_DATA_IMAGE_RLAST;
input  [C_M_AXI_DATA_IMAGE_ID_WIDTH - 1:0] m_axi_DATA_IMAGE_RID;
input  [C_M_AXI_DATA_IMAGE_RUSER_WIDTH - 1:0] m_axi_DATA_IMAGE_RUSER;
input  [1:0] m_axi_DATA_IMAGE_RRESP;
input   m_axi_DATA_IMAGE_BVALID;
output   m_axi_DATA_IMAGE_BREADY;
input  [1:0] m_axi_DATA_IMAGE_BRESP;
input  [C_M_AXI_DATA_IMAGE_ID_WIDTH - 1:0] m_axi_DATA_IMAGE_BID;
input  [C_M_AXI_DATA_IMAGE_BUSER_WIDTH - 1:0] m_axi_DATA_IMAGE_BUSER;
output   m_axi_DATA_PARAMETERS_AWVALID;
input   m_axi_DATA_PARAMETERS_AWREADY;
output  [C_M_AXI_DATA_PARAMETERS_ADDR_WIDTH - 1:0] m_axi_DATA_PARAMETERS_AWADDR;
output  [C_M_AXI_DATA_PARAMETERS_ID_WIDTH - 1:0] m_axi_DATA_PARAMETERS_AWID;
output  [7:0] m_axi_DATA_PARAMETERS_AWLEN;
output  [2:0] m_axi_DATA_PARAMETERS_AWSIZE;
output  [1:0] m_axi_DATA_PARAMETERS_AWBURST;
output  [1:0] m_axi_DATA_PARAMETERS_AWLOCK;
output  [3:0] m_axi_DATA_PARAMETERS_AWCACHE;
output  [2:0] m_axi_DATA_PARAMETERS_AWPROT;
output  [3:0] m_axi_DATA_PARAMETERS_AWQOS;
output  [3:0] m_axi_DATA_PARAMETERS_AWREGION;
output  [C_M_AXI_DATA_PARAMETERS_AWUSER_WIDTH - 1:0] m_axi_DATA_PARAMETERS_AWUSER;
output   m_axi_DATA_PARAMETERS_WVALID;
input   m_axi_DATA_PARAMETERS_WREADY;
output  [C_M_AXI_DATA_PARAMETERS_DATA_WIDTH - 1:0] m_axi_DATA_PARAMETERS_WDATA;
output  [C_M_AXI_DATA_PARAMETERS_WSTRB_WIDTH - 1:0] m_axi_DATA_PARAMETERS_WSTRB;
output   m_axi_DATA_PARAMETERS_WLAST;
output  [C_M_AXI_DATA_PARAMETERS_ID_WIDTH - 1:0] m_axi_DATA_PARAMETERS_WID;
output  [C_M_AXI_DATA_PARAMETERS_WUSER_WIDTH - 1:0] m_axi_DATA_PARAMETERS_WUSER;
output   m_axi_DATA_PARAMETERS_ARVALID;
input   m_axi_DATA_PARAMETERS_ARREADY;
output  [C_M_AXI_DATA_PARAMETERS_ADDR_WIDTH - 1:0] m_axi_DATA_PARAMETERS_ARADDR;
output  [C_M_AXI_DATA_PARAMETERS_ID_WIDTH - 1:0] m_axi_DATA_PARAMETERS_ARID;
output  [7:0] m_axi_DATA_PARAMETERS_ARLEN;
output  [2:0] m_axi_DATA_PARAMETERS_ARSIZE;
output  [1:0] m_axi_DATA_PARAMETERS_ARBURST;
output  [1:0] m_axi_DATA_PARAMETERS_ARLOCK;
output  [3:0] m_axi_DATA_PARAMETERS_ARCACHE;
output  [2:0] m_axi_DATA_PARAMETERS_ARPROT;
output  [3:0] m_axi_DATA_PARAMETERS_ARQOS;
output  [3:0] m_axi_DATA_PARAMETERS_ARREGION;
output  [C_M_AXI_DATA_PARAMETERS_ARUSER_WIDTH - 1:0] m_axi_DATA_PARAMETERS_ARUSER;
input   m_axi_DATA_PARAMETERS_RVALID;
output   m_axi_DATA_PARAMETERS_RREADY;
input  [C_M_AXI_DATA_PARAMETERS_DATA_WIDTH - 1:0] m_axi_DATA_PARAMETERS_RDATA;
input   m_axi_DATA_PARAMETERS_RLAST;
input  [C_M_AXI_DATA_PARAMETERS_ID_WIDTH - 1:0] m_axi_DATA_PARAMETERS_RID;
input  [C_M_AXI_DATA_PARAMETERS_RUSER_WIDTH - 1:0] m_axi_DATA_PARAMETERS_RUSER;
input  [1:0] m_axi_DATA_PARAMETERS_RRESP;
input   m_axi_DATA_PARAMETERS_BVALID;
output   m_axi_DATA_PARAMETERS_BREADY;
input  [1:0] m_axi_DATA_PARAMETERS_BRESP;
input  [C_M_AXI_DATA_PARAMETERS_ID_WIDTH - 1:0] m_axi_DATA_PARAMETERS_BID;
input  [C_M_AXI_DATA_PARAMETERS_BUSER_WIDTH - 1:0] m_axi_DATA_PARAMETERS_BUSER;
output   m_axi_DATA_FC6_OUTPUT_AWVALID;
input   m_axi_DATA_FC6_OUTPUT_AWREADY;
output  [C_M_AXI_DATA_FC6_OUTPUT_ADDR_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_AWADDR;
output  [C_M_AXI_DATA_FC6_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_AWID;
output  [7:0] m_axi_DATA_FC6_OUTPUT_AWLEN;
output  [2:0] m_axi_DATA_FC6_OUTPUT_AWSIZE;
output  [1:0] m_axi_DATA_FC6_OUTPUT_AWBURST;
output  [1:0] m_axi_DATA_FC6_OUTPUT_AWLOCK;
output  [3:0] m_axi_DATA_FC6_OUTPUT_AWCACHE;
output  [2:0] m_axi_DATA_FC6_OUTPUT_AWPROT;
output  [3:0] m_axi_DATA_FC6_OUTPUT_AWQOS;
output  [3:0] m_axi_DATA_FC6_OUTPUT_AWREGION;
output  [C_M_AXI_DATA_FC6_OUTPUT_AWUSER_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_AWUSER;
output   m_axi_DATA_FC6_OUTPUT_WVALID;
input   m_axi_DATA_FC6_OUTPUT_WREADY;
output  [C_M_AXI_DATA_FC6_OUTPUT_DATA_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_WDATA;
output  [C_M_AXI_DATA_FC6_OUTPUT_WSTRB_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_WSTRB;
output   m_axi_DATA_FC6_OUTPUT_WLAST;
output  [C_M_AXI_DATA_FC6_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_WID;
output  [C_M_AXI_DATA_FC6_OUTPUT_WUSER_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_WUSER;
output   m_axi_DATA_FC6_OUTPUT_ARVALID;
input   m_axi_DATA_FC6_OUTPUT_ARREADY;
output  [C_M_AXI_DATA_FC6_OUTPUT_ADDR_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_ARADDR;
output  [C_M_AXI_DATA_FC6_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_ARID;
output  [7:0] m_axi_DATA_FC6_OUTPUT_ARLEN;
output  [2:0] m_axi_DATA_FC6_OUTPUT_ARSIZE;
output  [1:0] m_axi_DATA_FC6_OUTPUT_ARBURST;
output  [1:0] m_axi_DATA_FC6_OUTPUT_ARLOCK;
output  [3:0] m_axi_DATA_FC6_OUTPUT_ARCACHE;
output  [2:0] m_axi_DATA_FC6_OUTPUT_ARPROT;
output  [3:0] m_axi_DATA_FC6_OUTPUT_ARQOS;
output  [3:0] m_axi_DATA_FC6_OUTPUT_ARREGION;
output  [C_M_AXI_DATA_FC6_OUTPUT_ARUSER_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_ARUSER;
input   m_axi_DATA_FC6_OUTPUT_RVALID;
output   m_axi_DATA_FC6_OUTPUT_RREADY;
input  [C_M_AXI_DATA_FC6_OUTPUT_DATA_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_RDATA;
input   m_axi_DATA_FC6_OUTPUT_RLAST;
input  [C_M_AXI_DATA_FC6_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_RID;
input  [C_M_AXI_DATA_FC6_OUTPUT_RUSER_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_RUSER;
input  [1:0] m_axi_DATA_FC6_OUTPUT_RRESP;
input   m_axi_DATA_FC6_OUTPUT_BVALID;
output   m_axi_DATA_FC6_OUTPUT_BREADY;
input  [1:0] m_axi_DATA_FC6_OUTPUT_BRESP;
input  [C_M_AXI_DATA_FC6_OUTPUT_ID_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_BID;
input  [C_M_AXI_DATA_FC6_OUTPUT_BUSER_WIDTH - 1:0] m_axi_DATA_FC6_OUTPUT_BUSER;
input   s_axi_CTL_AWVALID;
output   s_axi_CTL_AWREADY;
input  [C_S_AXI_CTL_ADDR_WIDTH - 1:0] s_axi_CTL_AWADDR;
input   s_axi_CTL_WVALID;
output   s_axi_CTL_WREADY;
input  [C_S_AXI_CTL_DATA_WIDTH - 1:0] s_axi_CTL_WDATA;
input  [C_S_AXI_CTL_WSTRB_WIDTH - 1:0] s_axi_CTL_WSTRB;
input   s_axi_CTL_ARVALID;
output   s_axi_CTL_ARREADY;
input  [C_S_AXI_CTL_ADDR_WIDTH - 1:0] s_axi_CTL_ARADDR;
output   s_axi_CTL_RVALID;
input   s_axi_CTL_RREADY;
output  [C_S_AXI_CTL_DATA_WIDTH - 1:0] s_axi_CTL_RDATA;
output  [1:0] s_axi_CTL_RRESP;
output   s_axi_CTL_BVALID;
input   s_axi_CTL_BREADY;
output  [1:0] s_axi_CTL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [89:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] image_r;
wire   [31:0] parameters;
wire   [31:0] fc6_output;
reg    DATA_PARAMETERS_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    DATA_PARAMETERS_blk_n_R;
reg    ap_enable_reg_pp0_iter8;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln154_reg_1430;
reg   [0:0] icmp_ln154_reg_1430_pp0_iter7_reg;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln155_reg_1486;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln157_reg_1511;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln158_reg_1536;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln160_reg_1561;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
wire    ap_block_pp5_stage0;
reg   [0:0] icmp_ln161_reg_1586;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_pp6_stage0;
reg    ap_enable_reg_pp6_iter1;
wire    ap_block_pp6_stage0;
reg   [0:0] icmp_ln163_reg_1611;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_pp7_stage0;
reg    ap_enable_reg_pp7_iter1;
wire    ap_block_pp7_stage0;
reg   [0:0] icmp_ln164_reg_1636;
reg    DATA_FC6_OUTPUT_blk_n_AW;
wire    ap_CS_fsm_state119;
reg    DATA_FC6_OUTPUT_blk_n_W;
reg    ap_enable_reg_pp9_iter2;
wire    ap_block_pp9_stage0;
reg   [0:0] icmp_ln178_reg_1744;
reg   [0:0] icmp_ln178_reg_1744_pp9_iter1_reg;
reg    DATA_FC6_OUTPUT_blk_n_B;
wire    ap_CS_fsm_state127;
wire    DATA_IMAGE_AWREADY;
wire    DATA_IMAGE_WREADY;
reg    DATA_IMAGE_ARVALID;
wire    DATA_IMAGE_ARREADY;
wire    DATA_IMAGE_RVALID;
reg    DATA_IMAGE_RREADY;
wire   [31:0] DATA_IMAGE_RDATA;
wire    DATA_IMAGE_RLAST;
wire   [0:0] DATA_IMAGE_RID;
wire   [0:0] DATA_IMAGE_RUSER;
wire   [1:0] DATA_IMAGE_RRESP;
wire    DATA_IMAGE_BVALID;
wire   [1:0] DATA_IMAGE_BRESP;
wire   [0:0] DATA_IMAGE_BID;
wire   [0:0] DATA_IMAGE_BUSER;
wire    DATA_PARAMETERS_AWREADY;
wire    DATA_PARAMETERS_WREADY;
reg    DATA_PARAMETERS_ARVALID;
wire    DATA_PARAMETERS_ARREADY;
reg   [31:0] DATA_PARAMETERS_ARADDR;
reg   [31:0] DATA_PARAMETERS_ARLEN;
wire    DATA_PARAMETERS_RVALID;
reg    DATA_PARAMETERS_RREADY;
wire   [31:0] DATA_PARAMETERS_RDATA;
wire    DATA_PARAMETERS_RLAST;
wire   [0:0] DATA_PARAMETERS_RID;
wire   [0:0] DATA_PARAMETERS_RUSER;
wire   [1:0] DATA_PARAMETERS_RRESP;
wire    DATA_PARAMETERS_BVALID;
wire   [1:0] DATA_PARAMETERS_BRESP;
wire   [0:0] DATA_PARAMETERS_BID;
wire   [0:0] DATA_PARAMETERS_BUSER;
reg    DATA_FC6_OUTPUT_AWVALID;
wire    DATA_FC6_OUTPUT_AWREADY;
reg    DATA_FC6_OUTPUT_WVALID;
wire    DATA_FC6_OUTPUT_WREADY;
wire    DATA_FC6_OUTPUT_ARREADY;
wire    DATA_FC6_OUTPUT_RVALID;
wire   [31:0] DATA_FC6_OUTPUT_RDATA;
wire    DATA_FC6_OUTPUT_RLAST;
wire   [0:0] DATA_FC6_OUTPUT_RID;
wire   [0:0] DATA_FC6_OUTPUT_RUSER;
wire   [1:0] DATA_FC6_OUTPUT_RRESP;
wire    DATA_FC6_OUTPUT_BVALID;
reg    DATA_FC6_OUTPUT_BREADY;
wire   [1:0] DATA_FC6_OUTPUT_BRESP;
wire   [0:0] DATA_FC6_OUTPUT_BID;
wire   [0:0] DATA_FC6_OUTPUT_BUSER;
reg   [7:0] phi_ln154_reg_603;
reg   [15:0] phi_mul_reg_614;
reg   [7:0] phi_urem_reg_625;
reg   [2:0] phi_ln155_reg_636;
reg   [2:0] phi_ln155_reg_636_pp1_iter1_reg;
wire    ap_block_state27_pp1_stage0_iter0;
reg    ap_block_state28_pp1_stage0_iter1;
wire    ap_block_state29_pp1_stage0_iter2;
reg    ap_block_pp1_stage0_11001;
reg   [11:0] phi_ln157_reg_648;
reg   [11:0] phi_ln157_reg_648_pp2_iter1_reg;
wire    ap_block_state38_pp2_stage0_iter0;
reg    ap_block_state39_pp2_stage0_iter1;
wire    ap_block_state40_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
reg   [4:0] phi_ln158_reg_660;
reg   [4:0] phi_ln158_reg_660_pp3_iter1_reg;
wire    ap_block_state49_pp3_stage0_iter0;
reg    ap_block_state50_pp3_stage0_iter1;
wire    ap_block_state51_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
reg   [15:0] phi_ln160_reg_672;
reg   [15:0] phi_ln160_reg_672_pp4_iter1_reg;
wire    ap_block_state60_pp4_stage0_iter0;
reg    ap_block_state61_pp4_stage0_iter1;
wire    ap_block_state62_pp4_stage0_iter2;
reg    ap_block_pp4_stage0_11001;
reg   [6:0] phi_ln161_reg_684;
reg   [6:0] phi_ln161_reg_684_pp5_iter1_reg;
wire    ap_block_state71_pp5_stage0_iter0;
reg    ap_block_state72_pp5_stage0_iter1;
wire    ap_block_state73_pp5_stage0_iter2;
reg    ap_block_pp5_stage0_11001;
reg   [10:0] phi_ln163_reg_696;
reg   [10:0] phi_ln163_reg_696_pp6_iter1_reg;
wire    ap_block_state82_pp6_stage0_iter0;
reg    ap_block_state83_pp6_stage0_iter1;
wire    ap_block_state84_pp6_stage0_iter2;
reg    ap_block_pp6_stage0_11001;
reg   [3:0] phi_ln164_reg_708;
reg   [3:0] phi_ln164_reg_708_pp7_iter1_reg;
wire    ap_block_state93_pp7_stage0_iter0;
reg    ap_block_state94_pp7_stage0_iter1;
wire    ap_block_state95_pp7_stage0_iter2;
reg    ap_block_pp7_stage0_11001;
reg   [10:0] indvar_flatten_reg_720;
reg   [6:0] c_0_i_reg_731;
reg   [3:0] n_0_i_reg_742;
reg   [3:0] phi_ln178_reg_753;
reg   [29:0] fc6_output5_reg_1391;
reg   [29:0] parameters3_reg_1396;
reg   [29:0] image1_reg_1402;
reg   [31:0] DATA_FC6_OUTPUT_addr_reg_1413;
wire    ap_CS_fsm_state8;
wire   [30:0] p_cast_fu_859_p1;
reg   [30:0] p_cast_reg_1419;
wire   [0:0] icmp_ln154_fu_862_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state9_pp0_stage0_iter0;
wire    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state12_pp0_stage0_iter3;
wire    ap_block_state13_pp0_stage0_iter4;
wire    ap_block_state14_pp0_stage0_iter5;
wire    ap_block_state15_pp0_stage0_iter6;
wire    ap_block_state16_pp0_stage0_iter7;
reg    ap_block_state17_pp0_stage0_iter8;
wire    ap_block_state18_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln154_reg_1430_pp0_iter1_reg;
reg   [0:0] icmp_ln154_reg_1430_pp0_iter2_reg;
reg   [0:0] icmp_ln154_reg_1430_pp0_iter3_reg;
reg   [0:0] icmp_ln154_reg_1430_pp0_iter4_reg;
reg   [0:0] icmp_ln154_reg_1430_pp0_iter5_reg;
reg   [0:0] icmp_ln154_reg_1430_pp0_iter6_reg;
reg   [0:0] icmp_ln154_reg_1430_pp0_iter8_reg;
wire   [7:0] add_ln154_fu_868_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] select_ln154_1_fu_886_p3;
wire   [15:0] add_ln154_7_fu_894_p2;
reg   [2:0] tmp_reg_1449;
reg   [2:0] tmp_reg_1449_pp0_iter1_reg;
reg   [2:0] tmp_reg_1449_pp0_iter2_reg;
reg   [2:0] tmp_reg_1449_pp0_iter3_reg;
reg   [2:0] tmp_reg_1449_pp0_iter4_reg;
reg   [2:0] tmp_reg_1449_pp0_iter5_reg;
reg   [2:0] tmp_reg_1449_pp0_iter6_reg;
reg   [2:0] tmp_reg_1449_pp0_iter7_reg;
wire   [4:0] select_ln154_fu_926_p3;
reg   [3:0] tmp_13_reg_1460;
reg   [3:0] tmp_13_reg_1460_pp0_iter1_reg;
reg   [3:0] tmp_13_reg_1460_pp0_iter2_reg;
reg   [3:0] tmp_13_reg_1460_pp0_iter3_reg;
reg   [3:0] tmp_13_reg_1460_pp0_iter4_reg;
reg   [3:0] tmp_13_reg_1460_pp0_iter5_reg;
reg   [3:0] tmp_13_reg_1460_pp0_iter6_reg;
reg   [3:0] tmp_13_reg_1460_pp0_iter7_reg;
reg   [31:0] DATA_PARAMETERS_addr_9_reg_1465;
wire   [8:0] add_ln154_6_fu_1019_p2;
reg   [8:0] add_ln154_6_reg_1470;
wire   [30:0] add_ln155_1_fu_1029_p2;
reg   [30:0] add_ln155_1_reg_1475;
wire    ap_CS_fsm_state19;
wire   [0:0] icmp_ln155_fu_1044_p2;
reg   [0:0] icmp_ln155_reg_1486_pp1_iter1_reg;
wire   [2:0] add_ln155_fu_1050_p2;
reg   [2:0] add_ln155_reg_1490;
reg    ap_enable_reg_pp1_iter0;
reg   [31:0] DATA_PARAMETERS_addr_11_reg_1495;
wire   [30:0] add_ln157_1_fu_1061_p2;
reg   [30:0] add_ln157_1_reg_1500;
wire    ap_CS_fsm_state30;
wire   [0:0] icmp_ln157_fu_1076_p2;
reg   [0:0] icmp_ln157_reg_1511_pp2_iter1_reg;
wire   [11:0] add_ln157_fu_1082_p2;
reg   [11:0] add_ln157_reg_1515;
reg    ap_enable_reg_pp2_iter0;
reg   [31:0] DATA_PARAMETERS_addr_13_reg_1520;
wire   [30:0] add_ln158_1_fu_1093_p2;
reg   [30:0] add_ln158_1_reg_1525;
wire    ap_CS_fsm_state41;
wire   [0:0] icmp_ln158_fu_1108_p2;
reg   [0:0] icmp_ln158_reg_1536_pp3_iter1_reg;
wire   [4:0] add_ln158_fu_1114_p2;
reg   [4:0] add_ln158_reg_1540;
reg    ap_enable_reg_pp3_iter0;
reg   [31:0] DATA_PARAMETERS_addr_15_reg_1545;
wire   [30:0] add_ln160_1_fu_1125_p2;
reg   [30:0] add_ln160_1_reg_1550;
wire    ap_CS_fsm_state52;
wire   [0:0] icmp_ln160_fu_1140_p2;
reg   [0:0] icmp_ln160_reg_1561_pp4_iter1_reg;
wire   [15:0] add_ln160_fu_1146_p2;
reg   [15:0] add_ln160_reg_1565;
reg    ap_enable_reg_pp4_iter0;
reg   [31:0] DATA_PARAMETERS_addr_17_reg_1570;
wire   [30:0] add_ln161_1_fu_1157_p2;
reg   [30:0] add_ln161_1_reg_1575;
wire    ap_CS_fsm_state63;
wire   [0:0] icmp_ln161_fu_1172_p2;
reg   [0:0] icmp_ln161_reg_1586_pp5_iter1_reg;
wire   [6:0] add_ln161_fu_1178_p2;
reg   [6:0] add_ln161_reg_1590;
reg    ap_enable_reg_pp5_iter0;
reg   [31:0] DATA_PARAMETERS_addr_19_reg_1595;
wire   [30:0] add_ln163_1_fu_1189_p2;
reg   [30:0] add_ln163_1_reg_1600;
wire    ap_CS_fsm_state74;
wire   [0:0] icmp_ln163_fu_1204_p2;
reg   [0:0] icmp_ln163_reg_1611_pp6_iter1_reg;
wire   [10:0] add_ln163_fu_1210_p2;
reg   [10:0] add_ln163_reg_1615;
reg    ap_enable_reg_pp6_iter0;
reg   [31:0] DATA_PARAMETERS_addr_21_reg_1620;
wire   [30:0] add_ln164_1_fu_1221_p2;
reg   [30:0] add_ln164_1_reg_1625;
wire    ap_CS_fsm_state85;
wire   [0:0] icmp_ln164_fu_1236_p2;
reg   [0:0] icmp_ln164_reg_1636_pp7_iter1_reg;
wire   [3:0] add_ln164_fu_1242_p2;
reg   [3:0] add_ln164_reg_1640;
reg    ap_enable_reg_pp7_iter0;
reg   [31:0] DATA_PARAMETERS_addr_23_reg_1645;
wire   [0:0] icmp_ln122_fu_1253_p2;
reg   [0:0] icmp_ln122_reg_1650;
wire    ap_CS_fsm_pp8_stage0;
wire    ap_block_state106_pp8_stage0_iter0;
wire    ap_block_state107_pp8_stage0_iter1;
wire    ap_block_state108_pp8_stage0_iter2;
wire    ap_block_state109_pp8_stage0_iter3;
wire    ap_block_state110_pp8_stage0_iter4;
wire    ap_block_state111_pp8_stage0_iter5;
wire    ap_block_state112_pp8_stage0_iter6;
wire    ap_block_state113_pp8_stage0_iter7;
wire    ap_block_state114_pp8_stage0_iter8;
wire    ap_block_state115_pp8_stage0_iter9;
wire    ap_block_state116_pp8_stage0_iter10;
wire    ap_block_state117_pp8_stage0_iter11;
wire    ap_block_state118_pp8_stage0_iter12;
wire    ap_block_pp8_stage0_11001;
reg   [0:0] icmp_ln122_reg_1650_pp8_iter1_reg;
reg   [0:0] icmp_ln122_reg_1650_pp8_iter2_reg;
reg   [0:0] icmp_ln122_reg_1650_pp8_iter3_reg;
reg   [0:0] icmp_ln122_reg_1650_pp8_iter4_reg;
reg   [0:0] icmp_ln122_reg_1650_pp8_iter5_reg;
reg   [0:0] icmp_ln122_reg_1650_pp8_iter6_reg;
reg   [0:0] icmp_ln122_reg_1650_pp8_iter7_reg;
reg   [0:0] icmp_ln122_reg_1650_pp8_iter8_reg;
reg   [0:0] icmp_ln122_reg_1650_pp8_iter9_reg;
reg   [0:0] icmp_ln122_reg_1650_pp8_iter10_reg;
reg   [0:0] icmp_ln122_reg_1650_pp8_iter11_reg;
wire   [10:0] add_ln122_fu_1259_p2;
reg    ap_enable_reg_pp8_iter0;
wire   [6:0] c_fu_1265_p2;
reg   [6:0] c_reg_1659;
wire   [0:0] icmp_ln123_fu_1271_p2;
reg   [0:0] icmp_ln123_reg_1664;
reg   [0:0] icmp_ln123_reg_1664_pp8_iter1_reg;
reg   [0:0] icmp_ln123_reg_1664_pp8_iter2_reg;
reg   [0:0] icmp_ln123_reg_1664_pp8_iter3_reg;
reg   [0:0] icmp_ln123_reg_1664_pp8_iter4_reg;
reg   [0:0] icmp_ln123_reg_1664_pp8_iter5_reg;
wire   [3:0] select_ln125_fu_1277_p3;
reg   [3:0] select_ln125_reg_1669;
reg   [3:0] select_ln125_reg_1669_pp8_iter1_reg;
reg   [3:0] select_ln125_reg_1669_pp8_iter2_reg;
reg   [3:0] select_ln125_reg_1669_pp8_iter3_reg;
reg   [3:0] select_ln125_reg_1669_pp8_iter4_reg;
wire   [0:0] icmp_ln125_1_fu_1285_p2;
reg   [0:0] icmp_ln125_1_reg_1676;
reg   [0:0] icmp_ln125_1_reg_1676_pp8_iter1_reg;
reg   [0:0] icmp_ln125_1_reg_1676_pp8_iter2_reg;
reg   [0:0] icmp_ln125_1_reg_1676_pp8_iter3_reg;
reg   [0:0] icmp_ln125_1_reg_1676_pp8_iter4_reg;
reg   [0:0] icmp_ln125_1_reg_1676_pp8_iter5_reg;
wire   [6:0] select_ln125_3_fu_1291_p3;
reg   [6:0] select_ln125_3_reg_1681;
wire   [3:0] n_fu_1299_p2;
wire   [0:0] icmp_ln125_fu_1305_p2;
reg   [0:0] icmp_ln125_reg_1693;
reg   [0:0] icmp_ln125_reg_1693_pp8_iter2_reg;
reg   [0:0] icmp_ln125_reg_1693_pp8_iter3_reg;
reg   [0:0] icmp_ln125_reg_1693_pp8_iter4_reg;
reg   [0:0] icmp_ln125_reg_1693_pp8_iter5_reg;
wire   [31:0] conv5_output_0_0_q0;
reg   [31:0] conv5_output_0_0_l_reg_1708;
wire   [31:0] fc6_weights_0_0_q0;
reg   [31:0] fc6_weights_0_0_lo_reg_1713;
reg    ap_enable_reg_pp8_iter2;
reg   [3:0] output_assign_addr_1_reg_1723;
reg   [3:0] output_assign_addr_1_reg_1723_pp8_iter6_reg;
reg   [3:0] output_assign_addr_1_reg_1723_pp8_iter7_reg;
reg   [3:0] output_assign_addr_1_reg_1723_pp8_iter8_reg;
reg   [3:0] output_assign_addr_1_reg_1723_pp8_iter9_reg;
reg   [3:0] output_assign_addr_1_reg_1723_pp8_iter10_reg;
reg   [3:0] output_assign_addr_1_reg_1723_pp8_iter11_reg;
wire   [31:0] acc_fu_1366_p3;
reg   [31:0] acc_reg_1729;
wire   [31:0] grp_fu_806_p2;
reg   [31:0] tmp_i_reg_1734;
wire   [31:0] grp_fu_802_p2;
reg   [31:0] tmp_7_i_reg_1739;
wire   [0:0] icmp_ln178_fu_1374_p2;
wire    ap_CS_fsm_pp9_stage0;
wire    ap_block_state120_pp9_stage0_iter0;
wire    ap_block_state121_pp9_stage0_iter1;
wire    ap_block_state122_pp9_stage0_iter2;
reg    ap_block_state122_io;
reg    ap_block_pp9_stage0_11001;
wire   [3:0] add_ln178_fu_1380_p2;
reg    ap_enable_reg_pp9_iter0;
wire   [31:0] output_assign_q0;
reg   [31:0] output_assign_load_reg_1758;
reg    ap_enable_reg_pp9_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter9;
wire    ap_CS_fsm_state26;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state27;
reg    ap_enable_reg_pp1_iter2;
wire    ap_CS_fsm_state37;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state38;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state48;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state49;
reg    ap_enable_reg_pp3_iter2;
wire    ap_CS_fsm_state59;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state60;
reg    ap_enable_reg_pp4_iter2;
wire    ap_CS_fsm_state70;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state71;
reg    ap_enable_reg_pp5_iter2;
wire    ap_CS_fsm_state81;
reg    ap_block_pp6_stage0_subdone;
reg    ap_condition_pp6_exit_iter0_state82;
reg    ap_enable_reg_pp6_iter2;
wire    ap_CS_fsm_state92;
reg    ap_block_pp7_stage0_subdone;
reg    ap_condition_pp7_exit_iter0_state93;
reg    ap_enable_reg_pp7_iter2;
wire    ap_CS_fsm_state105;
wire    grp_convolution5_fu_772_ap_ready;
wire    grp_convolution5_fu_772_ap_done;
wire    ap_block_pp8_stage0_subdone;
reg    ap_condition_pp8_exit_iter0_state106;
reg    ap_enable_reg_pp8_iter1;
reg    ap_enable_reg_pp8_iter3;
reg    ap_enable_reg_pp8_iter4;
reg    ap_enable_reg_pp8_iter5;
reg    ap_enable_reg_pp8_iter6;
reg    ap_enable_reg_pp8_iter7;
reg    ap_enable_reg_pp8_iter8;
reg    ap_enable_reg_pp8_iter9;
reg    ap_enable_reg_pp8_iter10;
reg    ap_enable_reg_pp8_iter11;
reg    ap_enable_reg_pp8_iter12;
reg    ap_block_pp9_stage0_subdone;
reg    ap_condition_pp9_exit_iter0_state120;
reg   [7:0] conv1_weights_0_address0;
reg    conv1_weights_0_ce0;
reg    conv1_weights_0_we0;
wire   [31:0] conv1_weights_0_q0;
reg    conv1_weights_0_ce1;
wire   [31:0] conv1_weights_0_q1;
reg   [2:0] conv1_bias_address0;
reg    conv1_bias_ce0;
reg    conv1_bias_we0;
wire   [31:0] conv1_bias_q0;
reg   [11:0] conv3_weights_address0;
reg    conv3_weights_ce0;
reg    conv3_weights_we0;
wire   [31:0] conv3_weights_q0;
reg    conv3_weights_ce1;
wire   [31:0] conv3_weights_q1;
reg   [3:0] conv3_bias_address0;
reg    conv3_bias_ce0;
reg    conv3_bias_we0;
wire   [31:0] conv3_bias_q0;
reg   [15:0] conv5_weights_address0;
reg    conv5_weights_ce0;
reg    conv5_weights_we0;
wire   [31:0] conv5_weights_q0;
reg   [6:0] conv5_bias_address0;
reg    conv5_bias_ce0;
reg    conv5_bias_we0;
wire   [31:0] conv5_bias_q0;
reg   [10:0] fc6_weights_0_0_address0;
reg    fc6_weights_0_0_ce0;
reg    fc6_weights_0_0_we0;
reg   [3:0] fc6_bias_address0;
reg    fc6_bias_ce0;
reg    fc6_bias_we0;
wire   [31:0] fc6_bias_q0;
reg   [3:0] output_assign_address0;
reg    output_assign_ce0;
reg    output_assign_ce1;
reg    output_assign_we1;
reg   [12:0] conv1_output_address0;
reg    conv1_output_ce0;
reg    conv1_output_we0;
wire   [31:0] conv1_output_q0;
reg   [10:0] pool2_output_address0;
reg    pool2_output_ce0;
reg    pool2_output_we0;
wire   [31:0] pool2_output_q0;
reg    pool2_output_ce1;
wire   [31:0] pool2_output_q1;
reg   [10:0] conv3_output_address0;
reg    conv3_output_ce0;
reg    conv3_output_we0;
wire   [31:0] conv3_output_q0;
reg   [8:0] pool4_output_address0;
reg    pool4_output_ce0;
reg    pool4_output_we0;
wire   [31:0] pool4_output_q0;
reg   [6:0] conv5_output_0_0_address0;
reg    conv5_output_0_0_ce0;
reg    conv5_output_0_0_we0;
wire    grp_convolution3_fu_764_ap_start;
wire    grp_convolution3_fu_764_ap_done;
wire    grp_convolution3_fu_764_ap_idle;
wire    grp_convolution3_fu_764_ap_ready;
wire   [10:0] grp_convolution3_fu_764_input_r_address0;
wire    grp_convolution3_fu_764_input_r_ce0;
wire   [10:0] grp_convolution3_fu_764_input_r_address1;
wire    grp_convolution3_fu_764_input_r_ce1;
wire   [11:0] grp_convolution3_fu_764_weights_address0;
wire    grp_convolution3_fu_764_weights_ce0;
wire   [11:0] grp_convolution3_fu_764_weights_address1;
wire    grp_convolution3_fu_764_weights_ce1;
wire   [3:0] grp_convolution3_fu_764_bias_address0;
wire    grp_convolution3_fu_764_bias_ce0;
wire   [10:0] grp_convolution3_fu_764_output_r_address0;
wire    grp_convolution3_fu_764_output_r_ce0;
wire    grp_convolution3_fu_764_output_r_we0;
wire   [31:0] grp_convolution3_fu_764_output_r_d0;
wire    grp_convolution5_fu_772_ap_start;
wire    grp_convolution5_fu_772_ap_idle;
wire   [8:0] grp_convolution5_fu_772_input_r_address0;
wire    grp_convolution5_fu_772_input_r_ce0;
wire   [15:0] grp_convolution5_fu_772_weights_address0;
wire    grp_convolution5_fu_772_weights_ce0;
wire   [6:0] grp_convolution5_fu_772_bias_address0;
wire    grp_convolution5_fu_772_bias_ce0;
wire   [6:0] grp_convolution5_fu_772_output_0_0_address0;
wire    grp_convolution5_fu_772_output_0_0_ce0;
wire    grp_convolution5_fu_772_output_0_0_we0;
wire   [31:0] grp_convolution5_fu_772_output_0_0_d0;
wire    grp_convolution1_fu_780_ap_start;
wire    grp_convolution1_fu_780_ap_done;
wire    grp_convolution1_fu_780_ap_idle;
wire    grp_convolution1_fu_780_ap_ready;
wire    grp_convolution1_fu_780_m_axi_input_r_AWVALID;
wire   [31:0] grp_convolution1_fu_780_m_axi_input_r_AWADDR;
wire   [0:0] grp_convolution1_fu_780_m_axi_input_r_AWID;
wire   [31:0] grp_convolution1_fu_780_m_axi_input_r_AWLEN;
wire   [2:0] grp_convolution1_fu_780_m_axi_input_r_AWSIZE;
wire   [1:0] grp_convolution1_fu_780_m_axi_input_r_AWBURST;
wire   [1:0] grp_convolution1_fu_780_m_axi_input_r_AWLOCK;
wire   [3:0] grp_convolution1_fu_780_m_axi_input_r_AWCACHE;
wire   [2:0] grp_convolution1_fu_780_m_axi_input_r_AWPROT;
wire   [3:0] grp_convolution1_fu_780_m_axi_input_r_AWQOS;
wire   [3:0] grp_convolution1_fu_780_m_axi_input_r_AWREGION;
wire   [0:0] grp_convolution1_fu_780_m_axi_input_r_AWUSER;
wire    grp_convolution1_fu_780_m_axi_input_r_WVALID;
wire   [31:0] grp_convolution1_fu_780_m_axi_input_r_WDATA;
wire   [3:0] grp_convolution1_fu_780_m_axi_input_r_WSTRB;
wire    grp_convolution1_fu_780_m_axi_input_r_WLAST;
wire   [0:0] grp_convolution1_fu_780_m_axi_input_r_WID;
wire   [0:0] grp_convolution1_fu_780_m_axi_input_r_WUSER;
wire    grp_convolution1_fu_780_m_axi_input_r_ARVALID;
wire   [31:0] grp_convolution1_fu_780_m_axi_input_r_ARADDR;
wire   [0:0] grp_convolution1_fu_780_m_axi_input_r_ARID;
wire   [31:0] grp_convolution1_fu_780_m_axi_input_r_ARLEN;
wire   [2:0] grp_convolution1_fu_780_m_axi_input_r_ARSIZE;
wire   [1:0] grp_convolution1_fu_780_m_axi_input_r_ARBURST;
wire   [1:0] grp_convolution1_fu_780_m_axi_input_r_ARLOCK;
wire   [3:0] grp_convolution1_fu_780_m_axi_input_r_ARCACHE;
wire   [2:0] grp_convolution1_fu_780_m_axi_input_r_ARPROT;
wire   [3:0] grp_convolution1_fu_780_m_axi_input_r_ARQOS;
wire   [3:0] grp_convolution1_fu_780_m_axi_input_r_ARREGION;
wire   [0:0] grp_convolution1_fu_780_m_axi_input_r_ARUSER;
wire    grp_convolution1_fu_780_m_axi_input_r_RREADY;
wire    grp_convolution1_fu_780_m_axi_input_r_BREADY;
wire   [7:0] grp_convolution1_fu_780_weights_0_address0;
wire    grp_convolution1_fu_780_weights_0_ce0;
wire   [7:0] grp_convolution1_fu_780_weights_0_address1;
wire    grp_convolution1_fu_780_weights_0_ce1;
wire   [2:0] grp_convolution1_fu_780_bias_address0;
wire    grp_convolution1_fu_780_bias_ce0;
wire   [12:0] grp_convolution1_fu_780_output_r_address0;
wire    grp_convolution1_fu_780_output_r_ce0;
wire    grp_convolution1_fu_780_output_r_we0;
wire   [31:0] grp_convolution1_fu_780_output_r_d0;
wire    grp_max_pooling2_fu_790_ap_start;
wire    grp_max_pooling2_fu_790_ap_done;
wire    grp_max_pooling2_fu_790_ap_idle;
wire    grp_max_pooling2_fu_790_ap_ready;
wire   [12:0] grp_max_pooling2_fu_790_input_r_address0;
wire    grp_max_pooling2_fu_790_input_r_ce0;
wire   [10:0] grp_max_pooling2_fu_790_output_r_address0;
wire    grp_max_pooling2_fu_790_output_r_ce0;
wire    grp_max_pooling2_fu_790_output_r_we0;
wire   [31:0] grp_max_pooling2_fu_790_output_r_d0;
wire    grp_max_pooling4_fu_796_ap_start;
wire    grp_max_pooling4_fu_796_ap_done;
wire    grp_max_pooling4_fu_796_ap_idle;
wire    grp_max_pooling4_fu_796_ap_ready;
wire   [10:0] grp_max_pooling4_fu_796_input_r_address0;
wire    grp_max_pooling4_fu_796_input_r_ce0;
wire   [8:0] grp_max_pooling4_fu_796_output_r_address0;
wire    grp_max_pooling4_fu_796_output_r_ce0;
wire    grp_max_pooling4_fu_796_output_r_we0;
wire   [31:0] grp_max_pooling4_fu_796_output_r_d0;
reg   [2:0] ap_phi_mux_phi_ln155_phi_fu_640_p4;
reg   [11:0] ap_phi_mux_phi_ln157_phi_fu_652_p4;
reg   [4:0] ap_phi_mux_phi_ln158_phi_fu_664_p4;
reg   [15:0] ap_phi_mux_phi_ln160_phi_fu_676_p4;
reg   [6:0] ap_phi_mux_phi_ln161_phi_fu_688_p4;
reg   [10:0] ap_phi_mux_phi_ln163_phi_fu_700_p4;
reg   [3:0] ap_phi_mux_phi_ln164_phi_fu_712_p4;
reg   [6:0] ap_phi_mux_c_0_i_phi_fu_735_p4;
wire    ap_block_pp8_stage0;
reg    grp_convolution3_fu_764_ap_start_reg;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state101;
reg    grp_convolution5_fu_772_ap_start_reg;
wire    ap_CS_fsm_state104;
reg    grp_convolution1_fu_780_ap_start_reg;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state97;
reg    grp_max_pooling2_fu_790_ap_start_reg;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state99;
reg    grp_max_pooling4_fu_796_ap_start_reg;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state103;
wire   [63:0] zext_ln154_5_fu_1025_p1;
wire   [63:0] zext_ln155_fu_1056_p1;
wire   [63:0] zext_ln157_1_fu_1088_p1;
wire   [63:0] zext_ln158_fu_1120_p1;
wire   [63:0] zext_ln160_1_fu_1152_p1;
wire   [63:0] zext_ln161_fu_1184_p1;
wire   [63:0] zext_ln163_1_fu_1216_p1;
wire   [63:0] zext_ln164_fu_1248_p1;
wire   [63:0] zext_ln125_1_fu_1310_p1;
wire  signed [63:0] sext_ln126_fu_1351_p1;
wire   [63:0] zext_ln125_fu_1356_p1;
wire   [63:0] zext_ln178_fu_1386_p1;
wire   [63:0] empty_15_fu_840_p1;
wire   [63:0] empty_fu_850_p1;
wire   [63:0] zext_ln155_1_fu_1034_p1;
wire   [63:0] zext_ln157_fu_1066_p1;
wire   [63:0] zext_ln158_1_fu_1098_p1;
wire   [63:0] zext_ln160_fu_1130_p1;
wire   [63:0] zext_ln161_1_fu_1162_p1;
wire   [63:0] zext_ln163_fu_1194_p1;
wire   [63:0] zext_ln164_1_fu_1226_p1;
wire    ap_block_pp9_stage0_01001;
wire   [7:0] add_ln154_1_fu_874_p2;
wire   [0:0] icmp_ln154_2_fu_880_p2;
wire   [4:0] trunc_ln154_fu_910_p1;
wire   [0:0] icmp_ln154_1_fu_914_p2;
wire   [4:0] add_ln154_3_fu_920_p2;
wire   [4:0] mul_ln154_fu_938_p1;
wire   [11:0] mul_ln154_fu_938_p2;
wire   [3:0] grp_fu_954_p1;
wire   [4:0] tmp_12_fu_963_p3;
wire   [10:0] zext_ln154_fu_960_p1;
wire   [10:0] zext_ln154_1_fu_970_p1;
wire  signed [4:0] sext_ln154_fu_980_p1;
wire   [10:0] add_ln154_2_fu_974_p2;
wire   [10:0] zext_ln154_3_fu_983_p1;
wire   [10:0] add_ln154_4_fu_987_p2;
wire   [6:0] trunc_ln154_2_fu_997_p1;
wire   [8:0] trunc_ln154_1_fu_993_p1;
wire   [8:0] p_shl_cast_fu_1001_p3;
wire   [4:0] grp_fu_954_p2;
wire   [8:0] add_ln154_5_fu_1009_p2;
wire   [8:0] zext_ln154_4_fu_1015_p1;
wire   [10:0] tmp_s_fu_1317_p3;
wire   [6:0] tmp_5_fu_1328_p3;
wire   [11:0] zext_ln126_1_fu_1324_p1;
wire   [11:0] zext_ln126_2_fu_1335_p1;
wire   [11:0] sub_ln126_fu_1339_p2;
wire   [11:0] zext_ln126_fu_1314_p1;
wire   [11:0] add_ln126_fu_1345_p2;
wire   [0:0] select_ln125_1_fu_1361_p3;
reg    grp_fu_954_ce;
reg   [89:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    ap_idle_pp6;
wire    ap_enable_pp6;
reg    ap_idle_pp7;
wire    ap_enable_pp7;
reg    ap_idle_pp8;
wire    ap_enable_pp8;
reg    ap_idle_pp9;
wire    ap_enable_pp9;
wire   [11:0] mul_ln154_fu_938_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 90'd1;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp6_iter1 = 1'b0;
#0 ap_enable_reg_pp7_iter1 = 1'b0;
#0 ap_enable_reg_pp9_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp6_iter0 = 1'b0;
#0 ap_enable_reg_pp7_iter0 = 1'b0;
#0 ap_enable_reg_pp8_iter0 = 1'b0;
#0 ap_enable_reg_pp8_iter2 = 1'b0;
#0 ap_enable_reg_pp9_iter0 = 1'b0;
#0 ap_enable_reg_pp9_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp6_iter2 = 1'b0;
#0 ap_enable_reg_pp7_iter2 = 1'b0;
#0 ap_enable_reg_pp8_iter1 = 1'b0;
#0 ap_enable_reg_pp8_iter3 = 1'b0;
#0 ap_enable_reg_pp8_iter4 = 1'b0;
#0 ap_enable_reg_pp8_iter5 = 1'b0;
#0 ap_enable_reg_pp8_iter6 = 1'b0;
#0 ap_enable_reg_pp8_iter7 = 1'b0;
#0 ap_enable_reg_pp8_iter8 = 1'b0;
#0 ap_enable_reg_pp8_iter9 = 1'b0;
#0 ap_enable_reg_pp8_iter10 = 1'b0;
#0 ap_enable_reg_pp8_iter11 = 1'b0;
#0 ap_enable_reg_pp8_iter12 = 1'b0;
#0 grp_convolution3_fu_764_ap_start_reg = 1'b0;
#0 grp_convolution5_fu_772_ap_start_reg = 1'b0;
#0 grp_convolution1_fu_780_ap_start_reg = 1'b0;
#0 grp_max_pooling2_fu_790_ap_start_reg = 1'b0;
#0 grp_max_pooling4_fu_796_ap_start_reg = 1'b0;
end

lenet_cnn_CTL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTL_DATA_WIDTH ))
lenet_cnn_CTL_s_axi_U(
    .AWVALID(s_axi_CTL_AWVALID),
    .AWREADY(s_axi_CTL_AWREADY),
    .AWADDR(s_axi_CTL_AWADDR),
    .WVALID(s_axi_CTL_WVALID),
    .WREADY(s_axi_CTL_WREADY),
    .WDATA(s_axi_CTL_WDATA),
    .WSTRB(s_axi_CTL_WSTRB),
    .ARVALID(s_axi_CTL_ARVALID),
    .ARREADY(s_axi_CTL_ARREADY),
    .ARADDR(s_axi_CTL_ARADDR),
    .RVALID(s_axi_CTL_RVALID),
    .RREADY(s_axi_CTL_RREADY),
    .RDATA(s_axi_CTL_RDATA),
    .RRESP(s_axi_CTL_RRESP),
    .BVALID(s_axi_CTL_BVALID),
    .BREADY(s_axi_CTL_BREADY),
    .BRESP(s_axi_CTL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .image_r(image_r),
    .parameters(parameters),
    .fc6_output(fc6_output)
);

lenet_cnn_DATA_IMAGE_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_IMAGE_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_IMAGE_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_IMAGE_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_IMAGE_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_IMAGE_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_IMAGE_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_IMAGE_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_IMAGE_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_IMAGE_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_IMAGE_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_IMAGE_CACHE_VALUE ))
lenet_cnn_DATA_IMAGE_m_axi_U(
    .AWVALID(m_axi_DATA_IMAGE_AWVALID),
    .AWREADY(m_axi_DATA_IMAGE_AWREADY),
    .AWADDR(m_axi_DATA_IMAGE_AWADDR),
    .AWID(m_axi_DATA_IMAGE_AWID),
    .AWLEN(m_axi_DATA_IMAGE_AWLEN),
    .AWSIZE(m_axi_DATA_IMAGE_AWSIZE),
    .AWBURST(m_axi_DATA_IMAGE_AWBURST),
    .AWLOCK(m_axi_DATA_IMAGE_AWLOCK),
    .AWCACHE(m_axi_DATA_IMAGE_AWCACHE),
    .AWPROT(m_axi_DATA_IMAGE_AWPROT),
    .AWQOS(m_axi_DATA_IMAGE_AWQOS),
    .AWREGION(m_axi_DATA_IMAGE_AWREGION),
    .AWUSER(m_axi_DATA_IMAGE_AWUSER),
    .WVALID(m_axi_DATA_IMAGE_WVALID),
    .WREADY(m_axi_DATA_IMAGE_WREADY),
    .WDATA(m_axi_DATA_IMAGE_WDATA),
    .WSTRB(m_axi_DATA_IMAGE_WSTRB),
    .WLAST(m_axi_DATA_IMAGE_WLAST),
    .WID(m_axi_DATA_IMAGE_WID),
    .WUSER(m_axi_DATA_IMAGE_WUSER),
    .ARVALID(m_axi_DATA_IMAGE_ARVALID),
    .ARREADY(m_axi_DATA_IMAGE_ARREADY),
    .ARADDR(m_axi_DATA_IMAGE_ARADDR),
    .ARID(m_axi_DATA_IMAGE_ARID),
    .ARLEN(m_axi_DATA_IMAGE_ARLEN),
    .ARSIZE(m_axi_DATA_IMAGE_ARSIZE),
    .ARBURST(m_axi_DATA_IMAGE_ARBURST),
    .ARLOCK(m_axi_DATA_IMAGE_ARLOCK),
    .ARCACHE(m_axi_DATA_IMAGE_ARCACHE),
    .ARPROT(m_axi_DATA_IMAGE_ARPROT),
    .ARQOS(m_axi_DATA_IMAGE_ARQOS),
    .ARREGION(m_axi_DATA_IMAGE_ARREGION),
    .ARUSER(m_axi_DATA_IMAGE_ARUSER),
    .RVALID(m_axi_DATA_IMAGE_RVALID),
    .RREADY(m_axi_DATA_IMAGE_RREADY),
    .RDATA(m_axi_DATA_IMAGE_RDATA),
    .RLAST(m_axi_DATA_IMAGE_RLAST),
    .RID(m_axi_DATA_IMAGE_RID),
    .RUSER(m_axi_DATA_IMAGE_RUSER),
    .RRESP(m_axi_DATA_IMAGE_RRESP),
    .BVALID(m_axi_DATA_IMAGE_BVALID),
    .BREADY(m_axi_DATA_IMAGE_BREADY),
    .BRESP(m_axi_DATA_IMAGE_BRESP),
    .BID(m_axi_DATA_IMAGE_BID),
    .BUSER(m_axi_DATA_IMAGE_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_IMAGE_ARVALID),
    .I_ARREADY(DATA_IMAGE_ARREADY),
    .I_ARADDR(grp_convolution1_fu_780_m_axi_input_r_ARADDR),
    .I_ARID(grp_convolution1_fu_780_m_axi_input_r_ARID),
    .I_ARLEN(grp_convolution1_fu_780_m_axi_input_r_ARLEN),
    .I_ARSIZE(grp_convolution1_fu_780_m_axi_input_r_ARSIZE),
    .I_ARLOCK(grp_convolution1_fu_780_m_axi_input_r_ARLOCK),
    .I_ARCACHE(grp_convolution1_fu_780_m_axi_input_r_ARCACHE),
    .I_ARQOS(grp_convolution1_fu_780_m_axi_input_r_ARQOS),
    .I_ARPROT(grp_convolution1_fu_780_m_axi_input_r_ARPROT),
    .I_ARUSER(grp_convolution1_fu_780_m_axi_input_r_ARUSER),
    .I_ARBURST(grp_convolution1_fu_780_m_axi_input_r_ARBURST),
    .I_ARREGION(grp_convolution1_fu_780_m_axi_input_r_ARREGION),
    .I_RVALID(DATA_IMAGE_RVALID),
    .I_RREADY(DATA_IMAGE_RREADY),
    .I_RDATA(DATA_IMAGE_RDATA),
    .I_RID(DATA_IMAGE_RID),
    .I_RUSER(DATA_IMAGE_RUSER),
    .I_RRESP(DATA_IMAGE_RRESP),
    .I_RLAST(DATA_IMAGE_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_IMAGE_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_IMAGE_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_IMAGE_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_IMAGE_BRESP),
    .I_BID(DATA_IMAGE_BID),
    .I_BUSER(DATA_IMAGE_BUSER)
);

lenet_cnn_DATA_PARAMETERS_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_PARAMETERS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_PARAMETERS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_PARAMETERS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_PARAMETERS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_PARAMETERS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_PARAMETERS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_PARAMETERS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_PARAMETERS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_PARAMETERS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_PARAMETERS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_PARAMETERS_CACHE_VALUE ))
lenet_cnn_DATA_PARAMETERS_m_axi_U(
    .AWVALID(m_axi_DATA_PARAMETERS_AWVALID),
    .AWREADY(m_axi_DATA_PARAMETERS_AWREADY),
    .AWADDR(m_axi_DATA_PARAMETERS_AWADDR),
    .AWID(m_axi_DATA_PARAMETERS_AWID),
    .AWLEN(m_axi_DATA_PARAMETERS_AWLEN),
    .AWSIZE(m_axi_DATA_PARAMETERS_AWSIZE),
    .AWBURST(m_axi_DATA_PARAMETERS_AWBURST),
    .AWLOCK(m_axi_DATA_PARAMETERS_AWLOCK),
    .AWCACHE(m_axi_DATA_PARAMETERS_AWCACHE),
    .AWPROT(m_axi_DATA_PARAMETERS_AWPROT),
    .AWQOS(m_axi_DATA_PARAMETERS_AWQOS),
    .AWREGION(m_axi_DATA_PARAMETERS_AWREGION),
    .AWUSER(m_axi_DATA_PARAMETERS_AWUSER),
    .WVALID(m_axi_DATA_PARAMETERS_WVALID),
    .WREADY(m_axi_DATA_PARAMETERS_WREADY),
    .WDATA(m_axi_DATA_PARAMETERS_WDATA),
    .WSTRB(m_axi_DATA_PARAMETERS_WSTRB),
    .WLAST(m_axi_DATA_PARAMETERS_WLAST),
    .WID(m_axi_DATA_PARAMETERS_WID),
    .WUSER(m_axi_DATA_PARAMETERS_WUSER),
    .ARVALID(m_axi_DATA_PARAMETERS_ARVALID),
    .ARREADY(m_axi_DATA_PARAMETERS_ARREADY),
    .ARADDR(m_axi_DATA_PARAMETERS_ARADDR),
    .ARID(m_axi_DATA_PARAMETERS_ARID),
    .ARLEN(m_axi_DATA_PARAMETERS_ARLEN),
    .ARSIZE(m_axi_DATA_PARAMETERS_ARSIZE),
    .ARBURST(m_axi_DATA_PARAMETERS_ARBURST),
    .ARLOCK(m_axi_DATA_PARAMETERS_ARLOCK),
    .ARCACHE(m_axi_DATA_PARAMETERS_ARCACHE),
    .ARPROT(m_axi_DATA_PARAMETERS_ARPROT),
    .ARQOS(m_axi_DATA_PARAMETERS_ARQOS),
    .ARREGION(m_axi_DATA_PARAMETERS_ARREGION),
    .ARUSER(m_axi_DATA_PARAMETERS_ARUSER),
    .RVALID(m_axi_DATA_PARAMETERS_RVALID),
    .RREADY(m_axi_DATA_PARAMETERS_RREADY),
    .RDATA(m_axi_DATA_PARAMETERS_RDATA),
    .RLAST(m_axi_DATA_PARAMETERS_RLAST),
    .RID(m_axi_DATA_PARAMETERS_RID),
    .RUSER(m_axi_DATA_PARAMETERS_RUSER),
    .RRESP(m_axi_DATA_PARAMETERS_RRESP),
    .BVALID(m_axi_DATA_PARAMETERS_BVALID),
    .BREADY(m_axi_DATA_PARAMETERS_BREADY),
    .BRESP(m_axi_DATA_PARAMETERS_BRESP),
    .BID(m_axi_DATA_PARAMETERS_BID),
    .BUSER(m_axi_DATA_PARAMETERS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(DATA_PARAMETERS_ARVALID),
    .I_ARREADY(DATA_PARAMETERS_ARREADY),
    .I_ARADDR(DATA_PARAMETERS_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(DATA_PARAMETERS_ARLEN),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_PARAMETERS_RVALID),
    .I_RREADY(DATA_PARAMETERS_RREADY),
    .I_RDATA(DATA_PARAMETERS_RDATA),
    .I_RID(DATA_PARAMETERS_RID),
    .I_RUSER(DATA_PARAMETERS_RUSER),
    .I_RRESP(DATA_PARAMETERS_RRESP),
    .I_RLAST(DATA_PARAMETERS_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(DATA_PARAMETERS_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWID(1'd0),
    .I_AWLEN(32'd0),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(1'b0),
    .I_WREADY(DATA_PARAMETERS_WREADY),
    .I_WDATA(32'd0),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd0),
    .I_BVALID(DATA_PARAMETERS_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(DATA_PARAMETERS_BRESP),
    .I_BID(DATA_PARAMETERS_BID),
    .I_BUSER(DATA_PARAMETERS_BUSER)
);

lenet_cnn_DATA_FC6_OUTPUT_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA_FC6_OUTPUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA_FC6_OUTPUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA_FC6_OUTPUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA_FC6_OUTPUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA_FC6_OUTPUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA_FC6_OUTPUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA_FC6_OUTPUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA_FC6_OUTPUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA_FC6_OUTPUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA_FC6_OUTPUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA_FC6_OUTPUT_CACHE_VALUE ))
lenet_cnn_DATA_FC6_OUTPUT_m_axi_U(
    .AWVALID(m_axi_DATA_FC6_OUTPUT_AWVALID),
    .AWREADY(m_axi_DATA_FC6_OUTPUT_AWREADY),
    .AWADDR(m_axi_DATA_FC6_OUTPUT_AWADDR),
    .AWID(m_axi_DATA_FC6_OUTPUT_AWID),
    .AWLEN(m_axi_DATA_FC6_OUTPUT_AWLEN),
    .AWSIZE(m_axi_DATA_FC6_OUTPUT_AWSIZE),
    .AWBURST(m_axi_DATA_FC6_OUTPUT_AWBURST),
    .AWLOCK(m_axi_DATA_FC6_OUTPUT_AWLOCK),
    .AWCACHE(m_axi_DATA_FC6_OUTPUT_AWCACHE),
    .AWPROT(m_axi_DATA_FC6_OUTPUT_AWPROT),
    .AWQOS(m_axi_DATA_FC6_OUTPUT_AWQOS),
    .AWREGION(m_axi_DATA_FC6_OUTPUT_AWREGION),
    .AWUSER(m_axi_DATA_FC6_OUTPUT_AWUSER),
    .WVALID(m_axi_DATA_FC6_OUTPUT_WVALID),
    .WREADY(m_axi_DATA_FC6_OUTPUT_WREADY),
    .WDATA(m_axi_DATA_FC6_OUTPUT_WDATA),
    .WSTRB(m_axi_DATA_FC6_OUTPUT_WSTRB),
    .WLAST(m_axi_DATA_FC6_OUTPUT_WLAST),
    .WID(m_axi_DATA_FC6_OUTPUT_WID),
    .WUSER(m_axi_DATA_FC6_OUTPUT_WUSER),
    .ARVALID(m_axi_DATA_FC6_OUTPUT_ARVALID),
    .ARREADY(m_axi_DATA_FC6_OUTPUT_ARREADY),
    .ARADDR(m_axi_DATA_FC6_OUTPUT_ARADDR),
    .ARID(m_axi_DATA_FC6_OUTPUT_ARID),
    .ARLEN(m_axi_DATA_FC6_OUTPUT_ARLEN),
    .ARSIZE(m_axi_DATA_FC6_OUTPUT_ARSIZE),
    .ARBURST(m_axi_DATA_FC6_OUTPUT_ARBURST),
    .ARLOCK(m_axi_DATA_FC6_OUTPUT_ARLOCK),
    .ARCACHE(m_axi_DATA_FC6_OUTPUT_ARCACHE),
    .ARPROT(m_axi_DATA_FC6_OUTPUT_ARPROT),
    .ARQOS(m_axi_DATA_FC6_OUTPUT_ARQOS),
    .ARREGION(m_axi_DATA_FC6_OUTPUT_ARREGION),
    .ARUSER(m_axi_DATA_FC6_OUTPUT_ARUSER),
    .RVALID(m_axi_DATA_FC6_OUTPUT_RVALID),
    .RREADY(m_axi_DATA_FC6_OUTPUT_RREADY),
    .RDATA(m_axi_DATA_FC6_OUTPUT_RDATA),
    .RLAST(m_axi_DATA_FC6_OUTPUT_RLAST),
    .RID(m_axi_DATA_FC6_OUTPUT_RID),
    .RUSER(m_axi_DATA_FC6_OUTPUT_RUSER),
    .RRESP(m_axi_DATA_FC6_OUTPUT_RRESP),
    .BVALID(m_axi_DATA_FC6_OUTPUT_BVALID),
    .BREADY(m_axi_DATA_FC6_OUTPUT_BREADY),
    .BRESP(m_axi_DATA_FC6_OUTPUT_BRESP),
    .BID(m_axi_DATA_FC6_OUTPUT_BID),
    .BUSER(m_axi_DATA_FC6_OUTPUT_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(DATA_FC6_OUTPUT_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(DATA_FC6_OUTPUT_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(DATA_FC6_OUTPUT_RDATA),
    .I_RID(DATA_FC6_OUTPUT_RID),
    .I_RUSER(DATA_FC6_OUTPUT_RUSER),
    .I_RRESP(DATA_FC6_OUTPUT_RRESP),
    .I_RLAST(DATA_FC6_OUTPUT_RLAST),
    .I_AWVALID(DATA_FC6_OUTPUT_AWVALID),
    .I_AWREADY(DATA_FC6_OUTPUT_AWREADY),
    .I_AWADDR(DATA_FC6_OUTPUT_addr_reg_1413),
    .I_AWID(1'd0),
    .I_AWLEN(32'd10),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(DATA_FC6_OUTPUT_WVALID),
    .I_WREADY(DATA_FC6_OUTPUT_WREADY),
    .I_WDATA(output_assign_load_reg_1758),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(4'd15),
    .I_BVALID(DATA_FC6_OUTPUT_BVALID),
    .I_BREADY(DATA_FC6_OUTPUT_BREADY),
    .I_BRESP(DATA_FC6_OUTPUT_BRESP),
    .I_BID(DATA_FC6_OUTPUT_BID),
    .I_BUSER(DATA_FC6_OUTPUT_BUSER)
);

lenet_cnn_conv1_wfYi #(
    .DataWidth( 32 ),
    .AddressRange( 150 ),
    .AddressWidth( 8 ))
conv1_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv1_weights_0_address0),
    .ce0(conv1_weights_0_ce0),
    .we0(conv1_weights_0_we0),
    .d0(DATA_PARAMETERS_addr_9_reg_1465),
    .q0(conv1_weights_0_q0),
    .address1(grp_convolution1_fu_780_weights_0_address1),
    .ce1(conv1_weights_0_ce1),
    .q1(conv1_weights_0_q1)
);

lenet_cnn_conv1_bg8j #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv1_bias_address0),
    .ce0(conv1_bias_ce0),
    .we0(conv1_bias_we0),
    .d0(DATA_PARAMETERS_addr_11_reg_1495),
    .q0(conv1_bias_q0)
);

lenet_cnn_conv3_whbi #(
    .DataWidth( 32 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
conv3_weights_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv3_weights_address0),
    .ce0(conv3_weights_ce0),
    .we0(conv3_weights_we0),
    .d0(DATA_PARAMETERS_addr_13_reg_1520),
    .q0(conv3_weights_q0),
    .address1(grp_convolution3_fu_764_weights_address1),
    .ce1(conv3_weights_ce1),
    .q1(conv3_weights_q1)
);

lenet_cnn_conv3_bibs #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv3_bias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv3_bias_address0),
    .ce0(conv3_bias_ce0),
    .we0(conv3_bias_we0),
    .d0(DATA_PARAMETERS_addr_15_reg_1545),
    .q0(conv3_bias_q0)
);

lenet_cnn_conv5_wjbC #(
    .DataWidth( 32 ),
    .AddressRange( 48000 ),
    .AddressWidth( 16 ))
conv5_weights_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv5_weights_address0),
    .ce0(conv5_weights_ce0),
    .we0(conv5_weights_we0),
    .d0(DATA_PARAMETERS_addr_17_reg_1570),
    .q0(conv5_weights_q0)
);

lenet_cnn_conv5_bkbM #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
conv5_bias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv5_bias_address0),
    .ce0(conv5_bias_ce0),
    .we0(conv5_bias_we0),
    .d0(DATA_PARAMETERS_addr_19_reg_1595),
    .q0(conv5_bias_q0)
);

lenet_cnn_fc6_weilbW #(
    .DataWidth( 32 ),
    .AddressRange( 1200 ),
    .AddressWidth( 11 ))
fc6_weights_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc6_weights_0_0_address0),
    .ce0(fc6_weights_0_0_ce0),
    .we0(fc6_weights_0_0_we0),
    .d0(DATA_PARAMETERS_addr_21_reg_1620),
    .q0(fc6_weights_0_0_q0)
);

lenet_cnn_fc6_bias #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
fc6_bias_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(fc6_bias_address0),
    .ce0(fc6_bias_ce0),
    .we0(fc6_bias_we0),
    .d0(DATA_PARAMETERS_addr_23_reg_1645),
    .q0(fc6_bias_q0)
);

lenet_cnn_output_mb6 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
output_assign_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_assign_address0),
    .ce0(output_assign_ce0),
    .q0(output_assign_q0),
    .address1(output_assign_addr_1_reg_1723_pp8_iter11_reg),
    .ce1(output_assign_ce1),
    .we1(output_assign_we1),
    .d1(tmp_7_i_reg_1739)
);

lenet_cnn_conv1_oncg #(
    .DataWidth( 32 ),
    .AddressRange( 4704 ),
    .AddressWidth( 13 ))
conv1_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv1_output_address0),
    .ce0(conv1_output_ce0),
    .we0(conv1_output_we0),
    .d0(grp_convolution1_fu_780_output_r_d0),
    .q0(conv1_output_q0)
);

lenet_cnn_pool2_oocq #(
    .DataWidth( 32 ),
    .AddressRange( 1176 ),
    .AddressWidth( 11 ))
pool2_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(pool2_output_address0),
    .ce0(pool2_output_ce0),
    .we0(pool2_output_we0),
    .d0(grp_max_pooling2_fu_790_output_r_d0),
    .q0(pool2_output_q0),
    .address1(grp_convolution3_fu_764_input_r_address1),
    .ce1(pool2_output_ce1),
    .q1(pool2_output_q1)
);

lenet_cnn_conv3_opcA #(
    .DataWidth( 32 ),
    .AddressRange( 1600 ),
    .AddressWidth( 11 ))
conv3_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv3_output_address0),
    .ce0(conv3_output_ce0),
    .we0(conv3_output_we0),
    .d0(grp_convolution3_fu_764_output_r_d0),
    .q0(conv3_output_q0)
);

lenet_cnn_pool4_oqcK #(
    .DataWidth( 32 ),
    .AddressRange( 400 ),
    .AddressWidth( 9 ))
pool4_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(pool4_output_address0),
    .ce0(pool4_output_ce0),
    .we0(pool4_output_we0),
    .d0(grp_max_pooling4_fu_796_output_r_d0),
    .q0(pool4_output_q0)
);

lenet_cnn_conv5_bkbM #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
conv5_output_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(conv5_output_0_0_address0),
    .ce0(conv5_output_0_0_ce0),
    .we0(conv5_output_0_0_we0),
    .d0(grp_convolution5_fu_772_output_0_0_d0),
    .q0(conv5_output_0_0_q0)
);

convolution3 grp_convolution3_fu_764(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution3_fu_764_ap_start),
    .ap_done(grp_convolution3_fu_764_ap_done),
    .ap_idle(grp_convolution3_fu_764_ap_idle),
    .ap_ready(grp_convolution3_fu_764_ap_ready),
    .input_r_address0(grp_convolution3_fu_764_input_r_address0),
    .input_r_ce0(grp_convolution3_fu_764_input_r_ce0),
    .input_r_q0(pool2_output_q0),
    .input_r_address1(grp_convolution3_fu_764_input_r_address1),
    .input_r_ce1(grp_convolution3_fu_764_input_r_ce1),
    .input_r_q1(pool2_output_q1),
    .weights_address0(grp_convolution3_fu_764_weights_address0),
    .weights_ce0(grp_convolution3_fu_764_weights_ce0),
    .weights_q0(conv3_weights_q0),
    .weights_address1(grp_convolution3_fu_764_weights_address1),
    .weights_ce1(grp_convolution3_fu_764_weights_ce1),
    .weights_q1(conv3_weights_q1),
    .bias_address0(grp_convolution3_fu_764_bias_address0),
    .bias_ce0(grp_convolution3_fu_764_bias_ce0),
    .bias_q0(conv3_bias_q0),
    .output_r_address0(grp_convolution3_fu_764_output_r_address0),
    .output_r_ce0(grp_convolution3_fu_764_output_r_ce0),
    .output_r_we0(grp_convolution3_fu_764_output_r_we0),
    .output_r_d0(grp_convolution3_fu_764_output_r_d0)
);

convolution5 grp_convolution5_fu_772(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution5_fu_772_ap_start),
    .ap_done(grp_convolution5_fu_772_ap_done),
    .ap_idle(grp_convolution5_fu_772_ap_idle),
    .ap_ready(grp_convolution5_fu_772_ap_ready),
    .input_r_address0(grp_convolution5_fu_772_input_r_address0),
    .input_r_ce0(grp_convolution5_fu_772_input_r_ce0),
    .input_r_q0(pool4_output_q0),
    .weights_address0(grp_convolution5_fu_772_weights_address0),
    .weights_ce0(grp_convolution5_fu_772_weights_ce0),
    .weights_q0(conv5_weights_q0),
    .bias_address0(grp_convolution5_fu_772_bias_address0),
    .bias_ce0(grp_convolution5_fu_772_bias_ce0),
    .bias_q0(conv5_bias_q0),
    .output_0_0_address0(grp_convolution5_fu_772_output_0_0_address0),
    .output_0_0_ce0(grp_convolution5_fu_772_output_0_0_ce0),
    .output_0_0_we0(grp_convolution5_fu_772_output_0_0_we0),
    .output_0_0_d0(grp_convolution5_fu_772_output_0_0_d0)
);

convolution1 grp_convolution1_fu_780(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution1_fu_780_ap_start),
    .ap_done(grp_convolution1_fu_780_ap_done),
    .ap_idle(grp_convolution1_fu_780_ap_idle),
    .ap_ready(grp_convolution1_fu_780_ap_ready),
    .m_axi_input_r_AWVALID(grp_convolution1_fu_780_m_axi_input_r_AWVALID),
    .m_axi_input_r_AWREADY(1'b0),
    .m_axi_input_r_AWADDR(grp_convolution1_fu_780_m_axi_input_r_AWADDR),
    .m_axi_input_r_AWID(grp_convolution1_fu_780_m_axi_input_r_AWID),
    .m_axi_input_r_AWLEN(grp_convolution1_fu_780_m_axi_input_r_AWLEN),
    .m_axi_input_r_AWSIZE(grp_convolution1_fu_780_m_axi_input_r_AWSIZE),
    .m_axi_input_r_AWBURST(grp_convolution1_fu_780_m_axi_input_r_AWBURST),
    .m_axi_input_r_AWLOCK(grp_convolution1_fu_780_m_axi_input_r_AWLOCK),
    .m_axi_input_r_AWCACHE(grp_convolution1_fu_780_m_axi_input_r_AWCACHE),
    .m_axi_input_r_AWPROT(grp_convolution1_fu_780_m_axi_input_r_AWPROT),
    .m_axi_input_r_AWQOS(grp_convolution1_fu_780_m_axi_input_r_AWQOS),
    .m_axi_input_r_AWREGION(grp_convolution1_fu_780_m_axi_input_r_AWREGION),
    .m_axi_input_r_AWUSER(grp_convolution1_fu_780_m_axi_input_r_AWUSER),
    .m_axi_input_r_WVALID(grp_convolution1_fu_780_m_axi_input_r_WVALID),
    .m_axi_input_r_WREADY(1'b0),
    .m_axi_input_r_WDATA(grp_convolution1_fu_780_m_axi_input_r_WDATA),
    .m_axi_input_r_WSTRB(grp_convolution1_fu_780_m_axi_input_r_WSTRB),
    .m_axi_input_r_WLAST(grp_convolution1_fu_780_m_axi_input_r_WLAST),
    .m_axi_input_r_WID(grp_convolution1_fu_780_m_axi_input_r_WID),
    .m_axi_input_r_WUSER(grp_convolution1_fu_780_m_axi_input_r_WUSER),
    .m_axi_input_r_ARVALID(grp_convolution1_fu_780_m_axi_input_r_ARVALID),
    .m_axi_input_r_ARREADY(DATA_IMAGE_ARREADY),
    .m_axi_input_r_ARADDR(grp_convolution1_fu_780_m_axi_input_r_ARADDR),
    .m_axi_input_r_ARID(grp_convolution1_fu_780_m_axi_input_r_ARID),
    .m_axi_input_r_ARLEN(grp_convolution1_fu_780_m_axi_input_r_ARLEN),
    .m_axi_input_r_ARSIZE(grp_convolution1_fu_780_m_axi_input_r_ARSIZE),
    .m_axi_input_r_ARBURST(grp_convolution1_fu_780_m_axi_input_r_ARBURST),
    .m_axi_input_r_ARLOCK(grp_convolution1_fu_780_m_axi_input_r_ARLOCK),
    .m_axi_input_r_ARCACHE(grp_convolution1_fu_780_m_axi_input_r_ARCACHE),
    .m_axi_input_r_ARPROT(grp_convolution1_fu_780_m_axi_input_r_ARPROT),
    .m_axi_input_r_ARQOS(grp_convolution1_fu_780_m_axi_input_r_ARQOS),
    .m_axi_input_r_ARREGION(grp_convolution1_fu_780_m_axi_input_r_ARREGION),
    .m_axi_input_r_ARUSER(grp_convolution1_fu_780_m_axi_input_r_ARUSER),
    .m_axi_input_r_RVALID(DATA_IMAGE_RVALID),
    .m_axi_input_r_RREADY(grp_convolution1_fu_780_m_axi_input_r_RREADY),
    .m_axi_input_r_RDATA(DATA_IMAGE_RDATA),
    .m_axi_input_r_RLAST(DATA_IMAGE_RLAST),
    .m_axi_input_r_RID(DATA_IMAGE_RID),
    .m_axi_input_r_RUSER(DATA_IMAGE_RUSER),
    .m_axi_input_r_RRESP(DATA_IMAGE_RRESP),
    .m_axi_input_r_BVALID(1'b0),
    .m_axi_input_r_BREADY(grp_convolution1_fu_780_m_axi_input_r_BREADY),
    .m_axi_input_r_BRESP(2'd0),
    .m_axi_input_r_BID(1'd0),
    .m_axi_input_r_BUSER(1'd0),
    .input_offset(image1_reg_1402),
    .weights_0_address0(grp_convolution1_fu_780_weights_0_address0),
    .weights_0_ce0(grp_convolution1_fu_780_weights_0_ce0),
    .weights_0_q0(conv1_weights_0_q0),
    .weights_0_address1(grp_convolution1_fu_780_weights_0_address1),
    .weights_0_ce1(grp_convolution1_fu_780_weights_0_ce1),
    .weights_0_q1(conv1_weights_0_q1),
    .bias_address0(grp_convolution1_fu_780_bias_address0),
    .bias_ce0(grp_convolution1_fu_780_bias_ce0),
    .bias_q0(conv1_bias_q0),
    .output_r_address0(grp_convolution1_fu_780_output_r_address0),
    .output_r_ce0(grp_convolution1_fu_780_output_r_ce0),
    .output_r_we0(grp_convolution1_fu_780_output_r_we0),
    .output_r_d0(grp_convolution1_fu_780_output_r_d0)
);

max_pooling2 grp_max_pooling2_fu_790(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_max_pooling2_fu_790_ap_start),
    .ap_done(grp_max_pooling2_fu_790_ap_done),
    .ap_idle(grp_max_pooling2_fu_790_ap_idle),
    .ap_ready(grp_max_pooling2_fu_790_ap_ready),
    .input_r_address0(grp_max_pooling2_fu_790_input_r_address0),
    .input_r_ce0(grp_max_pooling2_fu_790_input_r_ce0),
    .input_r_q0(conv1_output_q0),
    .output_r_address0(grp_max_pooling2_fu_790_output_r_address0),
    .output_r_ce0(grp_max_pooling2_fu_790_output_r_ce0),
    .output_r_we0(grp_max_pooling2_fu_790_output_r_we0),
    .output_r_d0(grp_max_pooling2_fu_790_output_r_d0)
);

max_pooling4 grp_max_pooling4_fu_796(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_max_pooling4_fu_796_ap_start),
    .ap_done(grp_max_pooling4_fu_796_ap_done),
    .ap_idle(grp_max_pooling4_fu_796_ap_idle),
    .ap_ready(grp_max_pooling4_fu_796_ap_ready),
    .input_r_address0(grp_max_pooling4_fu_796_input_r_address0),
    .input_r_ce0(grp_max_pooling4_fu_796_input_r_ce0),
    .input_r_q0(conv3_output_q0),
    .output_r_address0(grp_max_pooling4_fu_796_output_r_address0),
    .output_r_ce0(grp_max_pooling4_fu_796_output_r_ce0),
    .output_r_we0(grp_max_pooling4_fu_796_output_r_we0),
    .output_r_d0(grp_max_pooling4_fu_796_output_r_d0)
);

lenet_cnn_fadd_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_cnn_fadd_32bkb_U36(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(acc_reg_1729),
    .din1(tmp_i_reg_1734),
    .ce(1'b1),
    .dout(grp_fu_802_p2)
);

lenet_cnn_fmul_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
lenet_cnn_fmul_32cud_U37(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(fc6_weights_0_0_lo_reg_1713),
    .din1(conv5_output_0_0_l_reg_1708),
    .ce(1'b1),
    .dout(grp_fu_806_p2)
);

lenet_cnn_urem_5nsc4 #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 5 ))
lenet_cnn_urem_5nsc4_U38(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(select_ln154_fu_926_p3),
    .din1(grp_fu_954_p1),
    .ce(grp_fu_954_ce),
    .dout(grp_fu_954_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state27) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state27)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state27);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state38) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state38)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state38);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state37)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b1 == ap_condition_pp3_exit_iter0_state49) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state48)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state49)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state49);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state48)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b1 == ap_condition_pp4_exit_iter0_state60) & (1'b0 == ap_block_pp4_stage0_subdone))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state59)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state60)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state60);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if ((1'b1 == ap_CS_fsm_state59)) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state71) & (1'b0 == ap_block_pp5_stage0_subdone))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state70)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state71)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state71);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if ((1'b1 == ap_CS_fsm_state70)) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp6_stage0) & (1'b1 == ap_condition_pp6_exit_iter0_state82) & (1'b0 == ap_block_pp6_stage0_subdone))) begin
            ap_enable_reg_pp6_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state81)) begin
            ap_enable_reg_pp6_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp6_exit_iter0_state82)) begin
                ap_enable_reg_pp6_iter1 <= (1'b1 ^ ap_condition_pp6_exit_iter0_state82);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp6_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp6_stage0_subdone)) begin
            ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
        end else if ((1'b1 == ap_CS_fsm_state81)) begin
            ap_enable_reg_pp6_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp7_stage0) & (1'b1 == ap_condition_pp7_exit_iter0_state93) & (1'b0 == ap_block_pp7_stage0_subdone))) begin
            ap_enable_reg_pp7_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state92)) begin
            ap_enable_reg_pp7_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp7_exit_iter0_state93)) begin
                ap_enable_reg_pp7_iter1 <= (1'b1 ^ ap_condition_pp7_exit_iter0_state93);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp7_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp7_stage0_subdone)) begin
            ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
        end else if ((1'b1 == ap_CS_fsm_state92)) begin
            ap_enable_reg_pp7_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp8_exit_iter0_state106) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_subdone))) begin
            ap_enable_reg_pp8_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state105) & (grp_convolution5_fu_772_ap_done == 1'b1))) begin
            ap_enable_reg_pp8_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp8_exit_iter0_state106)) begin
                ap_enable_reg_pp8_iter1 <= (1'b1 ^ ap_condition_pp8_exit_iter0_state106);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter10 <= ap_enable_reg_pp8_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter11 <= ap_enable_reg_pp8_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter12 <= ap_enable_reg_pp8_iter11;
        end else if (((1'b1 == ap_CS_fsm_state105) & (grp_convolution5_fu_772_ap_done == 1'b1))) begin
            ap_enable_reg_pp8_iter12 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter3 <= ap_enable_reg_pp8_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter4 <= ap_enable_reg_pp8_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter5 <= ap_enable_reg_pp8_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter6 <= ap_enable_reg_pp8_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter7 <= ap_enable_reg_pp8_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter8 <= ap_enable_reg_pp8_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp8_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp8_stage0_subdone)) begin
            ap_enable_reg_pp8_iter9 <= ap_enable_reg_pp8_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp9_exit_iter0_state120) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_subdone))) begin
            ap_enable_reg_pp9_iter0 <= 1'b0;
        end else if (((1'b1 == DATA_FC6_OUTPUT_AWREADY) & (1'b1 == ap_CS_fsm_state119))) begin
            ap_enable_reg_pp9_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp9_exit_iter0_state120)) begin
                ap_enable_reg_pp9_iter1 <= (1'b1 ^ ap_condition_pp9_exit_iter0_state120);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp9_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp9_stage0_subdone)) begin
            ap_enable_reg_pp9_iter2 <= ap_enable_reg_pp9_iter1;
        end else if (((1'b1 == DATA_FC6_OUTPUT_AWREADY) & (1'b1 == ap_CS_fsm_state119))) begin
            ap_enable_reg_pp9_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_convolution1_fu_780_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state96)) begin
            grp_convolution1_fu_780_ap_start_reg <= 1'b1;
        end else if ((grp_convolution1_fu_780_ap_ready == 1'b1)) begin
            grp_convolution1_fu_780_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_convolution3_fu_764_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state100)) begin
            grp_convolution3_fu_764_ap_start_reg <= 1'b1;
        end else if ((grp_convolution3_fu_764_ap_ready == 1'b1)) begin
            grp_convolution3_fu_764_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_convolution5_fu_772_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state104)) begin
            grp_convolution5_fu_772_ap_start_reg <= 1'b1;
        end else if ((grp_convolution5_fu_772_ap_ready == 1'b1)) begin
            grp_convolution5_fu_772_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_max_pooling2_fu_790_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state98)) begin
            grp_max_pooling2_fu_790_ap_start_reg <= 1'b1;
        end else if ((grp_max_pooling2_fu_790_ap_ready == 1'b1)) begin
            grp_max_pooling2_fu_790_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_max_pooling4_fu_796_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state102)) begin
            grp_max_pooling4_fu_796_ap_start_reg <= 1'b1;
        end else if ((grp_max_pooling4_fu_796_ap_ready == 1'b1)) begin
            grp_max_pooling4_fu_796_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_reg_1650 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        c_0_i_reg_731 <= select_ln125_3_reg_1681;
    end else if (((1'b1 == ap_CS_fsm_state105) & (grp_convolution5_fu_772_ap_done == 1'b1))) begin
        c_0_i_reg_731 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_fu_1253_p2 == 1'd0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        indvar_flatten_reg_720 <= add_ln122_fu_1259_p2;
    end else if (((1'b1 == ap_CS_fsm_state105) & (grp_convolution5_fu_772_ap_done == 1'b1))) begin
        indvar_flatten_reg_720 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_fu_1253_p2 == 1'd0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        n_0_i_reg_742 <= n_fu_1299_p2;
    end else if (((1'b1 == ap_CS_fsm_state105) & (grp_convolution5_fu_772_ap_done == 1'b1))) begin
        n_0_i_reg_742 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln154_fu_862_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_ln154_reg_603 <= add_ln154_fu_868_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_ln154_reg_603 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln155_reg_1486 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        phi_ln155_reg_636 <= add_ln155_reg_1490;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        phi_ln155_reg_636 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln157_reg_1511 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        phi_ln157_reg_648 <= add_ln157_reg_1515;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        phi_ln157_reg_648 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln158_reg_1536 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        phi_ln158_reg_660 <= add_ln158_reg_1540;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        phi_ln158_reg_660 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln160_reg_1561 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        phi_ln160_reg_672 <= add_ln160_reg_1565;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        phi_ln160_reg_672 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln161_reg_1586 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        phi_ln161_reg_684 <= add_ln161_reg_1590;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        phi_ln161_reg_684 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (icmp_ln163_reg_1611 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        phi_ln163_reg_696 <= add_ln163_reg_1615;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        phi_ln163_reg_696 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (icmp_ln164_reg_1636 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        phi_ln164_reg_708 <= add_ln164_reg_1640;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        phi_ln164_reg_708 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == DATA_FC6_OUTPUT_AWREADY) & (1'b1 == ap_CS_fsm_state119))) begin
        phi_ln178_reg_753 <= 4'd0;
    end else if (((icmp_ln178_fu_1374_p2 == 1'd0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        phi_ln178_reg_753 <= add_ln178_fu_1380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln154_fu_862_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_mul_reg_614 <= add_ln154_7_fu_894_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul_reg_614 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln154_fu_862_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_urem_reg_625 <= select_ln154_1_fu_886_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_urem_reg_625 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        DATA_FC6_OUTPUT_addr_reg_1413[29 : 0] <= empty_fu_850_p1[29 : 0];
        p_cast_reg_1419[29 : 0] <= p_cast_fu_859_p1[29 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln155_reg_1486 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        DATA_PARAMETERS_addr_11_reg_1495 <= DATA_PARAMETERS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln157_reg_1511 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        DATA_PARAMETERS_addr_13_reg_1520 <= DATA_PARAMETERS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln158_reg_1536 == 1'd0) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        DATA_PARAMETERS_addr_15_reg_1545 <= DATA_PARAMETERS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln160_reg_1561 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        DATA_PARAMETERS_addr_17_reg_1570 <= DATA_PARAMETERS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln161_reg_1586 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        DATA_PARAMETERS_addr_19_reg_1595 <= DATA_PARAMETERS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (icmp_ln163_reg_1611 == 1'd0) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        DATA_PARAMETERS_addr_21_reg_1620 <= DATA_PARAMETERS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (icmp_ln164_reg_1636 == 1'd0) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        DATA_PARAMETERS_addr_23_reg_1645 <= DATA_PARAMETERS_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln154_reg_1430_pp0_iter7_reg == 1'd0))) begin
        DATA_PARAMETERS_addr_9_reg_1465 <= DATA_PARAMETERS_RDATA;
        add_ln154_6_reg_1470 <= add_ln154_6_fu_1019_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_reg_1650_pp8_iter5_reg == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        acc_reg_1729 <= acc_fu_1366_p3;
        tmp_i_reg_1734 <= grp_fu_806_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        add_ln155_1_reg_1475 <= add_ln155_1_fu_1029_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        add_ln155_reg_1490 <= add_ln155_fu_1050_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        add_ln157_1_reg_1500 <= add_ln157_1_fu_1061_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        add_ln157_reg_1515 <= add_ln157_fu_1082_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        add_ln158_1_reg_1525 <= add_ln158_1_fu_1093_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        add_ln158_reg_1540 <= add_ln158_fu_1114_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        add_ln160_1_reg_1550 <= add_ln160_1_fu_1125_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        add_ln160_reg_1565 <= add_ln160_fu_1146_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        add_ln161_1_reg_1575 <= add_ln161_1_fu_1157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1))) begin
        add_ln161_reg_1590 <= add_ln161_fu_1178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        add_ln163_1_reg_1600 <= add_ln163_1_fu_1189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0) & (ap_enable_reg_pp6_iter0 == 1'b1))) begin
        add_ln163_reg_1615 <= add_ln163_fu_1210_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        add_ln164_1_reg_1625 <= add_ln164_1_fu_1221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0) & (ap_enable_reg_pp7_iter0 == 1'b1))) begin
        add_ln164_reg_1640 <= add_ln164_fu_1242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_fu_1253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        c_reg_1659 <= c_fu_1265_p2;
        icmp_ln123_reg_1664 <= icmp_ln123_fu_1271_p2;
        icmp_ln125_1_reg_1676 <= icmp_ln125_1_fu_1285_p2;
        select_ln125_reg_1669 <= select_ln125_fu_1277_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_reg_1650_pp8_iter1_reg == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        conv5_output_0_0_l_reg_1708 <= conv5_output_0_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        fc6_output5_reg_1391 <= {{fc6_output[31:2]}};
        image1_reg_1402 <= {{image_r[31:2]}};
        parameters3_reg_1396 <= {{parameters[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_reg_1650_pp8_iter1_reg == 1'd0) & (ap_enable_reg_pp8_iter2 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        fc6_weights_0_0_lo_reg_1713 <= fc6_weights_0_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        icmp_ln122_reg_1650 <= icmp_ln122_fu_1253_p2;
        icmp_ln122_reg_1650_pp8_iter1_reg <= icmp_ln122_reg_1650;
        icmp_ln123_reg_1664_pp8_iter1_reg <= icmp_ln123_reg_1664;
        icmp_ln125_1_reg_1676_pp8_iter1_reg <= icmp_ln125_1_reg_1676;
        select_ln125_reg_1669_pp8_iter1_reg <= select_ln125_reg_1669;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp8_stage0_11001)) begin
        icmp_ln122_reg_1650_pp8_iter10_reg <= icmp_ln122_reg_1650_pp8_iter9_reg;
        icmp_ln122_reg_1650_pp8_iter11_reg <= icmp_ln122_reg_1650_pp8_iter10_reg;
        icmp_ln122_reg_1650_pp8_iter2_reg <= icmp_ln122_reg_1650_pp8_iter1_reg;
        icmp_ln122_reg_1650_pp8_iter3_reg <= icmp_ln122_reg_1650_pp8_iter2_reg;
        icmp_ln122_reg_1650_pp8_iter4_reg <= icmp_ln122_reg_1650_pp8_iter3_reg;
        icmp_ln122_reg_1650_pp8_iter5_reg <= icmp_ln122_reg_1650_pp8_iter4_reg;
        icmp_ln122_reg_1650_pp8_iter6_reg <= icmp_ln122_reg_1650_pp8_iter5_reg;
        icmp_ln122_reg_1650_pp8_iter7_reg <= icmp_ln122_reg_1650_pp8_iter6_reg;
        icmp_ln122_reg_1650_pp8_iter8_reg <= icmp_ln122_reg_1650_pp8_iter7_reg;
        icmp_ln122_reg_1650_pp8_iter9_reg <= icmp_ln122_reg_1650_pp8_iter8_reg;
        icmp_ln123_reg_1664_pp8_iter2_reg <= icmp_ln123_reg_1664_pp8_iter1_reg;
        icmp_ln123_reg_1664_pp8_iter3_reg <= icmp_ln123_reg_1664_pp8_iter2_reg;
        icmp_ln123_reg_1664_pp8_iter4_reg <= icmp_ln123_reg_1664_pp8_iter3_reg;
        icmp_ln123_reg_1664_pp8_iter5_reg <= icmp_ln123_reg_1664_pp8_iter4_reg;
        icmp_ln125_1_reg_1676_pp8_iter2_reg <= icmp_ln125_1_reg_1676_pp8_iter1_reg;
        icmp_ln125_1_reg_1676_pp8_iter3_reg <= icmp_ln125_1_reg_1676_pp8_iter2_reg;
        icmp_ln125_1_reg_1676_pp8_iter4_reg <= icmp_ln125_1_reg_1676_pp8_iter3_reg;
        icmp_ln125_1_reg_1676_pp8_iter5_reg <= icmp_ln125_1_reg_1676_pp8_iter4_reg;
        icmp_ln125_reg_1693_pp8_iter2_reg <= icmp_ln125_reg_1693;
        icmp_ln125_reg_1693_pp8_iter3_reg <= icmp_ln125_reg_1693_pp8_iter2_reg;
        icmp_ln125_reg_1693_pp8_iter4_reg <= icmp_ln125_reg_1693_pp8_iter3_reg;
        icmp_ln125_reg_1693_pp8_iter5_reg <= icmp_ln125_reg_1693_pp8_iter4_reg;
        output_assign_addr_1_reg_1723_pp8_iter10_reg <= output_assign_addr_1_reg_1723_pp8_iter9_reg;
        output_assign_addr_1_reg_1723_pp8_iter11_reg <= output_assign_addr_1_reg_1723_pp8_iter10_reg;
        output_assign_addr_1_reg_1723_pp8_iter6_reg <= output_assign_addr_1_reg_1723;
        output_assign_addr_1_reg_1723_pp8_iter7_reg <= output_assign_addr_1_reg_1723_pp8_iter6_reg;
        output_assign_addr_1_reg_1723_pp8_iter8_reg <= output_assign_addr_1_reg_1723_pp8_iter7_reg;
        output_assign_addr_1_reg_1723_pp8_iter9_reg <= output_assign_addr_1_reg_1723_pp8_iter8_reg;
        select_ln125_reg_1669_pp8_iter2_reg <= select_ln125_reg_1669_pp8_iter1_reg;
        select_ln125_reg_1669_pp8_iter3_reg <= select_ln125_reg_1669_pp8_iter2_reg;
        select_ln125_reg_1669_pp8_iter4_reg <= select_ln125_reg_1669_pp8_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_reg_1650 == 1'd0) & (1'b1 == ap_CS_fsm_pp8_stage0) & (icmp_ln123_reg_1664 == 1'd1) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        icmp_ln125_reg_1693 <= icmp_ln125_fu_1305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln154_reg_1430 <= icmp_ln154_fu_862_p2;
        icmp_ln154_reg_1430_pp0_iter1_reg <= icmp_ln154_reg_1430;
        tmp_13_reg_1460_pp0_iter1_reg <= tmp_13_reg_1460;
        tmp_reg_1449_pp0_iter1_reg <= tmp_reg_1449;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln154_reg_1430_pp0_iter2_reg <= icmp_ln154_reg_1430_pp0_iter1_reg;
        icmp_ln154_reg_1430_pp0_iter3_reg <= icmp_ln154_reg_1430_pp0_iter2_reg;
        icmp_ln154_reg_1430_pp0_iter4_reg <= icmp_ln154_reg_1430_pp0_iter3_reg;
        icmp_ln154_reg_1430_pp0_iter5_reg <= icmp_ln154_reg_1430_pp0_iter4_reg;
        icmp_ln154_reg_1430_pp0_iter6_reg <= icmp_ln154_reg_1430_pp0_iter5_reg;
        icmp_ln154_reg_1430_pp0_iter7_reg <= icmp_ln154_reg_1430_pp0_iter6_reg;
        icmp_ln154_reg_1430_pp0_iter8_reg <= icmp_ln154_reg_1430_pp0_iter7_reg;
        tmp_13_reg_1460_pp0_iter2_reg <= tmp_13_reg_1460_pp0_iter1_reg;
        tmp_13_reg_1460_pp0_iter3_reg <= tmp_13_reg_1460_pp0_iter2_reg;
        tmp_13_reg_1460_pp0_iter4_reg <= tmp_13_reg_1460_pp0_iter3_reg;
        tmp_13_reg_1460_pp0_iter5_reg <= tmp_13_reg_1460_pp0_iter4_reg;
        tmp_13_reg_1460_pp0_iter6_reg <= tmp_13_reg_1460_pp0_iter5_reg;
        tmp_13_reg_1460_pp0_iter7_reg <= tmp_13_reg_1460_pp0_iter6_reg;
        tmp_reg_1449_pp0_iter2_reg <= tmp_reg_1449_pp0_iter1_reg;
        tmp_reg_1449_pp0_iter3_reg <= tmp_reg_1449_pp0_iter2_reg;
        tmp_reg_1449_pp0_iter4_reg <= tmp_reg_1449_pp0_iter3_reg;
        tmp_reg_1449_pp0_iter5_reg <= tmp_reg_1449_pp0_iter4_reg;
        tmp_reg_1449_pp0_iter6_reg <= tmp_reg_1449_pp0_iter5_reg;
        tmp_reg_1449_pp0_iter7_reg <= tmp_reg_1449_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln155_reg_1486 <= icmp_ln155_fu_1044_p2;
        icmp_ln155_reg_1486_pp1_iter1_reg <= icmp_ln155_reg_1486;
        phi_ln155_reg_636_pp1_iter1_reg <= phi_ln155_reg_636;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln157_reg_1511 <= icmp_ln157_fu_1076_p2;
        icmp_ln157_reg_1511_pp2_iter1_reg <= icmp_ln157_reg_1511;
        phi_ln157_reg_648_pp2_iter1_reg <= phi_ln157_reg_648;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln158_reg_1536 <= icmp_ln158_fu_1108_p2;
        icmp_ln158_reg_1536_pp3_iter1_reg <= icmp_ln158_reg_1536;
        phi_ln158_reg_660_pp3_iter1_reg <= phi_ln158_reg_660;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln160_reg_1561 <= icmp_ln160_fu_1140_p2;
        icmp_ln160_reg_1561_pp4_iter1_reg <= icmp_ln160_reg_1561;
        phi_ln160_reg_672_pp4_iter1_reg <= phi_ln160_reg_672;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln161_reg_1586 <= icmp_ln161_fu_1172_p2;
        icmp_ln161_reg_1586_pp5_iter1_reg <= icmp_ln161_reg_1586;
        phi_ln161_reg_684_pp5_iter1_reg <= phi_ln161_reg_684;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        icmp_ln163_reg_1611 <= icmp_ln163_fu_1204_p2;
        icmp_ln163_reg_1611_pp6_iter1_reg <= icmp_ln163_reg_1611;
        phi_ln163_reg_696_pp6_iter1_reg <= phi_ln163_reg_696;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        icmp_ln164_reg_1636 <= icmp_ln164_fu_1236_p2;
        icmp_ln164_reg_1636_pp7_iter1_reg <= icmp_ln164_reg_1636;
        phi_ln164_reg_708_pp7_iter1_reg <= phi_ln164_reg_708;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        icmp_ln178_reg_1744 <= icmp_ln178_fu_1374_p2;
        icmp_ln178_reg_1744_pp9_iter1_reg <= icmp_ln178_reg_1744;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_reg_1650_pp8_iter4_reg == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        output_assign_addr_1_reg_1723 <= zext_ln125_fu_1356_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln178_reg_1744 == 1'd0) & (ap_enable_reg_pp9_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        output_assign_load_reg_1758 <= output_assign_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_fu_1253_p2 == 1'd0) & (ap_enable_reg_pp8_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        select_ln125_3_reg_1681 <= select_ln125_3_fu_1291_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln154_fu_862_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_13_reg_1460 <= {{mul_ln154_fu_938_p2[11:8]}};
        tmp_reg_1449 <= {{phi_mul_reg_614[15:13]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_reg_1650_pp8_iter10_reg == 1'd0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        tmp_7_i_reg_1739 <= grp_fu_802_p2;
    end
end

always @ (*) begin
    if (((1'b1 == DATA_FC6_OUTPUT_AWREADY) & (1'b1 == ap_CS_fsm_state119))) begin
        DATA_FC6_OUTPUT_AWVALID = 1'b1;
    end else begin
        DATA_FC6_OUTPUT_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == DATA_FC6_OUTPUT_BVALID) & (1'b1 == ap_CS_fsm_state127))) begin
        DATA_FC6_OUTPUT_BREADY = 1'b1;
    end else begin
        DATA_FC6_OUTPUT_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln178_reg_1744_pp9_iter1_reg == 1'd0) & (ap_enable_reg_pp9_iter2 == 1'b1) & (1'b0 == ap_block_pp9_stage0_11001))) begin
        DATA_FC6_OUTPUT_WVALID = 1'b1;
    end else begin
        DATA_FC6_OUTPUT_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state119)) begin
        DATA_FC6_OUTPUT_blk_n_AW = m_axi_DATA_FC6_OUTPUT_AWREADY;
    end else begin
        DATA_FC6_OUTPUT_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state127)) begin
        DATA_FC6_OUTPUT_blk_n_B = m_axi_DATA_FC6_OUTPUT_BVALID;
    end else begin
        DATA_FC6_OUTPUT_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp9_stage0) & (icmp_ln178_reg_1744_pp9_iter1_reg == 1'd0) & (ap_enable_reg_pp9_iter2 == 1'b1))) begin
        DATA_FC6_OUTPUT_blk_n_W = m_axi_DATA_FC6_OUTPUT_WREADY;
    end else begin
        DATA_FC6_OUTPUT_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96))) begin
        DATA_IMAGE_ARVALID = grp_convolution1_fu_780_m_axi_input_r_ARVALID;
    end else begin
        DATA_IMAGE_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96))) begin
        DATA_IMAGE_RREADY = grp_convolution1_fu_780_m_axi_input_r_RREADY;
    end else begin
        DATA_IMAGE_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == DATA_PARAMETERS_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state86)) begin
            DATA_PARAMETERS_ARADDR = zext_ln164_1_fu_1226_p1;
        end else if ((1'b1 == ap_CS_fsm_state75)) begin
            DATA_PARAMETERS_ARADDR = zext_ln163_fu_1194_p1;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            DATA_PARAMETERS_ARADDR = zext_ln161_1_fu_1162_p1;
        end else if ((1'b1 == ap_CS_fsm_state53)) begin
            DATA_PARAMETERS_ARADDR = zext_ln160_fu_1130_p1;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            DATA_PARAMETERS_ARADDR = zext_ln158_1_fu_1098_p1;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            DATA_PARAMETERS_ARADDR = zext_ln157_fu_1066_p1;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            DATA_PARAMETERS_ARADDR = zext_ln155_1_fu_1034_p1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            DATA_PARAMETERS_ARADDR = empty_15_fu_840_p1;
        end else begin
            DATA_PARAMETERS_ARADDR = 'bx;
        end
    end else begin
        DATA_PARAMETERS_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == DATA_PARAMETERS_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state86)) begin
            DATA_PARAMETERS_ARLEN = 32'd10;
        end else if ((1'b1 == ap_CS_fsm_state75)) begin
            DATA_PARAMETERS_ARLEN = 32'd1200;
        end else if ((1'b1 == ap_CS_fsm_state64)) begin
            DATA_PARAMETERS_ARLEN = 32'd120;
        end else if ((1'b1 == ap_CS_fsm_state53)) begin
            DATA_PARAMETERS_ARLEN = 32'd48000;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            DATA_PARAMETERS_ARLEN = 32'd16;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            DATA_PARAMETERS_ARLEN = 32'd2400;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            DATA_PARAMETERS_ARLEN = 32'd6;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            DATA_PARAMETERS_ARLEN = 32'd150;
        end else begin
            DATA_PARAMETERS_ARLEN = 'bx;
        end
    end else begin
        DATA_PARAMETERS_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state86)) | ((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state75)) | ((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state64)) | ((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state53)) | ((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state42)) | ((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state31)) | ((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state20)) | ((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state2)))) begin
        DATA_PARAMETERS_ARVALID = 1'b1;
    end else begin
        DATA_PARAMETERS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp7_stage0_11001) & (icmp_ln164_reg_1636 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((1'b0 == ap_block_pp6_stage0_11001) & (icmp_ln163_reg_1611 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln161_reg_1586 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln160_reg_1561 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln158_reg_1536 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln157_reg_1511 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln155_reg_1486 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln154_reg_1430_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
        DATA_PARAMETERS_RREADY = 1'b1;
    end else begin
        DATA_PARAMETERS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state2))) begin
        DATA_PARAMETERS_blk_n_AR = m_axi_DATA_PARAMETERS_ARREADY;
    end else begin
        DATA_PARAMETERS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp7_stage0) & (icmp_ln164_reg_1636 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0)) | ((1'b0 == ap_block_pp6_stage0) & (icmp_ln163_reg_1611 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0)) | ((1'b0 == ap_block_pp5_stage0) & (icmp_ln161_reg_1586 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp4_stage0) & (icmp_ln160_reg_1561 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0) & (icmp_ln158_reg_1536 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)) | ((1'b0 == ap_block_pp2_stage0) & (icmp_ln157_reg_1511 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln155_reg_1486 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln154_reg_1430_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
        DATA_PARAMETERS_blk_n_R = m_axi_DATA_PARAMETERS_RVALID;
    end else begin
        DATA_PARAMETERS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((icmp_ln154_fu_862_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln155_fu_1044_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state27 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state27 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln157_fu_1076_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state38 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state38 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln158_fu_1108_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state49 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state49 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln160_fu_1140_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state60 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state60 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln161_fu_1172_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state71 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state71 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln163_fu_1204_p2 == 1'd1)) begin
        ap_condition_pp6_exit_iter0_state82 = 1'b1;
    end else begin
        ap_condition_pp6_exit_iter0_state82 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln164_fu_1236_p2 == 1'd1)) begin
        ap_condition_pp7_exit_iter0_state93 = 1'b1;
    end else begin
        ap_condition_pp7_exit_iter0_state93 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln122_fu_1253_p2 == 1'd1)) begin
        ap_condition_pp8_exit_iter0_state106 = 1'b1;
    end else begin
        ap_condition_pp8_exit_iter0_state106 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln178_fu_1374_p2 == 1'd1)) begin
        ap_condition_pp9_exit_iter0_state120 = 1'b1;
    end else begin
        ap_condition_pp9_exit_iter0_state120 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == DATA_FC6_OUTPUT_BVALID) & (1'b1 == ap_CS_fsm_state127))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b0))) begin
        ap_idle_pp6 = 1'b1;
    end else begin
        ap_idle_pp6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b0))) begin
        ap_idle_pp7 = 1'b1;
    end else begin
        ap_idle_pp7 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter12 == 1'b0) & (ap_enable_reg_pp8_iter11 == 1'b0) & (ap_enable_reg_pp8_iter10 == 1'b0) & (ap_enable_reg_pp8_iter9 == 1'b0) & (ap_enable_reg_pp8_iter8 == 1'b0) & (ap_enable_reg_pp8_iter7 == 1'b0) & (ap_enable_reg_pp8_iter6 == 1'b0) & (ap_enable_reg_pp8_iter5 == 1'b0) & (ap_enable_reg_pp8_iter4 == 1'b0) & (ap_enable_reg_pp8_iter3 == 1'b0) & (ap_enable_reg_pp8_iter1 == 1'b0) & (ap_enable_reg_pp8_iter2 == 1'b0) & (ap_enable_reg_pp8_iter0 == 1'b0))) begin
        ap_idle_pp8 = 1'b1;
    end else begin
        ap_idle_pp8 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp9_iter2 == 1'b0) & (ap_enable_reg_pp9_iter1 == 1'b0) & (ap_enable_reg_pp9_iter0 == 1'b0))) begin
        ap_idle_pp9 = 1'b1;
    end else begin
        ap_idle_pp9 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln122_reg_1650 == 1'd0) & (ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0))) begin
        ap_phi_mux_c_0_i_phi_fu_735_p4 = select_ln125_3_reg_1681;
    end else begin
        ap_phi_mux_c_0_i_phi_fu_735_p4 = c_0_i_reg_731;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln155_reg_1486 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_phi_ln155_phi_fu_640_p4 = add_ln155_reg_1490;
    end else begin
        ap_phi_mux_phi_ln155_phi_fu_640_p4 = phi_ln155_reg_636;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (icmp_ln157_reg_1511 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        ap_phi_mux_phi_ln157_phi_fu_652_p4 = add_ln157_reg_1515;
    end else begin
        ap_phi_mux_phi_ln157_phi_fu_652_p4 = phi_ln157_reg_648;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (icmp_ln158_reg_1536 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        ap_phi_mux_phi_ln158_phi_fu_664_p4 = add_ln158_reg_1540;
    end else begin
        ap_phi_mux_phi_ln158_phi_fu_664_p4 = phi_ln158_reg_660;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (icmp_ln160_reg_1561 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        ap_phi_mux_phi_ln160_phi_fu_676_p4 = add_ln160_reg_1565;
    end else begin
        ap_phi_mux_phi_ln160_phi_fu_676_p4 = phi_ln160_reg_672;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (icmp_ln161_reg_1586 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        ap_phi_mux_phi_ln161_phi_fu_688_p4 = add_ln161_reg_1590;
    end else begin
        ap_phi_mux_phi_ln161_phi_fu_688_p4 = phi_ln161_reg_684;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0) & (icmp_ln163_reg_1611 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp6_stage0))) begin
        ap_phi_mux_phi_ln163_phi_fu_700_p4 = add_ln163_reg_1615;
    end else begin
        ap_phi_mux_phi_ln163_phi_fu_700_p4 = phi_ln163_reg_696;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0) & (icmp_ln164_reg_1636 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp7_stage0))) begin
        ap_phi_mux_phi_ln164_phi_fu_712_p4 = add_ln164_reg_1640;
    end else begin
        ap_phi_mux_phi_ln164_phi_fu_712_p4 = phi_ln164_reg_708;
    end
end

always @ (*) begin
    if (((1'b1 == DATA_FC6_OUTPUT_BVALID) & (1'b1 == ap_CS_fsm_state127))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        conv1_bias_address0 = zext_ln155_fu_1056_p1;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        conv1_bias_address0 = grp_convolution1_fu_780_bias_address0;
    end else begin
        conv1_bias_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        conv1_bias_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        conv1_bias_ce0 = grp_convolution1_fu_780_bias_ce0;
    end else begin
        conv1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln155_reg_1486_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        conv1_bias_we0 = 1'b1;
    end else begin
        conv1_bias_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        conv1_output_address0 = grp_max_pooling2_fu_790_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        conv1_output_address0 = grp_convolution1_fu_780_output_r_address0;
    end else begin
        conv1_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        conv1_output_ce0 = grp_max_pooling2_fu_790_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        conv1_output_ce0 = grp_convolution1_fu_780_output_r_ce0;
    end else begin
        conv1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        conv1_output_we0 = grp_convolution1_fu_780_output_r_we0;
    end else begin
        conv1_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        conv1_weights_0_address0 = zext_ln154_5_fu_1025_p1;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        conv1_weights_0_address0 = grp_convolution1_fu_780_weights_0_address0;
    end else begin
        conv1_weights_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        conv1_weights_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        conv1_weights_0_ce0 = grp_convolution1_fu_780_weights_0_ce0;
    end else begin
        conv1_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        conv1_weights_0_ce1 = grp_convolution1_fu_780_weights_0_ce1;
    end else begin
        conv1_weights_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln154_reg_1430_pp0_iter8_reg == 1'd0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        conv1_weights_0_we0 = 1'b1;
    end else begin
        conv1_weights_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        conv3_bias_address0 = zext_ln158_fu_1120_p1;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        conv3_bias_address0 = grp_convolution3_fu_764_bias_address0;
    end else begin
        conv3_bias_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        conv3_bias_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        conv3_bias_ce0 = grp_convolution3_fu_764_bias_ce0;
    end else begin
        conv3_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln158_reg_1536_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1))) begin
        conv3_bias_we0 = 1'b1;
    end else begin
        conv3_bias_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        conv3_output_address0 = grp_max_pooling4_fu_796_input_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        conv3_output_address0 = grp_convolution3_fu_764_output_r_address0;
    end else begin
        conv3_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        conv3_output_ce0 = grp_max_pooling4_fu_796_input_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        conv3_output_ce0 = grp_convolution3_fu_764_output_r_ce0;
    end else begin
        conv3_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        conv3_output_we0 = grp_convolution3_fu_764_output_r_we0;
    end else begin
        conv3_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        conv3_weights_address0 = zext_ln157_1_fu_1088_p1;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        conv3_weights_address0 = grp_convolution3_fu_764_weights_address0;
    end else begin
        conv3_weights_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        conv3_weights_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        conv3_weights_ce0 = grp_convolution3_fu_764_weights_ce0;
    end else begin
        conv3_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        conv3_weights_ce1 = grp_convolution3_fu_764_weights_ce1;
    end else begin
        conv3_weights_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln157_reg_1511_pp2_iter1_reg == 1'd0) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        conv3_weights_we0 = 1'b1;
    end else begin
        conv3_weights_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        conv5_bias_address0 = zext_ln161_fu_1184_p1;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        conv5_bias_address0 = grp_convolution5_fu_772_bias_address0;
    end else begin
        conv5_bias_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        conv5_bias_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        conv5_bias_ce0 = grp_convolution5_fu_772_bias_ce0;
    end else begin
        conv5_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (icmp_ln161_reg_1586_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1))) begin
        conv5_bias_we0 = 1'b1;
    end else begin
        conv5_bias_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0))) begin
        conv5_output_0_0_address0 = zext_ln125_1_fu_1310_p1;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        conv5_output_0_0_address0 = grp_convolution5_fu_772_output_0_0_address0;
    end else begin
        conv5_output_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        conv5_output_0_0_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        conv5_output_0_0_ce0 = grp_convolution5_fu_772_output_0_0_ce0;
    end else begin
        conv5_output_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        conv5_output_0_0_we0 = grp_convolution5_fu_772_output_0_0_we0;
    end else begin
        conv5_output_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        conv5_weights_address0 = zext_ln160_1_fu_1152_p1;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        conv5_weights_address0 = grp_convolution5_fu_772_weights_address0;
    end else begin
        conv5_weights_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        conv5_weights_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        conv5_weights_ce0 = grp_convolution5_fu_772_weights_ce0;
    end else begin
        conv5_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln160_reg_1561_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1))) begin
        conv5_weights_we0 = 1'b1;
    end else begin
        conv5_weights_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter5 == 1'b1) & (1'b0 == ap_block_pp8_stage0))) begin
        fc6_bias_address0 = zext_ln125_fu_1356_p1;
    end else if (((1'b0 == ap_block_pp7_stage0) & (ap_enable_reg_pp7_iter2 == 1'b1))) begin
        fc6_bias_address0 = zext_ln164_fu_1248_p1;
    end else begin
        fc6_bias_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp7_stage0_11001) & (ap_enable_reg_pp7_iter2 == 1'b1)) | ((ap_enable_reg_pp8_iter5 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001)))) begin
        fc6_bias_ce0 = 1'b1;
    end else begin
        fc6_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp7_stage0_11001) & (icmp_ln164_reg_1636_pp7_iter1_reg == 1'd0) & (ap_enable_reg_pp7_iter2 == 1'b1))) begin
        fc6_bias_we0 = 1'b1;
    end else begin
        fc6_bias_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0))) begin
        fc6_weights_0_0_address0 = sext_ln126_fu_1351_p1;
    end else if (((1'b0 == ap_block_pp6_stage0) & (ap_enable_reg_pp6_iter2 == 1'b1))) begin
        fc6_weights_0_0_address0 = zext_ln163_1_fu_1216_p1;
    end else begin
        fc6_weights_0_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp6_stage0_11001) & (ap_enable_reg_pp6_iter2 == 1'b1)) | ((ap_enable_reg_pp8_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp8_stage0) & (1'b0 == ap_block_pp8_stage0_11001)))) begin
        fc6_weights_0_0_ce0 = 1'b1;
    end else begin
        fc6_weights_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp6_stage0_11001) & (icmp_ln163_reg_1611_pp6_iter1_reg == 1'd0) & (ap_enable_reg_pp6_iter2 == 1'b1))) begin
        fc6_weights_0_0_we0 = 1'b1;
    end else begin
        fc6_weights_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_954_ce = 1'b1;
    end else begin
        grp_fu_954_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp9_stage0) & (ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0))) begin
        output_assign_address0 = zext_ln178_fu_1386_p1;
    end else if (((ap_enable_reg_pp8_iter5 == 1'b1) & (1'b0 == ap_block_pp8_stage0))) begin
        output_assign_address0 = zext_ln125_fu_1356_p1;
    end else begin
        output_assign_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp9_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp9_stage0) & (1'b0 == ap_block_pp9_stage0_11001)) | ((ap_enable_reg_pp8_iter5 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001)))) begin
        output_assign_ce0 = 1'b1;
    end else begin
        output_assign_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp8_iter12 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        output_assign_ce1 = 1'b1;
    end else begin
        output_assign_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln122_reg_1650_pp8_iter11_reg == 1'd0) & (ap_enable_reg_pp8_iter12 == 1'b1) & (1'b0 == ap_block_pp8_stage0_11001))) begin
        output_assign_we1 = 1'b1;
    end else begin
        output_assign_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        pool2_output_address0 = grp_max_pooling2_fu_790_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        pool2_output_address0 = grp_convolution3_fu_764_input_r_address0;
    end else begin
        pool2_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        pool2_output_ce0 = grp_max_pooling2_fu_790_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        pool2_output_ce0 = grp_convolution3_fu_764_input_r_ce0;
    end else begin
        pool2_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        pool2_output_ce1 = grp_convolution3_fu_764_input_r_ce1;
    end else begin
        pool2_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state99)) begin
        pool2_output_we0 = grp_max_pooling2_fu_790_output_r_we0;
    end else begin
        pool2_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        pool4_output_address0 = grp_max_pooling4_fu_796_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        pool4_output_address0 = grp_convolution5_fu_772_input_r_address0;
    end else begin
        pool4_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        pool4_output_ce0 = grp_max_pooling4_fu_796_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        pool4_output_ce0 = grp_convolution5_fu_772_input_r_ce0;
    end else begin
        pool4_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        pool4_output_we0 = grp_max_pooling4_fu_796_output_r_we0;
    end else begin
        pool4_output_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln154_fu_862_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln154_fu_862_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((icmp_ln155_fu_1044_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((icmp_ln155_fu_1044_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln157_fu_1076_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((icmp_ln157_fu_1076_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((icmp_ln158_fu_1108_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((icmp_ln158_fu_1108_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((icmp_ln160_fu_1140_p2 == 1'd1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) & ~((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((icmp_ln160_fu_1140_p2 == 1'd1) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)) | ((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            if (((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state64))) begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state64;
            end
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone) & (icmp_ln161_fu_1172_p2 == 1'd1)) & ~((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone)) | ((ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone) & (icmp_ln161_fu_1172_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_pp6_stage0;
        end
        ap_ST_fsm_pp6_stage0 : begin
            if ((~((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone) & (icmp_ln163_fu_1204_p2 == 1'd1)) & ~((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end else if ((((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter2 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone)) | ((ap_enable_reg_pp6_iter1 == 1'b0) & (ap_enable_reg_pp6_iter0 == 1'b1) & (1'b0 == ap_block_pp6_stage0_subdone) & (icmp_ln163_fu_1204_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp6_stage0;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            if (((1'b1 == DATA_PARAMETERS_ARREADY) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_pp7_stage0;
        end
        ap_ST_fsm_pp7_stage0 : begin
            if ((~((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone) & (icmp_ln164_fu_1236_p2 == 1'd1)) & ~((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end else if ((((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter2 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone)) | ((ap_enable_reg_pp7_iter1 == 1'b0) & (ap_enable_reg_pp7_iter0 == 1'b1) & (1'b0 == ap_block_pp7_stage0_subdone) & (icmp_ln164_fu_1236_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp7_stage0;
            end
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            if (((1'b1 == ap_CS_fsm_state97) & (grp_convolution1_fu_780_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            if (((1'b1 == ap_CS_fsm_state99) & (grp_max_pooling2_fu_790_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state100;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state99;
            end
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            if (((1'b1 == ap_CS_fsm_state101) & (grp_convolution3_fu_764_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state102;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state101;
            end
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            if (((1'b1 == ap_CS_fsm_state103) & (grp_max_pooling4_fu_796_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            if (((1'b1 == ap_CS_fsm_state105) & (grp_convolution5_fu_772_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state105;
            end
        end
        ap_ST_fsm_pp8_stage0 : begin
            if ((~((ap_enable_reg_pp8_iter0 == 1'b1) & (ap_enable_reg_pp8_iter1 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone) & (icmp_ln122_fu_1253_p2 == 1'd1)) & ~((ap_enable_reg_pp8_iter12 == 1'b1) & (ap_enable_reg_pp8_iter11 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end else if ((((ap_enable_reg_pp8_iter12 == 1'b1) & (ap_enable_reg_pp8_iter11 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone)) | ((ap_enable_reg_pp8_iter0 == 1'b1) & (ap_enable_reg_pp8_iter1 == 1'b0) & (1'b0 == ap_block_pp8_stage0_subdone) & (icmp_ln122_fu_1253_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp8_stage0;
            end
        end
        ap_ST_fsm_state119 : begin
            if (((1'b1 == DATA_FC6_OUTPUT_AWREADY) & (1'b1 == ap_CS_fsm_state119))) begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state119;
            end
        end
        ap_ST_fsm_pp9_stage0 : begin
            if ((~((ap_enable_reg_pp9_iter0 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone) & (ap_enable_reg_pp9_iter1 == 1'b0) & (icmp_ln178_fu_1374_p2 == 1'd1)) & ~((ap_enable_reg_pp9_iter2 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone) & (ap_enable_reg_pp9_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end else if ((((ap_enable_reg_pp9_iter2 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone) & (ap_enable_reg_pp9_iter1 == 1'b0)) | ((ap_enable_reg_pp9_iter0 == 1'b1) & (1'b0 == ap_block_pp9_stage0_subdone) & (ap_enable_reg_pp9_iter1 == 1'b0) & (icmp_ln178_fu_1374_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp9_stage0;
            end
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            if (((1'b1 == DATA_FC6_OUTPUT_BVALID) & (1'b1 == ap_CS_fsm_state127))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_fu_1366_p3 = ((select_ln125_1_fu_1361_p3[0:0] === 1'b1) ? fc6_bias_q0 : output_assign_q0);

assign add_ln122_fu_1259_p2 = (indvar_flatten_reg_720 + 11'd1);

assign add_ln126_fu_1345_p2 = (sub_ln126_fu_1339_p2 + zext_ln126_fu_1314_p1);

assign add_ln154_1_fu_874_p2 = (8'd1 + phi_urem_reg_625);

assign add_ln154_2_fu_974_p2 = (zext_ln154_fu_960_p1 + zext_ln154_1_fu_970_p1);

assign add_ln154_3_fu_920_p2 = (5'd7 + trunc_ln154_fu_910_p1);

assign add_ln154_4_fu_987_p2 = (add_ln154_2_fu_974_p2 + zext_ln154_3_fu_983_p1);

assign add_ln154_5_fu_1009_p2 = (trunc_ln154_1_fu_993_p1 + p_shl_cast_fu_1001_p3);

assign add_ln154_6_fu_1019_p2 = (add_ln154_5_fu_1009_p2 + zext_ln154_4_fu_1015_p1);

assign add_ln154_7_fu_894_p2 = (16'd328 + phi_mul_reg_614);

assign add_ln154_fu_868_p2 = (phi_ln154_reg_603 + 8'd1);

assign add_ln155_1_fu_1029_p2 = (p_cast_reg_1419 + 31'd150);

assign add_ln155_fu_1050_p2 = (ap_phi_mux_phi_ln155_phi_fu_640_p4 + 3'd1);

assign add_ln157_1_fu_1061_p2 = (p_cast_reg_1419 + 31'd156);

assign add_ln157_fu_1082_p2 = (ap_phi_mux_phi_ln157_phi_fu_652_p4 + 12'd1);

assign add_ln158_1_fu_1093_p2 = (p_cast_reg_1419 + 31'd2556);

assign add_ln158_fu_1114_p2 = (ap_phi_mux_phi_ln158_phi_fu_664_p4 + 5'd1);

assign add_ln160_1_fu_1125_p2 = (p_cast_reg_1419 + 31'd2572);

assign add_ln160_fu_1146_p2 = (ap_phi_mux_phi_ln160_phi_fu_676_p4 + 16'd1);

assign add_ln161_1_fu_1157_p2 = (p_cast_reg_1419 + 31'd50572);

assign add_ln161_fu_1178_p2 = (ap_phi_mux_phi_ln161_phi_fu_688_p4 + 7'd1);

assign add_ln163_1_fu_1189_p2 = (p_cast_reg_1419 + 31'd50692);

assign add_ln163_fu_1210_p2 = (ap_phi_mux_phi_ln163_phi_fu_700_p4 + 11'd1);

assign add_ln164_1_fu_1221_p2 = (p_cast_reg_1419 + 31'd51892);

assign add_ln164_fu_1242_p2 = (ap_phi_mux_phi_ln164_phi_fu_712_p4 + 4'd1);

assign add_ln178_fu_1380_p2 = (phi_ln178_reg_753 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_pp6_stage0 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_pp7_stage0 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_pp8_stage0 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_pp9_stage0 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd75];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln154_reg_1430_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln154_reg_1430_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln155_reg_1486 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln155_reg_1486 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln157_reg_1511 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln157_reg_1511 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln158_reg_1536 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln158_reg_1536 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln160_reg_1561 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln160_reg_1561 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1));
end

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln161_reg_1586 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln161_reg_1586 == 1'd0) & (ap_enable_reg_pp5_iter1 == 1'b1));
end

assign ap_block_pp6_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp6_stage0_11001 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln163_reg_1611 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp6_stage0_subdone = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln163_reg_1611 == 1'd0) & (ap_enable_reg_pp6_iter1 == 1'b1));
end

assign ap_block_pp7_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp7_stage0_11001 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln164_reg_1636 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp7_stage0_subdone = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln164_reg_1636 == 1'd0) & (ap_enable_reg_pp7_iter1 == 1'b1));
end

assign ap_block_pp8_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp8_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp8_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp9_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp9_stage0_11001 = ((ap_enable_reg_pp9_iter2 == 1'b1) & (1'b1 == ap_block_state122_io));
end

always @ (*) begin
    ap_block_pp9_stage0_subdone = ((ap_enable_reg_pp9_iter2 == 1'b1) & (1'b1 == ap_block_state122_io));
end

assign ap_block_state106_pp8_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state107_pp8_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state108_pp8_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state109_pp8_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state110_pp8_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state111_pp8_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state112_pp8_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state113_pp8_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state114_pp8_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state115_pp8_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state116_pp8_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state117_pp8_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state118_pp8_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state120_pp9_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state121_pp9_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state122_io = ((1'b0 == DATA_FC6_OUTPUT_WREADY) & (icmp_ln178_reg_1744_pp9_iter1_reg == 1'd0));
end

assign ap_block_state122_pp9_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_pp0_stage0_iter8 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln154_reg_1430_pp0_iter7_reg == 1'd0));
end

assign ap_block_state18_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_pp1_stage0_iter1 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln155_reg_1486 == 1'd0));
end

assign ap_block_state29_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state39_pp2_stage0_iter1 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln157_reg_1511 == 1'd0));
end

assign ap_block_state40_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state50_pp3_stage0_iter1 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln158_reg_1536 == 1'd0));
end

assign ap_block_state51_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state61_pp4_stage0_iter1 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln160_reg_1561 == 1'd0));
end

assign ap_block_state62_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state72_pp5_stage0_iter1 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln161_reg_1586 == 1'd0));
end

assign ap_block_state73_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp6_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state83_pp6_stage0_iter1 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln163_reg_1611 == 1'd0));
end

assign ap_block_state84_pp6_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state93_pp7_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state94_pp7_stage0_iter1 = ((1'b0 == DATA_PARAMETERS_RVALID) & (icmp_ln164_reg_1636 == 1'd0));
end

assign ap_block_state95_pp7_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

assign ap_enable_pp6 = (ap_idle_pp6 ^ 1'b1);

assign ap_enable_pp7 = (ap_idle_pp7 ^ 1'b1);

assign ap_enable_pp8 = (ap_idle_pp8 ^ 1'b1);

assign ap_enable_pp9 = (ap_idle_pp9 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_fu_1265_p2 = (ap_phi_mux_c_0_i_phi_fu_735_p4 + 7'd1);

assign empty_15_fu_840_p1 = parameters3_reg_1396;

assign empty_fu_850_p1 = fc6_output5_reg_1391;

assign grp_convolution1_fu_780_ap_start = grp_convolution1_fu_780_ap_start_reg;

assign grp_convolution3_fu_764_ap_start = grp_convolution3_fu_764_ap_start_reg;

assign grp_convolution5_fu_772_ap_start = grp_convolution5_fu_772_ap_start_reg;

assign grp_fu_954_p1 = 5'd5;

assign grp_max_pooling2_fu_790_ap_start = grp_max_pooling2_fu_790_ap_start_reg;

assign grp_max_pooling4_fu_796_ap_start = grp_max_pooling4_fu_796_ap_start_reg;

assign icmp_ln122_fu_1253_p2 = ((indvar_flatten_reg_720 == 11'd1200) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_1271_p2 = ((n_0_i_reg_742 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln125_1_fu_1285_p2 = ((ap_phi_mux_c_0_i_phi_fu_735_p4 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln125_fu_1305_p2 = ((c_reg_1659 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln154_1_fu_914_p2 = ((trunc_ln154_fu_910_p1 < 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln154_2_fu_880_p2 = ((add_ln154_1_fu_874_p2 < 8'd25) ? 1'b1 : 1'b0);

assign icmp_ln154_fu_862_p2 = ((phi_ln154_reg_603 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln155_fu_1044_p2 = ((ap_phi_mux_phi_ln155_phi_fu_640_p4 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln157_fu_1076_p2 = ((ap_phi_mux_phi_ln157_phi_fu_652_p4 == 12'd2400) ? 1'b1 : 1'b0);

assign icmp_ln158_fu_1108_p2 = ((ap_phi_mux_phi_ln158_phi_fu_664_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln160_fu_1140_p2 = ((ap_phi_mux_phi_ln160_phi_fu_676_p4 == 16'd48000) ? 1'b1 : 1'b0);

assign icmp_ln161_fu_1172_p2 = ((ap_phi_mux_phi_ln161_phi_fu_688_p4 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln163_fu_1204_p2 = ((ap_phi_mux_phi_ln163_phi_fu_700_p4 == 11'd1200) ? 1'b1 : 1'b0);

assign icmp_ln164_fu_1236_p2 = ((ap_phi_mux_phi_ln164_phi_fu_712_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln178_fu_1374_p2 = ((phi_ln178_reg_753 == 4'd10) ? 1'b1 : 1'b0);

assign mul_ln154_fu_938_p1 = mul_ln154_fu_938_p10;

assign mul_ln154_fu_938_p10 = select_ln154_fu_926_p3;

assign mul_ln154_fu_938_p2 = (12'd52 * mul_ln154_fu_938_p1);

assign n_fu_1299_p2 = (select_ln125_fu_1277_p3 + 4'd1);

assign p_cast_fu_859_p1 = parameters3_reg_1396;

assign p_shl_cast_fu_1001_p3 = {{trunc_ln154_2_fu_997_p1}, {2'd0}};

assign select_ln125_1_fu_1361_p3 = ((icmp_ln123_reg_1664_pp8_iter5_reg[0:0] === 1'b1) ? icmp_ln125_reg_1693_pp8_iter5_reg : icmp_ln125_1_reg_1676_pp8_iter5_reg);

assign select_ln125_3_fu_1291_p3 = ((icmp_ln123_fu_1271_p2[0:0] === 1'b1) ? c_fu_1265_p2 : ap_phi_mux_c_0_i_phi_fu_735_p4);

assign select_ln125_fu_1277_p3 = ((icmp_ln123_fu_1271_p2[0:0] === 1'b1) ? 4'd0 : n_0_i_reg_742);

assign select_ln154_1_fu_886_p3 = ((icmp_ln154_2_fu_880_p2[0:0] === 1'b1) ? add_ln154_1_fu_874_p2 : 8'd0);

assign select_ln154_fu_926_p3 = ((icmp_ln154_1_fu_914_p2[0:0] === 1'b1) ? trunc_ln154_fu_910_p1 : add_ln154_3_fu_920_p2);

assign sext_ln126_fu_1351_p1 = $signed(add_ln126_fu_1345_p2);

assign sext_ln154_fu_980_p1 = $signed(tmp_13_reg_1460_pp0_iter7_reg);

assign sub_ln126_fu_1339_p2 = (zext_ln126_1_fu_1324_p1 - zext_ln126_2_fu_1335_p1);

assign tmp_12_fu_963_p3 = {{tmp_reg_1449_pp0_iter7_reg}, {2'd0}};

assign tmp_5_fu_1328_p3 = {{select_ln125_reg_1669}, {3'd0}};

assign tmp_s_fu_1317_p3 = {{select_ln125_reg_1669}, {7'd0}};

assign trunc_ln154_1_fu_993_p1 = add_ln154_4_fu_987_p2[8:0];

assign trunc_ln154_2_fu_997_p1 = add_ln154_4_fu_987_p2[6:0];

assign trunc_ln154_fu_910_p1 = phi_urem_reg_625[4:0];

assign zext_ln125_1_fu_1310_p1 = select_ln125_3_reg_1681;

assign zext_ln125_fu_1356_p1 = select_ln125_reg_1669_pp8_iter4_reg;

assign zext_ln126_1_fu_1324_p1 = tmp_s_fu_1317_p3;

assign zext_ln126_2_fu_1335_p1 = tmp_5_fu_1328_p3;

assign zext_ln126_fu_1314_p1 = select_ln125_3_reg_1681;

assign zext_ln154_1_fu_970_p1 = tmp_12_fu_963_p3;

assign zext_ln154_3_fu_983_p1 = $unsigned(sext_ln154_fu_980_p1);

assign zext_ln154_4_fu_1015_p1 = grp_fu_954_p2;

assign zext_ln154_5_fu_1025_p1 = add_ln154_6_reg_1470;

assign zext_ln154_fu_960_p1 = tmp_reg_1449_pp0_iter7_reg;

assign zext_ln155_1_fu_1034_p1 = add_ln155_1_reg_1475;

assign zext_ln155_fu_1056_p1 = phi_ln155_reg_636_pp1_iter1_reg;

assign zext_ln157_1_fu_1088_p1 = phi_ln157_reg_648_pp2_iter1_reg;

assign zext_ln157_fu_1066_p1 = add_ln157_1_reg_1500;

assign zext_ln158_1_fu_1098_p1 = add_ln158_1_reg_1525;

assign zext_ln158_fu_1120_p1 = phi_ln158_reg_660_pp3_iter1_reg;

assign zext_ln160_1_fu_1152_p1 = phi_ln160_reg_672_pp4_iter1_reg;

assign zext_ln160_fu_1130_p1 = add_ln160_1_reg_1550;

assign zext_ln161_1_fu_1162_p1 = add_ln161_1_reg_1575;

assign zext_ln161_fu_1184_p1 = phi_ln161_reg_684_pp5_iter1_reg;

assign zext_ln163_1_fu_1216_p1 = phi_ln163_reg_696_pp6_iter1_reg;

assign zext_ln163_fu_1194_p1 = add_ln163_1_reg_1600;

assign zext_ln164_1_fu_1226_p1 = add_ln164_1_reg_1625;

assign zext_ln164_fu_1248_p1 = phi_ln164_reg_708_pp7_iter1_reg;

assign zext_ln178_fu_1386_p1 = phi_ln178_reg_753;

always @ (posedge ap_clk) begin
    DATA_FC6_OUTPUT_addr_reg_1413[31:30] <= 2'b00;
    p_cast_reg_1419[30] <= 1'b0;
end

endmodule //lenet_cnn
