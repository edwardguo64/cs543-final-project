// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pooling2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state11 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [10:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [12:0] indvar_flatten117_reg_127;
reg   [2:0] c_0_reg_138;
reg   [9:0] indvar_flatten63_reg_150;
reg   [3:0] h_0_reg_162;
reg   [6:0] indvar_flatten24_reg_173;
reg   [3:0] w_0_reg_185;
reg   [3:0] indvar_flatten_reg_197;
reg   [1:0] i_0_reg_209;
reg   [1:0] j_0_reg_220;
wire   [4:0] shl_ln_fu_237_p3;
reg   [4:0] shl_ln_reg_1021;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state8_pp0_stage0_iter3;
wire    ap_block_state10_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] add_ln40_fu_249_p2;
reg   [4:0] add_ln40_reg_1026;
wire   [0:0] icmp_ln32_fu_255_p2;
reg   [0:0] icmp_ln32_reg_1031;
reg   [0:0] icmp_ln32_reg_1031_pp0_iter1_reg;
wire   [12:0] add_ln32_fu_261_p2;
reg   [12:0] add_ln32_reg_1035;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] c_fu_267_p2;
reg   [2:0] c_reg_1040;
wire   [0:0] icmp_ln33_fu_273_p2;
reg   [0:0] icmp_ln33_reg_1045;
wire   [3:0] select_ln41_fu_279_p3;
reg   [3:0] select_ln41_reg_1053;
wire   [0:0] and_ln41_6_fu_345_p2;
reg   [0:0] and_ln41_6_reg_1058;
wire   [3:0] h_fu_351_p2;
reg   [3:0] h_reg_1065;
wire   [0:0] or_ln33_fu_357_p2;
reg   [0:0] or_ln33_reg_1071;
wire   [0:0] and_ln33_3_fu_393_p2;
reg   [0:0] and_ln33_3_reg_1078;
wire   [0:0] or_ln34_1_fu_405_p2;
reg   [0:0] or_ln34_1_reg_1085;
wire   [1:0] select_ln34_fu_411_p3;
reg   [1:0] select_ln34_reg_1090;
wire   [0:0] and_ln34_2_fu_437_p2;
reg   [0:0] and_ln34_2_reg_1095;
wire   [1:0] i_fu_443_p2;
reg   [1:0] i_reg_1101;
wire   [1:0] select_ln35_fu_461_p3;
reg   [1:0] select_ln35_reg_1107;
reg   [1:0] select_ln35_reg_1107_pp0_iter1_reg;
wire   [0:0] select_ln35_1_fu_473_p3;
reg   [0:0] select_ln35_1_reg_1114;
reg   [0:0] select_ln35_1_reg_1114_pp0_iter1_reg;
wire   [0:0] and_ln44_fu_501_p2;
reg   [0:0] and_ln44_reg_1119;
reg   [0:0] and_ln44_reg_1119_pp0_iter1_reg;
reg   [0:0] and_ln44_reg_1119_pp0_iter2_reg;
reg   [0:0] and_ln44_reg_1119_pp0_iter3_reg;
wire   [2:0] select_ln41_1_fu_507_p3;
reg   [2:0] select_ln41_1_reg_1123;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_state9_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] select_ln33_fu_559_p3;
reg   [3:0] select_ln33_reg_1130;
wire   [3:0] select_ln33_2_fu_580_p3;
reg   [3:0] select_ln33_2_reg_1135;
wire   [3:0] w_fu_607_p2;
reg   [3:0] w_reg_1141;
wire   [1:0] select_ln35_4_fu_691_p3;
reg   [1:0] select_ln35_4_reg_1146;
wire   [13:0] add_ln41_1_fu_709_p2;
reg   [13:0] add_ln41_1_reg_1151;
wire   [1:0] j_fu_715_p2;
reg   [1:0] j_reg_1156;
wire   [3:0] select_ln35_5_fu_726_p3;
reg   [3:0] select_ln35_5_reg_1161;
wire   [6:0] select_ln34_4_fu_739_p3;
reg   [6:0] select_ln34_4_reg_1166;
wire   [9:0] select_ln33_5_fu_752_p3;
reg   [9:0] select_ln33_5_reg_1171;
wire   [3:0] select_ln34_2_fu_830_p3;
reg   [3:0] select_ln34_2_reg_1176;
reg    ap_enable_reg_pp0_iter1;
reg   [10:0] output_addr_reg_1181;
reg   [10:0] output_addr_reg_1181_pp0_iter2_reg;
reg   [10:0] output_addr_reg_1181_pp0_iter3_reg;
wire   [31:0] max_value_fu_865_p3;
reg   [31:0] max_value_reg_1191;
reg   [31:0] input_load_reg_1198;
wire   [31:0] max_value_2_fu_956_p3;
reg   [31:0] max_value_2_reg_1205;
reg   [31:0] max_value_2_reg_1205_pp0_iter3_reg;
wire   [31:0] select_ln5_fu_1008_p3;
reg   [31:0] select_ln5_reg_1212;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg   [12:0] ap_phi_mux_indvar_flatten117_phi_fu_131_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_c_0_phi_fu_142_p4;
reg   [9:0] ap_phi_mux_indvar_flatten63_phi_fu_154_p4;
reg   [3:0] ap_phi_mux_h_0_phi_fu_166_p4;
reg   [6:0] ap_phi_mux_indvar_flatten24_phi_fu_177_p4;
reg   [3:0] ap_phi_mux_w_0_phi_fu_189_p4;
wire    ap_block_pp0_stage1;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_201_p4;
reg   [1:0] ap_phi_mux_i_0_phi_fu_213_p4;
reg   [1:0] ap_phi_mux_j_0_phi_fu_224_p4;
wire   [63:0] zext_ln45_2_fu_845_p1;
wire   [63:0] zext_ln41_3_fu_850_p1;
reg   [31:0] max_value_4_fu_98;
reg   [31:0] grp_fu_231_p0;
reg   [31:0] grp_fu_231_p1;
wire   [4:0] zext_ln35_fu_245_p1;
wire   [0:0] trunc_ln35_fu_293_p1;
wire   [0:0] xor_ln41_fu_287_p2;
wire   [0:0] icmp_ln44_fu_303_p2;
wire   [0:0] icmp_ln36_fu_315_p2;
wire   [0:0] icmp_ln35_fu_327_p2;
wire   [0:0] icmp_ln34_fu_339_p2;
wire   [0:0] xor_ln33_fu_363_p2;
wire   [0:0] and_ln41_2_fu_297_p2;
wire   [0:0] or_ln33_1_fu_369_p2;
wire   [0:0] and_ln41_3_fu_309_p2;
wire   [0:0] and_ln41_4_fu_321_p2;
wire   [0:0] and_ln41_5_fu_333_p2;
wire   [0:0] or_ln34_fu_399_p2;
wire   [0:0] and_ln33_fu_375_p2;
wire   [0:0] xor_ln34_fu_419_p2;
wire   [0:0] and_ln33_1_fu_381_p2;
wire   [0:0] and_ln33_2_fu_387_p2;
wire   [0:0] or_ln35_fu_449_p2;
wire   [0:0] or_ln35_1_fu_455_p2;
wire   [0:0] trunc_ln35_1_fu_469_p1;
wire   [0:0] and_ln34_fu_425_p2;
wire   [0:0] icmp_ln44_2_fu_481_p2;
wire   [0:0] and_ln34_1_fu_431_p2;
wire   [0:0] select_ln35_3_fu_487_p3;
wire   [0:0] icmp_ln44_1_fu_495_p2;
wire   [7:0] tmp_s_fu_513_p3;
wire   [4:0] tmp_1_fu_525_p3;
wire   [8:0] zext_ln41_fu_521_p1;
wire   [8:0] zext_ln41_1_fu_533_p1;
wire   [8:0] sub_ln41_fu_537_p2;
wire   [4:0] shl_ln40_mid1_fu_566_p3;
wire   [4:0] select_ln41_2_fu_547_p3;
wire   [4:0] shl_ln40_s_fu_585_p3;
wire   [4:0] select_ln41_3_fu_553_p3;
wire   [4:0] shl_ln40_1_mid1_fu_613_p3;
wire   [4:0] select_ln33_3_fu_593_p3;
wire   [4:0] select_ln33_1_fu_573_p3;
wire   [4:0] select_ln33_4_fu_600_p3;
wire   [4:0] zext_ln35_1_fu_635_p1;
wire   [4:0] add_ln40_2_fu_638_p2;
wire   [4:0] select_ln34_3_fu_628_p3;
wire   [4:0] select_ln35_2_fu_644_p3;
wire  signed [9:0] sext_ln41_fu_543_p1;
wire   [9:0] zext_ln35_2_fu_651_p1;
wire   [9:0] add_ln41_fu_655_p2;
wire   [8:0] trunc_ln41_fu_661_p1;
wire   [11:0] tmp_11_fu_673_p3;
wire   [13:0] p_shl_cast_fu_665_p3;
wire  signed [13:0] sext_ln41_1_fu_681_p1;
wire   [4:0] zext_ln36_fu_696_p1;
wire   [4:0] select_ln34_1_fu_621_p3;
wire   [4:0] add_ln40_1_fu_699_p2;
wire   [13:0] sub_ln41_1_fu_685_p2;
wire   [13:0] zext_ln41_2_fu_705_p1;
wire   [3:0] add_ln35_1_fu_720_p2;
wire   [6:0] add_ln34_1_fu_733_p2;
wire   [9:0] add_ln33_1_fu_746_p2;
wire   [6:0] tmp_3_fu_759_p3;
wire   [3:0] tmp_4_fu_770_p3;
wire   [7:0] zext_ln45_fu_766_p1;
wire   [7:0] zext_ln45_1_fu_777_p1;
wire   [7:0] sub_ln45_fu_781_p2;
wire  signed [8:0] sext_ln45_fu_787_p1;
wire   [8:0] zext_ln33_fu_791_p1;
wire   [8:0] add_ln45_fu_794_p2;
wire   [7:0] trunc_ln45_fu_800_p1;
wire   [9:0] tmp_10_fu_812_p3;
wire   [11:0] p_shl3_cast_fu_804_p3;
wire  signed [11:0] sext_ln45_1_fu_820_p1;
wire   [11:0] sub_ln45_1_fu_824_p2;
wire   [11:0] zext_ln34_fu_835_p1;
wire   [11:0] add_ln45_1_fu_839_p2;
wire   [0:0] trunc_ln36_fu_857_p1;
wire   [0:0] or_ln38_fu_860_p2;
wire   [31:0] bitcast_ln41_fu_874_p1;
wire   [31:0] bitcast_ln41_1_fu_891_p1;
wire   [7:0] tmp_fu_877_p4;
wire   [22:0] trunc_ln41_1_fu_887_p1;
wire   [0:0] icmp_ln41_1_fu_914_p2;
wire   [0:0] icmp_ln41_fu_908_p2;
wire   [7:0] tmp_6_fu_894_p4;
wire   [22:0] trunc_ln41_2_fu_904_p1;
wire   [0:0] icmp_ln41_3_fu_932_p2;
wire   [0:0] icmp_ln41_2_fu_926_p2;
wire   [0:0] or_ln41_fu_920_p2;
wire   [0:0] or_ln41_1_fu_938_p2;
wire   [0:0] and_ln41_fu_944_p2;
wire   [0:0] grp_fu_231_p2;
wire   [0:0] and_ln41_1_fu_950_p2;
wire   [31:0] bitcast_ln5_fu_967_p1;
wire   [7:0] tmp_8_fu_970_p4;
wire   [22:0] trunc_ln5_fu_980_p1;
wire   [0:0] icmp_ln5_2_fu_990_p2;
wire   [0:0] icmp_ln5_fu_984_p2;
wire   [0:0] or_ln5_fu_996_p2;
wire   [0:0] and_ln5_fu_1002_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state11;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

lenet_cnn_fcmp_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
lenet_cnn_fcmp_32dEe_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_231_p0),
    .din1(grp_fu_231_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_231_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_138 <= select_ln41_1_reg_1123;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_138 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        h_0_reg_162 <= select_ln33_2_reg_1135;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        h_0_reg_162 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_209 <= select_ln35_4_reg_1146;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_209 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten117_reg_127 <= add_ln32_reg_1035;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten117_reg_127 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten24_reg_173 <= select_ln34_4_reg_1166;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten24_reg_173 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten63_reg_150 <= select_ln33_5_reg_1171;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten63_reg_150 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_197 <= select_ln35_5_reg_1161;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_197 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_0_reg_220 <= j_reg_1156;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_220 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_0_reg_185 <= select_ln34_2_reg_1176;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w_0_reg_185 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln32_reg_1035 <= add_ln32_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln40_reg_1026 <= add_ln40_fu_249_p2;
        and_ln44_reg_1119_pp0_iter1_reg <= and_ln44_reg_1119;
        and_ln44_reg_1119_pp0_iter2_reg <= and_ln44_reg_1119_pp0_iter1_reg;
        and_ln44_reg_1119_pp0_iter3_reg <= and_ln44_reg_1119_pp0_iter2_reg;
        icmp_ln32_reg_1031 <= icmp_ln32_fu_255_p2;
        icmp_ln32_reg_1031_pp0_iter1_reg <= icmp_ln32_reg_1031;
        max_value_2_reg_1205_pp0_iter3_reg <= max_value_2_reg_1205;
        output_addr_reg_1181_pp0_iter2_reg <= output_addr_reg_1181;
        output_addr_reg_1181_pp0_iter3_reg <= output_addr_reg_1181_pp0_iter2_reg;
        select_ln35_1_reg_1114_pp0_iter1_reg <= select_ln35_1_reg_1114;
        select_ln35_reg_1107_pp0_iter1_reg <= select_ln35_reg_1107;
        shl_ln_reg_1021[4 : 1] <= shl_ln_fu_237_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln41_1_reg_1151 <= add_ln41_1_fu_709_p2;
        select_ln33_reg_1130 <= select_ln33_fu_559_p3;
        w_reg_1141 <= w_fu_607_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_255_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln33_3_reg_1078 <= and_ln33_3_fu_393_p2;
        and_ln34_2_reg_1095 <= and_ln34_2_fu_437_p2;
        and_ln41_6_reg_1058 <= and_ln41_6_fu_345_p2;
        and_ln44_reg_1119 <= and_ln44_fu_501_p2;
        c_reg_1040 <= c_fu_267_p2;
        h_reg_1065 <= h_fu_351_p2;
        i_reg_1101 <= i_fu_443_p2;
        icmp_ln33_reg_1045 <= icmp_ln33_fu_273_p2;
        or_ln33_reg_1071 <= or_ln33_fu_357_p2;
        or_ln34_1_reg_1085 <= or_ln34_1_fu_405_p2;
        select_ln34_reg_1090 <= select_ln34_fu_411_p3;
        select_ln35_1_reg_1114 <= select_ln35_1_fu_473_p3;
        select_ln35_reg_1107 <= select_ln35_fu_461_p3;
        select_ln41_reg_1053 <= select_ln41_fu_279_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_load_reg_1198 <= input_r_q0;
        max_value_reg_1191 <= max_value_fu_865_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        j_reg_1156 <= j_fu_715_p2;
        select_ln33_2_reg_1135 <= select_ln33_2_fu_580_p3;
        select_ln33_5_reg_1171 <= select_ln33_5_fu_752_p3;
        select_ln34_4_reg_1166 <= select_ln34_4_fu_739_p3;
        select_ln35_4_reg_1146 <= select_ln35_4_fu_691_p3;
        select_ln35_5_reg_1161 <= select_ln35_5_fu_726_p3;
        select_ln41_1_reg_1123 <= select_ln41_1_fu_507_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_value_2_reg_1205 <= max_value_2_fu_956_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_value_4_fu_98 <= max_value_2_fu_956_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_addr_reg_1181 <= zext_ln45_2_fu_845_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        select_ln34_2_reg_1176 <= select_ln34_2_fu_830_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln44_reg_1119_pp0_iter3_reg))) begin
        select_ln5_reg_1212 <= select_ln5_fu_1008_p3;
    end
end

always @ (*) begin
    if ((icmp_ln32_fu_255_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_c_0_phi_fu_142_p4 = select_ln41_1_reg_1123;
    end else begin
        ap_phi_mux_c_0_phi_fu_142_p4 = c_0_reg_138;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_h_0_phi_fu_166_p4 = select_ln33_2_reg_1135;
    end else begin
        ap_phi_mux_h_0_phi_fu_166_p4 = h_0_reg_162;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_213_p4 = select_ln35_4_reg_1146;
    end else begin
        ap_phi_mux_i_0_phi_fu_213_p4 = i_0_reg_209;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten117_phi_fu_131_p4 = add_ln32_reg_1035;
    end else begin
        ap_phi_mux_indvar_flatten117_phi_fu_131_p4 = indvar_flatten117_reg_127;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten24_phi_fu_177_p4 = select_ln34_4_reg_1166;
    end else begin
        ap_phi_mux_indvar_flatten24_phi_fu_177_p4 = indvar_flatten24_reg_173;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten63_phi_fu_154_p4 = select_ln33_5_reg_1171;
    end else begin
        ap_phi_mux_indvar_flatten63_phi_fu_154_p4 = indvar_flatten63_reg_150;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_201_p4 = select_ln35_5_reg_1161;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_201_p4 = indvar_flatten_reg_197;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1031 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_0_phi_fu_224_p4 = j_reg_1156;
    end else begin
        ap_phi_mux_j_0_phi_fu_224_p4 = j_0_reg_220;
    end
end

always @ (*) begin
    if (((icmp_ln32_reg_1031_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_w_0_phi_fu_189_p4 = select_ln34_2_reg_1176;
    end else begin
        ap_phi_mux_w_0_phi_fu_189_p4 = w_0_reg_185;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_231_p0 = max_value_2_reg_1205;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_231_p0 = max_value_fu_865_p3;
    end else begin
        grp_fu_231_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_231_p1 = 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_231_p1 = input_r_q0;
    end else begin
        grp_fu_231_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'd1 == and_ln44_reg_1119_pp0_iter3_reg))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln32_fu_255_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((icmp_ln32_fu_255_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_fu_261_p2 = (ap_phi_mux_indvar_flatten117_phi_fu_131_p4 + 13'd1);

assign add_ln33_1_fu_746_p2 = (indvar_flatten63_reg_150 + 10'd1);

assign add_ln34_1_fu_733_p2 = (indvar_flatten24_reg_173 + 7'd1);

assign add_ln35_1_fu_720_p2 = (indvar_flatten_reg_197 + 4'd1);

assign add_ln40_1_fu_699_p2 = (zext_ln36_fu_696_p1 + select_ln34_1_fu_621_p3);

assign add_ln40_2_fu_638_p2 = (zext_ln35_1_fu_635_p1 + select_ln33_1_fu_573_p3);

assign add_ln40_fu_249_p2 = (shl_ln_fu_237_p3 + zext_ln35_fu_245_p1);

assign add_ln41_1_fu_709_p2 = (sub_ln41_1_fu_685_p2 + zext_ln41_2_fu_705_p1);

assign add_ln41_fu_655_p2 = ($signed(sext_ln41_fu_543_p1) + $signed(zext_ln35_2_fu_651_p1));

assign add_ln45_1_fu_839_p2 = (sub_ln45_1_fu_824_p2 + zext_ln34_fu_835_p1);

assign add_ln45_fu_794_p2 = ($signed(sext_ln45_fu_787_p1) + $signed(zext_ln33_fu_791_p1));

assign and_ln33_1_fu_381_p2 = (or_ln33_1_fu_369_p2 & and_ln41_3_fu_309_p2);

assign and_ln33_2_fu_387_p2 = (or_ln33_1_fu_369_p2 & and_ln41_4_fu_321_p2);

assign and_ln33_3_fu_393_p2 = (or_ln33_1_fu_369_p2 & and_ln41_5_fu_333_p2);

assign and_ln33_fu_375_p2 = (or_ln33_1_fu_369_p2 & and_ln41_2_fu_297_p2);

assign and_ln34_1_fu_431_p2 = (xor_ln34_fu_419_p2 & and_ln33_1_fu_381_p2);

assign and_ln34_2_fu_437_p2 = (xor_ln34_fu_419_p2 & and_ln33_2_fu_387_p2);

assign and_ln34_fu_425_p2 = (xor_ln34_fu_419_p2 & and_ln33_fu_375_p2);

assign and_ln41_1_fu_950_p2 = (grp_fu_231_p2 & and_ln41_fu_944_p2);

assign and_ln41_2_fu_297_p2 = (xor_ln41_fu_287_p2 & trunc_ln35_fu_293_p1);

assign and_ln41_3_fu_309_p2 = (xor_ln41_fu_287_p2 & icmp_ln44_fu_303_p2);

assign and_ln41_4_fu_321_p2 = (xor_ln41_fu_287_p2 & icmp_ln36_fu_315_p2);

assign and_ln41_5_fu_333_p2 = (xor_ln41_fu_287_p2 & icmp_ln35_fu_327_p2);

assign and_ln41_6_fu_345_p2 = (xor_ln41_fu_287_p2 & icmp_ln34_fu_339_p2);

assign and_ln41_fu_944_p2 = (or_ln41_fu_920_p2 & or_ln41_1_fu_938_p2);

assign and_ln44_fu_501_p2 = (select_ln35_3_fu_487_p3 & icmp_ln44_1_fu_495_p2);

assign and_ln5_fu_1002_p2 = (or_ln5_fu_996_p2 & grp_fu_231_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln41_1_fu_891_p1 = input_load_reg_1198;

assign bitcast_ln41_fu_874_p1 = max_value_reg_1191;

assign bitcast_ln5_fu_967_p1 = max_value_2_reg_1205_pp0_iter3_reg;

assign c_fu_267_p2 = (3'd1 + ap_phi_mux_c_0_phi_fu_142_p4);

assign h_fu_351_p2 = (4'd1 + select_ln41_fu_279_p3);

assign i_fu_443_p2 = (2'd1 + select_ln34_fu_411_p3);

assign icmp_ln32_fu_255_p2 = ((ap_phi_mux_indvar_flatten117_phi_fu_131_p4 == 13'd4704) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_273_p2 = ((ap_phi_mux_indvar_flatten63_phi_fu_154_p4 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_339_p2 = ((ap_phi_mux_indvar_flatten24_phi_fu_177_p4 == 7'd56) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_327_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_201_p4 == 4'd4) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_315_p2 = ((ap_phi_mux_j_0_phi_fu_224_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln41_1_fu_914_p2 = ((trunc_ln41_1_fu_887_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_2_fu_926_p2 = ((tmp_6_fu_894_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln41_3_fu_932_p2 = ((trunc_ln41_2_fu_904_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_908_p2 = ((tmp_fu_877_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_495_p2 = ((select_ln35_fu_461_p3 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln44_2_fu_481_p2 = ((select_ln34_fu_411_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_303_p2 = ((ap_phi_mux_i_0_phi_fu_213_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln5_2_fu_990_p2 = ((trunc_ln5_fu_980_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_984_p2 = ((tmp_8_fu_970_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln41_3_fu_850_p1;

assign j_fu_715_p2 = (select_ln35_reg_1107 + 2'd1);

assign max_value_2_fu_956_p3 = ((and_ln41_1_fu_950_p2[0:0] === 1'b1) ? max_value_reg_1191 : input_load_reg_1198);

assign max_value_fu_865_p3 = ((or_ln38_fu_860_p2[0:0] === 1'b1) ? max_value_4_fu_98 : 32'd3546862757);

assign or_ln33_1_fu_369_p2 = (xor_ln33_fu_363_p2 | icmp_ln33_fu_273_p2);

assign or_ln33_fu_357_p2 = (icmp_ln33_fu_273_p2 | and_ln41_6_fu_345_p2);

assign or_ln34_1_fu_405_p2 = (or_ln34_fu_399_p2 | icmp_ln33_fu_273_p2);

assign or_ln34_fu_399_p2 = (and_ln41_6_fu_345_p2 | and_ln33_3_fu_393_p2);

assign or_ln35_1_fu_455_p2 = (or_ln35_fu_449_p2 | or_ln33_fu_357_p2);

assign or_ln35_fu_449_p2 = (and_ln34_2_fu_437_p2 | and_ln33_3_fu_393_p2);

assign or_ln38_fu_860_p2 = (trunc_ln36_fu_857_p1 | select_ln35_1_reg_1114_pp0_iter1_reg);

assign or_ln41_1_fu_938_p2 = (icmp_ln41_3_fu_932_p2 | icmp_ln41_2_fu_926_p2);

assign or_ln41_fu_920_p2 = (icmp_ln41_fu_908_p2 | icmp_ln41_1_fu_914_p2);

assign or_ln5_fu_996_p2 = (icmp_ln5_fu_984_p2 | icmp_ln5_2_fu_990_p2);

assign output_r_address0 = output_addr_reg_1181_pp0_iter3_reg;

assign output_r_d0 = select_ln5_reg_1212;

assign p_shl3_cast_fu_804_p3 = {{trunc_ln45_fu_800_p1}, {4'd0}};

assign p_shl_cast_fu_665_p3 = {{trunc_ln41_fu_661_p1}, {5'd0}};

assign select_ln33_1_fu_573_p3 = ((and_ln41_6_reg_1058[0:0] === 1'b1) ? shl_ln40_mid1_fu_566_p3 : select_ln41_2_fu_547_p3);

assign select_ln33_2_fu_580_p3 = ((and_ln41_6_reg_1058[0:0] === 1'b1) ? h_reg_1065 : select_ln41_reg_1053);

assign select_ln33_3_fu_593_p3 = ((or_ln33_reg_1071[0:0] === 1'b1) ? 5'd0 : shl_ln40_s_fu_585_p3);

assign select_ln33_4_fu_600_p3 = ((and_ln41_6_reg_1058[0:0] === 1'b1) ? shl_ln40_mid1_fu_566_p3 : select_ln41_3_fu_553_p3);

assign select_ln33_5_fu_752_p3 = ((icmp_ln33_reg_1045[0:0] === 1'b1) ? 10'd1 : add_ln33_1_fu_746_p2);

assign select_ln33_fu_559_p3 = ((or_ln33_reg_1071[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_w_0_phi_fu_189_p4);

assign select_ln34_1_fu_621_p3 = ((and_ln33_3_reg_1078[0:0] === 1'b1) ? shl_ln40_1_mid1_fu_613_p3 : select_ln33_3_fu_593_p3);

assign select_ln34_2_fu_830_p3 = ((and_ln33_3_reg_1078[0:0] === 1'b1) ? w_reg_1141 : select_ln33_reg_1130);

assign select_ln34_3_fu_628_p3 = ((and_ln33_3_reg_1078[0:0] === 1'b1) ? select_ln33_1_fu_573_p3 : select_ln33_4_fu_600_p3);

assign select_ln34_4_fu_739_p3 = ((or_ln33_reg_1071[0:0] === 1'b1) ? 7'd1 : add_ln34_1_fu_733_p2);

assign select_ln34_fu_411_p3 = ((or_ln34_1_fu_405_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_i_0_phi_fu_213_p4);

assign select_ln35_1_fu_473_p3 = ((and_ln34_2_fu_437_p2[0:0] === 1'b1) ? trunc_ln35_1_fu_469_p1 : and_ln34_fu_425_p2);

assign select_ln35_2_fu_644_p3 = ((and_ln34_2_reg_1095[0:0] === 1'b1) ? add_ln40_2_fu_638_p2 : select_ln34_3_fu_628_p3);

assign select_ln35_3_fu_487_p3 = ((and_ln34_2_fu_437_p2[0:0] === 1'b1) ? icmp_ln44_2_fu_481_p2 : and_ln34_1_fu_431_p2);

assign select_ln35_4_fu_691_p3 = ((and_ln34_2_reg_1095[0:0] === 1'b1) ? i_reg_1101 : select_ln34_reg_1090);

assign select_ln35_5_fu_726_p3 = ((or_ln34_1_reg_1085[0:0] === 1'b1) ? 4'd1 : add_ln35_1_fu_720_p2);

assign select_ln35_fu_461_p3 = ((or_ln35_1_fu_455_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_j_0_phi_fu_224_p4);

assign select_ln41_1_fu_507_p3 = ((icmp_ln33_reg_1045[0:0] === 1'b1) ? c_reg_1040 : c_0_reg_138);

assign select_ln41_2_fu_547_p3 = ((icmp_ln33_reg_1045[0:0] === 1'b1) ? 5'd0 : shl_ln_reg_1021);

assign select_ln41_3_fu_553_p3 = ((icmp_ln33_reg_1045[0:0] === 1'b1) ? 5'd0 : add_ln40_reg_1026);

assign select_ln41_fu_279_p3 = ((icmp_ln33_fu_273_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_h_0_phi_fu_166_p4);

assign select_ln5_fu_1008_p3 = ((and_ln5_fu_1002_p2[0:0] === 1'b1) ? max_value_2_reg_1205_pp0_iter3_reg : 32'd0);

assign sext_ln41_1_fu_681_p1 = $signed(tmp_11_fu_673_p3);

assign sext_ln41_fu_543_p1 = $signed(sub_ln41_fu_537_p2);

assign sext_ln45_1_fu_820_p1 = $signed(tmp_10_fu_812_p3);

assign sext_ln45_fu_787_p1 = $signed(sub_ln45_fu_781_p2);

assign shl_ln40_1_mid1_fu_613_p3 = {{w_fu_607_p2}, {1'd0}};

assign shl_ln40_mid1_fu_566_p3 = {{h_reg_1065}, {1'd0}};

assign shl_ln40_s_fu_585_p3 = {{ap_phi_mux_w_0_phi_fu_189_p4}, {1'd0}};

assign shl_ln_fu_237_p3 = {{ap_phi_mux_h_0_phi_fu_166_p4}, {1'd0}};

assign sub_ln41_1_fu_685_p2 = ($signed(p_shl_cast_fu_665_p3) - $signed(sext_ln41_1_fu_681_p1));

assign sub_ln41_fu_537_p2 = (zext_ln41_fu_521_p1 - zext_ln41_1_fu_533_p1);

assign sub_ln45_1_fu_824_p2 = ($signed(p_shl3_cast_fu_804_p3) - $signed(sext_ln45_1_fu_820_p1));

assign sub_ln45_fu_781_p2 = (zext_ln45_fu_766_p1 - zext_ln45_1_fu_777_p1);

assign tmp_10_fu_812_p3 = {{add_ln45_fu_794_p2}, {1'd0}};

assign tmp_11_fu_673_p3 = {{add_ln41_fu_655_p2}, {2'd0}};

assign tmp_1_fu_525_p3 = {{select_ln41_1_fu_507_p3}, {2'd0}};

assign tmp_3_fu_759_p3 = {{select_ln41_1_reg_1123}, {4'd0}};

assign tmp_4_fu_770_p3 = {{select_ln41_1_reg_1123}, {1'd0}};

assign tmp_6_fu_894_p4 = {{bitcast_ln41_1_fu_891_p1[30:23]}};

assign tmp_8_fu_970_p4 = {{bitcast_ln5_fu_967_p1[30:23]}};

assign tmp_fu_877_p4 = {{bitcast_ln41_fu_874_p1[30:23]}};

assign tmp_s_fu_513_p3 = {{select_ln41_1_fu_507_p3}, {5'd0}};

assign trunc_ln35_1_fu_469_p1 = i_fu_443_p2[0:0];

assign trunc_ln35_fu_293_p1 = ap_phi_mux_i_0_phi_fu_213_p4[0:0];

assign trunc_ln36_fu_857_p1 = select_ln35_reg_1107_pp0_iter1_reg[0:0];

assign trunc_ln41_1_fu_887_p1 = bitcast_ln41_fu_874_p1[22:0];

assign trunc_ln41_2_fu_904_p1 = bitcast_ln41_1_fu_891_p1[22:0];

assign trunc_ln41_fu_661_p1 = add_ln41_fu_655_p2[8:0];

assign trunc_ln45_fu_800_p1 = add_ln45_fu_794_p2[7:0];

assign trunc_ln5_fu_980_p1 = bitcast_ln5_fu_967_p1[22:0];

assign w_fu_607_p2 = (4'd1 + select_ln33_fu_559_p3);

assign xor_ln33_fu_363_p2 = (icmp_ln34_fu_339_p2 ^ 1'd1);

assign xor_ln34_fu_419_p2 = (1'd1 ^ and_ln33_3_fu_393_p2);

assign xor_ln41_fu_287_p2 = (icmp_ln33_fu_273_p2 ^ 1'd1);

assign zext_ln33_fu_791_p1 = select_ln33_2_reg_1135;

assign zext_ln34_fu_835_p1 = select_ln34_2_fu_830_p3;

assign zext_ln35_1_fu_635_p1 = i_reg_1101;

assign zext_ln35_2_fu_651_p1 = select_ln35_2_fu_644_p3;

assign zext_ln35_fu_245_p1 = ap_phi_mux_i_0_phi_fu_213_p4;

assign zext_ln36_fu_696_p1 = select_ln35_reg_1107;

assign zext_ln41_1_fu_533_p1 = tmp_1_fu_525_p3;

assign zext_ln41_2_fu_705_p1 = add_ln40_1_fu_699_p2;

assign zext_ln41_3_fu_850_p1 = add_ln41_1_reg_1151;

assign zext_ln41_fu_521_p1 = tmp_s_fu_513_p3;

assign zext_ln45_1_fu_777_p1 = tmp_4_fu_770_p3;

assign zext_ln45_2_fu_845_p1 = add_ln45_1_fu_839_p2;

assign zext_ln45_fu_766_p1 = tmp_3_fu_759_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_1021[0] <= 1'b0;
end

endmodule //max_pooling2
