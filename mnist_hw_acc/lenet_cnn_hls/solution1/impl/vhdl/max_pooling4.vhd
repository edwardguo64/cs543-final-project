-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pooling4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pooling4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_640 : STD_LOGIC_VECTOR (10 downto 0) := "11001000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_D368D4A5 : STD_LOGIC_VECTOR (31 downto 0) := "11010011011010001101010010100101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten117_reg_125 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_0_reg_136 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten63_reg_148 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_0_reg_160 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten24_reg_171 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_0_reg_183 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_195 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_207 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_0_reg_219 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_237_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_reg_984 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln88_fu_249_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln88_reg_989 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln80_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_994 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_994_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln80_fu_261_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln80_reg_998 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln81_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_1003 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln89_fu_273_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln89_reg_1012 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln89_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln89_reg_1017 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_6_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_6_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_fu_311_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal h_reg_1032 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln81_1_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln81_1_reg_1038 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_3_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_3_reg_1045 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln82_1_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln82_1_reg_1054 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln82_fu_347_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln82_reg_1059 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln89_1_fu_361_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln89_1_reg_1066 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln81_fu_445_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln81_reg_1073 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln81_2_fu_467_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln81_2_reg_1078 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_fu_510_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_reg_1084 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln83_fu_577_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln83_reg_1089 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln83_1_fu_589_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_1_reg_1095 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln89_1_fu_619_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln89_1_reg_1100 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln83_4_fu_638_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln83_4_reg_1106 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln88_1_fu_649_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln88_1_reg_1111 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln92_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_reg_1116 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_reg_1116_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_reg_1116_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_reg_1116_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_5_fu_673_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_5_reg_1120 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln82_4_fu_686_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln82_4_reg_1125 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln81_5_fu_700_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln81_5_reg_1130 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln82_2_fu_754_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln82_2_reg_1135 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal output_addr_reg_1140 : STD_LOGIC_VECTOR (8 downto 0);
    signal output_addr_reg_1140_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal output_addr_reg_1140_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal j_fu_812_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_1150 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_value_fu_828_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_value_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_value_1_fu_919_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_value_1_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_value_1_reg_1169_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln5_fu_971_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln5_reg_1176 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten117_phi_fu_129_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_c_0_phi_fu_140_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten63_phi_fu_152_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_h_0_phi_fu_164_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten24_phi_fu_175_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_w_0_phi_fu_187_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_199_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i_0_phi_fu_211_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_j_0_phi_fu_223_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln93_2_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln89_5_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_value_4_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_231_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln83_fu_245_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln83_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln82_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln81_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_5_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln82_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_355_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_368_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_380_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln89_2_fu_388_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln89_1_fu_376_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln83_fu_404_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln81_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln88_mid1_fu_453_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln89_2_fu_398_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln88_s_fu_472_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln89_2_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln89_3_fu_413_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln89_3_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_4_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln88_1_mid1_fu_516_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln81_3_fu_480_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln81_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln82_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln81_1_fu_460_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln81_4_fu_493_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln81_1_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln81_2_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln82_2_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln83_1_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_561_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln83_1_fu_585_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln82_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln83_1_fu_597_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln88_2_fu_601_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln82_3_fu_542_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_2_fu_607_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln89_fu_392_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln83_2_fu_615_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln92_2_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln82_1_fu_549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln84_fu_645_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln82_1_fu_524_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_3_fu_630_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_1_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln83_1_fu_667_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln82_1_fu_680_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln81_1_fu_694_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_710_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln89_fu_707_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln93_fu_717_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln93_fu_721_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln81_fu_727_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln93_1_fu_730_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln93_1_fu_736_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_cast_fu_740_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln93_2_fu_748_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln82_fu_759_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln93_3_fu_763_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_781_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln89_3_fu_788_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_fu_774_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln89_2_fu_792_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln89_4_fu_798_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln89_3_fu_801_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln84_fu_820_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln86_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln89_fu_837_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln89_1_fu_854_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_840_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln89_fu_850_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln89_1_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_857_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln89_1_fu_867_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln89_3_fu_895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_2_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln89_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln89_1_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_fu_907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_1_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln5_fu_930_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_933_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln5_fu_943_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln5_1_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln5_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln5_fu_965_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component lenet_cnn_fcmp_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    lenet_cnn_fcmp_32dEe_U26 : component lenet_cnn_fcmp_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_231_p0,
        din1 => grp_fu_231_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_231_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                c_0_reg_136 <= select_ln89_1_reg_1066;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_136 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    h_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                h_0_reg_160 <= select_ln81_2_reg_1078;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h_0_reg_160 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_207 <= select_ln83_4_reg_1106;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_207 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten117_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten117_reg_125 <= add_ln80_reg_998;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten117_reg_125 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten24_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten24_reg_171 <= select_ln82_4_reg_1125;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten24_reg_171 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten63_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten63_reg_148 <= select_ln81_5_reg_1130;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten63_reg_148 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_195 <= select_ln83_5_reg_1120;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_195 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                j_0_reg_219 <= j_reg_1150;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_219 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_0_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                w_0_reg_183 <= select_ln82_2_reg_1135;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w_0_reg_183 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln80_reg_998 <= add_ln80_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln88_1_reg_1111 <= add_ln88_1_fu_649_p2;
                add_ln89_1_reg_1100 <= add_ln89_1_fu_619_p2;
                and_ln92_reg_1116 <= and_ln92_fu_661_p2;
                select_ln81_reg_1073 <= select_ln81_fu_445_p3;
                select_ln83_1_reg_1095 <= select_ln83_1_fu_589_p3;
                select_ln83_reg_1089 <= select_ln83_fu_577_p3;
                w_reg_1084 <= w_fu_510_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln88_reg_989 <= add_ln88_fu_249_p2;
                icmp_ln80_reg_994 <= icmp_ln80_fu_255_p2;
                icmp_ln80_reg_994_pp0_iter1_reg <= icmp_ln80_reg_994;
                max_value_1_reg_1169_pp0_iter3_reg <= max_value_1_reg_1169;
                output_addr_reg_1140_pp0_iter2_reg <= output_addr_reg_1140;
                output_addr_reg_1140_pp0_iter3_reg <= output_addr_reg_1140_pp0_iter2_reg;
                    shl_ln_reg_984(3 downto 1) <= shl_ln_fu_237_p3(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_fu_255_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln81_3_reg_1045 <= and_ln81_3_fu_329_p2;
                and_ln89_6_reg_1024 <= and_ln89_6_fu_305_p2;
                h_reg_1032 <= h_fu_311_p2;
                icmp_ln81_reg_1003 <= icmp_ln81_fu_267_p2;
                or_ln81_1_reg_1038 <= or_ln81_1_fu_323_p2;
                or_ln82_1_reg_1054 <= or_ln82_1_fu_341_p2;
                select_ln82_reg_1059 <= select_ln82_fu_347_p3;
                select_ln89_reg_1012 <= select_ln89_fu_273_p3;
                xor_ln89_reg_1017 <= xor_ln89_fu_281_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                and_ln92_reg_1116_pp0_iter1_reg <= and_ln92_reg_1116;
                and_ln92_reg_1116_pp0_iter2_reg <= and_ln92_reg_1116_pp0_iter1_reg;
                and_ln92_reg_1116_pp0_iter3_reg <= and_ln92_reg_1116_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                input_load_reg_1162 <= input_r_q0;
                max_value_reg_1155 <= max_value_fu_828_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                j_reg_1150 <= j_fu_812_p2;
                select_ln82_2_reg_1135 <= select_ln82_2_fu_754_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                max_value_1_reg_1169 <= max_value_1_fu_919_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                max_value_4_fu_96 <= max_value_1_fu_919_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                output_addr_reg_1140 <= zext_ln93_2_fu_769_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_lv1_1 = and_ln92_reg_1116_pp0_iter2_reg) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln5_reg_1176 <= select_ln5_fu_971_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln81_2_reg_1078 <= select_ln81_2_fu_467_p3;
                select_ln81_5_reg_1130 <= select_ln81_5_fu_700_p3;
                select_ln82_4_reg_1125 <= select_ln82_4_fu_686_p3;
                select_ln83_4_reg_1106 <= select_ln83_4_fu_638_p3;
                select_ln83_5_reg_1120 <= select_ln83_5_fu_673_p3;
                select_ln89_1_reg_1066 <= select_ln89_1_fu_361_p3;
            end if;
        end if;
    end process;
    shl_ln_reg_984(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, icmp_ln80_fu_255_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln80_fu_255_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((icmp_ln80_fu_255_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln80_fu_261_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten117_phi_fu_129_p4) + unsigned(ap_const_lv11_1));
    add_ln81_1_fu_694_p2 <= std_logic_vector(unsigned(indvar_flatten63_reg_148) + unsigned(ap_const_lv8_1));
    add_ln82_1_fu_680_p2 <= std_logic_vector(unsigned(indvar_flatten24_reg_171) + unsigned(ap_const_lv6_1));
    add_ln83_1_fu_667_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_195) + unsigned(ap_const_lv4_1));
    add_ln88_1_fu_649_p2 <= std_logic_vector(unsigned(zext_ln84_fu_645_p1) + unsigned(select_ln82_1_fu_524_p3));
    add_ln88_2_fu_601_p2 <= std_logic_vector(unsigned(zext_ln83_1_fu_597_p1) + unsigned(select_ln81_1_fu_460_p3));
    add_ln88_fu_249_p2 <= std_logic_vector(unsigned(shl_ln_fu_237_p3) + unsigned(zext_ln83_fu_245_p1));
    add_ln89_1_fu_619_p2 <= std_logic_vector(unsigned(add_ln89_fu_392_p2) + unsigned(zext_ln83_2_fu_615_p1));
    add_ln89_2_fu_792_p2 <= std_logic_vector(unsigned(zext_ln89_3_fu_788_p1) + unsigned(p_shl_cast_fu_774_p3));
    add_ln89_3_fu_801_p2 <= std_logic_vector(unsigned(add_ln89_2_fu_792_p2) + unsigned(zext_ln89_4_fu_798_p1));
    add_ln89_fu_392_p2 <= std_logic_vector(unsigned(zext_ln89_2_fu_388_p1) + unsigned(zext_ln89_1_fu_376_p1));
    add_ln93_1_fu_730_p2 <= std_logic_vector(unsigned(add_ln93_fu_721_p2) + unsigned(zext_ln81_fu_727_p1));
    add_ln93_2_fu_748_p2 <= std_logic_vector(unsigned(zext_ln93_1_fu_736_p1) + unsigned(p_shl1_cast_fu_740_p3));
    add_ln93_3_fu_763_p2 <= std_logic_vector(unsigned(add_ln93_2_fu_748_p2) + unsigned(zext_ln82_fu_759_p1));
    add_ln93_fu_721_p2 <= std_logic_vector(unsigned(zext_ln89_fu_707_p1) + unsigned(zext_ln93_fu_717_p1));
    and_ln5_fu_965_p2 <= (or_ln5_fu_959_p2 and grp_fu_231_p2);
    and_ln81_1_fu_500_p2 <= (or_ln81_1_reg_1038 and and_ln89_3_fu_425_p2);
    and_ln81_2_fu_505_p2 <= (or_ln81_1_reg_1038 and and_ln89_4_fu_436_p2);
    and_ln81_3_fu_329_p2 <= (or_ln81_1_fu_323_p2 and and_ln89_5_fu_293_p2);
    and_ln81_fu_488_p2 <= (or_ln81_1_reg_1038 and and_ln89_2_fu_408_p2);
    and_ln82_1_fu_549_p2 <= (xor_ln82_fu_531_p2 and and_ln81_1_fu_500_p2);
    and_ln82_2_fu_555_p2 <= (xor_ln82_fu_531_p2 and and_ln81_2_fu_505_p2);
    and_ln82_fu_536_p2 <= (xor_ln82_fu_531_p2 and and_ln81_fu_488_p2);
    and_ln89_1_fu_913_p2 <= (grp_fu_231_p2 and and_ln89_fu_907_p2);
    and_ln89_2_fu_408_p2 <= (xor_ln89_reg_1017 and trunc_ln83_fu_404_p1);
    and_ln89_3_fu_425_p2 <= (xor_ln89_reg_1017 and icmp_ln92_fu_419_p2);
    and_ln89_4_fu_436_p2 <= (xor_ln89_reg_1017 and icmp_ln84_fu_430_p2);
    and_ln89_5_fu_293_p2 <= (xor_ln89_fu_281_p2 and icmp_ln83_fu_287_p2);
    and_ln89_6_fu_305_p2 <= (xor_ln89_fu_281_p2 and icmp_ln82_fu_299_p2);
    and_ln89_fu_907_p2 <= (or_ln89_fu_883_p2 and or_ln89_1_fu_901_p2);
    and_ln92_fu_661_p2 <= (select_ln83_3_fu_630_p3 and icmp_ln92_1_fu_655_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln80_fu_255_p2)
    begin
        if ((icmp_ln80_fu_255_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_140_p4_assign_proc : process(c_0_reg_136, icmp_ln80_reg_994_pp0_iter1_reg, select_ln89_1_reg_1066, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln80_reg_994_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_c_0_phi_fu_140_p4 <= select_ln89_1_reg_1066;
        else 
            ap_phi_mux_c_0_phi_fu_140_p4 <= c_0_reg_136;
        end if; 
    end process;


    ap_phi_mux_h_0_phi_fu_164_p4_assign_proc : process(h_0_reg_160, ap_CS_fsm_pp0_stage0, icmp_ln80_reg_994, select_ln81_2_reg_1078, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_h_0_phi_fu_164_p4 <= select_ln81_2_reg_1078;
        else 
            ap_phi_mux_h_0_phi_fu_164_p4 <= h_0_reg_160;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_211_p4_assign_proc : process(i_0_reg_207, ap_CS_fsm_pp0_stage0, icmp_ln80_reg_994, select_ln83_4_reg_1106, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_phi_fu_211_p4 <= select_ln83_4_reg_1106;
        else 
            ap_phi_mux_i_0_phi_fu_211_p4 <= i_0_reg_207;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten117_phi_fu_129_p4_assign_proc : process(indvar_flatten117_reg_125, ap_CS_fsm_pp0_stage0, icmp_ln80_reg_994, add_ln80_reg_998, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten117_phi_fu_129_p4 <= add_ln80_reg_998;
        else 
            ap_phi_mux_indvar_flatten117_phi_fu_129_p4 <= indvar_flatten117_reg_125;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten24_phi_fu_175_p4_assign_proc : process(indvar_flatten24_reg_171, ap_CS_fsm_pp0_stage0, icmp_ln80_reg_994, select_ln82_4_reg_1125, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten24_phi_fu_175_p4 <= select_ln82_4_reg_1125;
        else 
            ap_phi_mux_indvar_flatten24_phi_fu_175_p4 <= indvar_flatten24_reg_171;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten63_phi_fu_152_p4_assign_proc : process(indvar_flatten63_reg_148, ap_CS_fsm_pp0_stage0, icmp_ln80_reg_994, select_ln81_5_reg_1130, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten63_phi_fu_152_p4 <= select_ln81_5_reg_1130;
        else 
            ap_phi_mux_indvar_flatten63_phi_fu_152_p4 <= indvar_flatten63_reg_148;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_199_p4_assign_proc : process(indvar_flatten_reg_195, ap_CS_fsm_pp0_stage0, icmp_ln80_reg_994, select_ln83_5_reg_1120, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln80_reg_994 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_199_p4 <= select_ln83_5_reg_1120;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_199_p4 <= indvar_flatten_reg_195;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_223_p4_assign_proc : process(j_0_reg_219, icmp_ln80_reg_994_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, j_reg_1150, ap_block_pp0_stage1)
    begin
        if (((icmp_ln80_reg_994_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_j_0_phi_fu_223_p4 <= j_reg_1150;
        else 
            ap_phi_mux_j_0_phi_fu_223_p4 <= j_0_reg_219;
        end if; 
    end process;


    ap_phi_mux_w_0_phi_fu_187_p4_assign_proc : process(w_0_reg_183, icmp_ln80_reg_994_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, select_ln82_2_reg_1135, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln80_reg_994_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_w_0_phi_fu_187_p4 <= select_ln82_2_reg_1135;
        else 
            ap_phi_mux_w_0_phi_fu_187_p4 <= w_0_reg_183;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln5_fu_930_p1 <= max_value_1_reg_1169_pp0_iter3_reg;
    bitcast_ln89_1_fu_854_p1 <= input_load_reg_1162;
    bitcast_ln89_fu_837_p1 <= max_value_reg_1155;
    c_fu_355_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_c_0_phi_fu_140_p4));

    grp_fu_231_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, max_value_fu_828_p3, max_value_1_reg_1169, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_231_p0 <= max_value_1_reg_1169;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_231_p0 <= max_value_fu_828_p3;
        else 
            grp_fu_231_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_231_p1_assign_proc : process(input_r_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_231_p1 <= ap_const_lv32_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_231_p1 <= input_r_q0;
        else 
            grp_fu_231_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_fu_311_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln89_fu_273_p3));
    i_fu_561_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln82_reg_1059));
    icmp_ln5_1_fu_953_p2 <= "1" when (trunc_ln5_fu_943_p1 = ap_const_lv23_0) else "0";
    icmp_ln5_fu_947_p2 <= "0" when (tmp_4_fu_933_p4 = ap_const_lv8_FF) else "1";
    icmp_ln80_fu_255_p2 <= "1" when (ap_phi_mux_indvar_flatten117_phi_fu_129_p4 = ap_const_lv11_640) else "0";
    icmp_ln81_fu_267_p2 <= "1" when (ap_phi_mux_indvar_flatten63_phi_fu_152_p4 = ap_const_lv8_64) else "0";
    icmp_ln82_fu_299_p2 <= "1" when (ap_phi_mux_indvar_flatten24_phi_fu_175_p4 = ap_const_lv6_14) else "0";
    icmp_ln83_fu_287_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_199_p4 = ap_const_lv4_4) else "0";
    icmp_ln84_fu_430_p2 <= "1" when (ap_phi_mux_j_0_phi_fu_223_p4 = ap_const_lv2_2) else "0";
    icmp_ln89_1_fu_877_p2 <= "1" when (trunc_ln89_fu_850_p1 = ap_const_lv23_0) else "0";
    icmp_ln89_2_fu_889_p2 <= "0" when (tmp_2_fu_857_p4 = ap_const_lv8_FF) else "1";
    icmp_ln89_3_fu_895_p2 <= "1" when (trunc_ln89_1_fu_867_p1 = ap_const_lv23_0) else "0";
    icmp_ln89_fu_871_p2 <= "0" when (tmp_fu_840_p4 = ap_const_lv8_FF) else "1";
    icmp_ln92_1_fu_655_p2 <= "1" when (select_ln83_fu_577_p3 = ap_const_lv2_1) else "0";
    icmp_ln92_2_fu_625_p2 <= "1" when (select_ln82_reg_1059 = ap_const_lv2_0) else "0";
    icmp_ln92_fu_419_p2 <= "1" when (i_0_reg_207 = ap_const_lv2_1) else "0";
    input_r_address0 <= zext_ln89_5_fu_807_p1(11 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_812_p2 <= std_logic_vector(unsigned(select_ln83_reg_1089) + unsigned(ap_const_lv2_1));
    max_value_1_fu_919_p3 <= 
        max_value_reg_1155 when (and_ln89_1_fu_913_p2(0) = '1') else 
        input_load_reg_1162;
    max_value_fu_828_p3 <= 
        max_value_4_fu_96 when (or_ln86_fu_823_p2(0) = '1') else 
        ap_const_lv32_D368D4A5;
    or_ln5_fu_959_p2 <= (icmp_ln5_fu_947_p2 or icmp_ln5_1_fu_953_p2);
    or_ln81_1_fu_323_p2 <= (xor_ln81_fu_317_p2 or icmp_ln81_fu_267_p2);
    or_ln81_fu_441_p2 <= (icmp_ln81_reg_1003 or and_ln89_6_reg_1024);
    or_ln82_1_fu_341_p2 <= (or_ln82_fu_335_p2 or icmp_ln81_fu_267_p2);
    or_ln82_fu_335_p2 <= (and_ln89_6_fu_305_p2 or and_ln81_3_fu_329_p2);
    or_ln83_1_fu_571_p2 <= (or_ln83_fu_566_p2 or or_ln81_fu_441_p2);
    or_ln83_fu_566_p2 <= (and_ln82_2_fu_555_p2 or and_ln81_3_reg_1045);
    or_ln86_fu_823_p2 <= (trunc_ln84_fu_820_p1 or select_ln83_1_reg_1095);
    or_ln89_1_fu_901_p2 <= (icmp_ln89_3_fu_895_p2 or icmp_ln89_2_fu_889_p2);
    or_ln89_fu_883_p2 <= (icmp_ln89_fu_871_p2 or icmp_ln89_1_fu_877_p2);
    output_r_address0 <= output_addr_reg_1140_pp0_iter3_reg;

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= select_ln5_reg_1176;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, and_ln92_reg_1116_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln92_reg_1116_pp0_iter3_reg))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl1_cast_fu_740_p3 <= (add_ln93_1_fu_730_p2 & ap_const_lv2_0);
    p_shl_cast_fu_774_p3 <= (add_ln89_1_reg_1100 & ap_const_lv3_0);
    select_ln5_fu_971_p3 <= 
        max_value_1_reg_1169_pp0_iter3_reg when (and_ln5_fu_965_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln81_1_fu_460_p3 <= 
        shl_ln88_mid1_fu_453_p3 when (and_ln89_6_reg_1024(0) = '1') else 
        select_ln89_2_fu_398_p3;
    select_ln81_2_fu_467_p3 <= 
        h_reg_1032 when (and_ln89_6_reg_1024(0) = '1') else 
        select_ln89_reg_1012;
    select_ln81_3_fu_480_p3 <= 
        ap_const_lv4_0 when (or_ln81_fu_441_p2(0) = '1') else 
        shl_ln88_s_fu_472_p3;
    select_ln81_4_fu_493_p3 <= 
        shl_ln88_mid1_fu_453_p3 when (and_ln89_6_reg_1024(0) = '1') else 
        select_ln89_3_fu_413_p3;
    select_ln81_5_fu_700_p3 <= 
        ap_const_lv8_1 when (icmp_ln81_reg_1003(0) = '1') else 
        add_ln81_1_fu_694_p2;
    select_ln81_fu_445_p3 <= 
        ap_const_lv3_0 when (or_ln81_fu_441_p2(0) = '1') else 
        ap_phi_mux_w_0_phi_fu_187_p4;
    select_ln82_1_fu_524_p3 <= 
        shl_ln88_1_mid1_fu_516_p3 when (and_ln81_3_reg_1045(0) = '1') else 
        select_ln81_3_fu_480_p3;
    select_ln82_2_fu_754_p3 <= 
        w_reg_1084 when (and_ln81_3_reg_1045(0) = '1') else 
        select_ln81_reg_1073;
    select_ln82_3_fu_542_p3 <= 
        select_ln81_1_fu_460_p3 when (and_ln81_3_reg_1045(0) = '1') else 
        select_ln81_4_fu_493_p3;
    select_ln82_4_fu_686_p3 <= 
        ap_const_lv6_1 when (or_ln81_fu_441_p2(0) = '1') else 
        add_ln82_1_fu_680_p2;
    select_ln82_fu_347_p3 <= 
        ap_const_lv2_0 when (or_ln82_1_fu_341_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_211_p4;
    select_ln83_1_fu_589_p3 <= 
        trunc_ln83_1_fu_585_p1 when (and_ln82_2_fu_555_p2(0) = '1') else 
        and_ln82_fu_536_p2;
    select_ln83_2_fu_607_p3 <= 
        add_ln88_2_fu_601_p2 when (and_ln82_2_fu_555_p2(0) = '1') else 
        select_ln82_3_fu_542_p3;
    select_ln83_3_fu_630_p3 <= 
        icmp_ln92_2_fu_625_p2 when (and_ln82_2_fu_555_p2(0) = '1') else 
        and_ln82_1_fu_549_p2;
    select_ln83_4_fu_638_p3 <= 
        i_fu_561_p2 when (and_ln82_2_fu_555_p2(0) = '1') else 
        select_ln82_reg_1059;
    select_ln83_5_fu_673_p3 <= 
        ap_const_lv4_1 when (or_ln82_1_reg_1054(0) = '1') else 
        add_ln83_1_fu_667_p2;
    select_ln83_fu_577_p3 <= 
        ap_const_lv2_0 when (or_ln83_1_fu_571_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_223_p4;
    select_ln89_1_fu_361_p3 <= 
        c_fu_355_p2 when (icmp_ln81_reg_1003(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_140_p4;
    select_ln89_2_fu_398_p3 <= 
        ap_const_lv4_0 when (icmp_ln81_reg_1003(0) = '1') else 
        shl_ln_reg_984;
    select_ln89_3_fu_413_p3 <= 
        ap_const_lv4_0 when (icmp_ln81_reg_1003(0) = '1') else 
        add_ln88_reg_989;
    select_ln89_fu_273_p3 <= 
        ap_const_lv3_0 when (icmp_ln81_fu_267_p2(0) = '1') else 
        ap_phi_mux_h_0_phi_fu_164_p4;
    shl_ln88_1_mid1_fu_516_p3 <= (w_fu_510_p2 & ap_const_lv1_0);
    shl_ln88_mid1_fu_453_p3 <= (h_reg_1032 & ap_const_lv1_0);
    shl_ln88_s_fu_472_p3 <= (ap_phi_mux_w_0_phi_fu_187_p4 & ap_const_lv1_0);
    shl_ln_fu_237_p3 <= (ap_phi_mux_h_0_phi_fu_164_p4 & ap_const_lv1_0);
    tmp_2_fu_857_p4 <= bitcast_ln89_1_fu_854_p1(30 downto 23);
    tmp_4_fu_933_p4 <= bitcast_ln5_fu_930_p1(30 downto 23);
    tmp_6_fu_368_p3 <= (select_ln89_1_fu_361_p3 & ap_const_lv3_0);
    tmp_7_fu_380_p3 <= (select_ln89_1_fu_361_p3 & ap_const_lv1_0);
    tmp_8_fu_710_p3 <= (select_ln89_1_reg_1066 & ap_const_lv2_0);
    tmp_9_fu_781_p3 <= (add_ln89_1_reg_1100 & ap_const_lv1_0);
    tmp_fu_840_p4 <= bitcast_ln89_fu_837_p1(30 downto 23);
    trunc_ln5_fu_943_p1 <= bitcast_ln5_fu_930_p1(23 - 1 downto 0);
    trunc_ln83_1_fu_585_p1 <= i_fu_561_p2(1 - 1 downto 0);
    trunc_ln83_fu_404_p1 <= i_0_reg_207(1 - 1 downto 0);
    trunc_ln84_fu_820_p1 <= select_ln83_reg_1089(1 - 1 downto 0);
    trunc_ln89_1_fu_867_p1 <= bitcast_ln89_1_fu_854_p1(23 - 1 downto 0);
    trunc_ln89_fu_850_p1 <= bitcast_ln89_fu_837_p1(23 - 1 downto 0);
    w_fu_510_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln81_fu_445_p3));
    xor_ln81_fu_317_p2 <= (icmp_ln82_fu_299_p2 xor ap_const_lv1_1);
    xor_ln82_fu_531_p2 <= (ap_const_lv1_1 xor and_ln81_3_reg_1045);
    xor_ln89_fu_281_p2 <= (icmp_ln81_fu_267_p2 xor ap_const_lv1_1);
    zext_ln81_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln81_2_reg_1078),8));
    zext_ln82_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln82_2_fu_754_p3),10));
    zext_ln83_1_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_561_p2),4));
    zext_ln83_2_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_2_fu_607_p3),9));
    zext_ln83_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_211_p4),4));
    zext_ln84_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_fu_577_p3),4));
    zext_ln89_1_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_368_p3),9));
    zext_ln89_2_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_380_p3),9));
    zext_ln89_3_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_781_p3),12));
    zext_ln89_4_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln88_1_reg_1111),12));
    zext_ln89_5_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln89_3_fu_801_p2),64));
    zext_ln89_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln89_1_reg_1066),8));
    zext_ln93_1_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln93_1_fu_730_p2),10));
    zext_ln93_2_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln93_3_fu_763_p2),64));
    zext_ln93_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_710_p3),8));
end behav;
