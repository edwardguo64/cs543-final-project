-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pooling2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pooling2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_1260 : STD_LOGIC_VECTOR (12 downto 0) := "1001001100000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv7_38 : STD_LOGIC_VECTOR (6 downto 0) := "0111000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_D368D4A5 : STD_LOGIC_VECTOR (31 downto 0) := "11010011011010001101010010100101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten117_reg_127 : STD_LOGIC_VECTOR (12 downto 0);
    signal c_0_reg_138 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten63_reg_150 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_0_reg_162 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten24_reg_173 : STD_LOGIC_VECTOR (6 downto 0);
    signal w_0_reg_185 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_197 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_0_reg_209 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_0_reg_220 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_237_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_1021 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln40_fu_249_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_reg_1026 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln32_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1031 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1031_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln32_fu_261_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln32_reg_1035 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal c_fu_267_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_1040 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln33_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_1045 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_fu_279_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln41_reg_1053 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln41_6_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_6_reg_1058 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_fu_351_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal h_reg_1065 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln33_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_reg_1071 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_3_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_3_reg_1078 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_1_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_1_reg_1085 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_411_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_reg_1090 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln34_2_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_2_reg_1095 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_443_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_1101 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln35_fu_461_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln35_reg_1107 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln35_reg_1107_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln35_1_fu_473_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_1_reg_1114 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_1_reg_1114_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_reg_1119 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_reg_1119_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_reg_1119_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_reg_1119_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_1_fu_507_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln41_1_reg_1123 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln33_fu_559_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln33_reg_1130 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln33_2_fu_580_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln33_2_reg_1135 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_fu_607_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_reg_1141 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_4_fu_691_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln35_4_reg_1146 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln41_1_fu_709_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln41_1_reg_1151 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_fu_715_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_1156 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln35_5_fu_726_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_5_reg_1161 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln34_4_fu_739_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln34_4_reg_1166 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln33_5_fu_752_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln33_5_reg_1171 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln34_2_fu_830_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln34_2_reg_1176 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal output_addr_reg_1181 : STD_LOGIC_VECTOR (10 downto 0);
    signal output_addr_reg_1181_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal output_addr_reg_1181_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal max_value_fu_865_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_value_reg_1191 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_reg_1198 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_value_2_fu_956_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_value_2_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_value_2_reg_1205_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln5_fu_1008_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln5_reg_1212 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten117_phi_fu_131_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_c_0_phi_fu_142_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten63_phi_fu_154_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_h_0_phi_fu_166_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten24_phi_fu_177_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_w_0_phi_fu_189_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_201_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i_0_phi_fu_213_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_j_0_phi_fu_224_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln45_2_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln41_3_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_value_4_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_231_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_231_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_fu_245_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln35_fu_293_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln41_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln35_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln33_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_2_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln33_1_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_3_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_4_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_5_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln34_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_1_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_2_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_1_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln35_1_fu_469_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_2_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_1_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_3_fu_487_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_1_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_513_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_525_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln41_fu_521_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln41_1_fu_533_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln41_fu_537_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln40_mid1_fu_566_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln41_2_fu_547_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln40_s_fu_585_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln41_3_fu_553_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln40_1_mid1_fu_613_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln33_3_fu_593_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln33_1_fu_573_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln33_4_fu_600_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_1_fu_635_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_2_fu_638_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln34_3_fu_628_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_2_fu_644_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln41_fu_543_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln35_2_fu_651_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln41_fu_655_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln41_fu_661_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_673_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_fu_665_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln41_1_fu_681_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln36_fu_696_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln34_1_fu_621_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln40_1_fu_699_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln41_1_fu_685_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln41_2_fu_705_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_1_fu_720_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_1_fu_733_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln33_1_fu_746_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_759_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_4_fu_770_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln45_fu_766_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_1_fu_777_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln45_fu_781_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln45_fu_787_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln33_fu_791_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln45_fu_794_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln45_fu_800_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_812_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast_fu_804_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln45_1_fu_820_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln45_1_fu_824_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln34_fu_835_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln45_1_fu_839_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln36_fu_857_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln41_fu_874_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln41_1_fu_891_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_877_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln41_1_fu_887_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln41_1_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_894_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln41_2_fu_904_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln41_3_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_2_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln41_1_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln41_1_fu_950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln5_fu_967_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_970_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln5_fu_980_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln5_2_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln5_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln5_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component lenet_cnn_fcmp_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    lenet_cnn_fcmp_32dEe_U12 : component lenet_cnn_fcmp_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_231_p0,
        din1 => grp_fu_231_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_231_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_138 <= select_ln41_1_reg_1123;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_138 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    h_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                h_0_reg_162 <= select_ln33_2_reg_1135;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h_0_reg_162 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                i_0_reg_209 <= select_ln35_4_reg_1146;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_209 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten117_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten117_reg_127 <= add_ln32_reg_1035;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten117_reg_127 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten24_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten24_reg_173 <= select_ln34_4_reg_1166;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten24_reg_173 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten63_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten63_reg_150 <= select_ln33_5_reg_1171;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten63_reg_150 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_197 <= select_ln35_5_reg_1161;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_197 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_0_reg_220 <= j_reg_1156;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_220 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    w_0_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                w_0_reg_185 <= select_ln34_2_reg_1176;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w_0_reg_185 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln32_reg_1035 <= add_ln32_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln40_reg_1026 <= add_ln40_fu_249_p2;
                and_ln44_reg_1119_pp0_iter1_reg <= and_ln44_reg_1119;
                and_ln44_reg_1119_pp0_iter2_reg <= and_ln44_reg_1119_pp0_iter1_reg;
                and_ln44_reg_1119_pp0_iter3_reg <= and_ln44_reg_1119_pp0_iter2_reg;
                icmp_ln32_reg_1031 <= icmp_ln32_fu_255_p2;
                icmp_ln32_reg_1031_pp0_iter1_reg <= icmp_ln32_reg_1031;
                max_value_2_reg_1205_pp0_iter3_reg <= max_value_2_reg_1205;
                output_addr_reg_1181_pp0_iter2_reg <= output_addr_reg_1181;
                output_addr_reg_1181_pp0_iter3_reg <= output_addr_reg_1181_pp0_iter2_reg;
                select_ln35_1_reg_1114_pp0_iter1_reg <= select_ln35_1_reg_1114;
                select_ln35_reg_1107_pp0_iter1_reg <= select_ln35_reg_1107;
                    shl_ln_reg_1021(4 downto 1) <= shl_ln_fu_237_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln41_1_reg_1151 <= add_ln41_1_fu_709_p2;
                select_ln33_reg_1130 <= select_ln33_fu_559_p3;
                w_reg_1141 <= w_fu_607_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_255_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln33_3_reg_1078 <= and_ln33_3_fu_393_p2;
                and_ln34_2_reg_1095 <= and_ln34_2_fu_437_p2;
                and_ln41_6_reg_1058 <= and_ln41_6_fu_345_p2;
                and_ln44_reg_1119 <= and_ln44_fu_501_p2;
                c_reg_1040 <= c_fu_267_p2;
                h_reg_1065 <= h_fu_351_p2;
                i_reg_1101 <= i_fu_443_p2;
                icmp_ln33_reg_1045 <= icmp_ln33_fu_273_p2;
                or_ln33_reg_1071 <= or_ln33_fu_357_p2;
                or_ln34_1_reg_1085 <= or_ln34_1_fu_405_p2;
                select_ln34_reg_1090 <= select_ln34_fu_411_p3;
                select_ln35_1_reg_1114 <= select_ln35_1_fu_473_p3;
                select_ln35_reg_1107 <= select_ln35_fu_461_p3;
                select_ln41_reg_1053 <= select_ln41_fu_279_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                input_load_reg_1198 <= input_r_q0;
                max_value_reg_1191 <= max_value_fu_865_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                j_reg_1156 <= j_fu_715_p2;
                select_ln33_2_reg_1135 <= select_ln33_2_fu_580_p3;
                select_ln33_5_reg_1171 <= select_ln33_5_fu_752_p3;
                select_ln34_4_reg_1166 <= select_ln34_4_fu_739_p3;
                select_ln35_4_reg_1146 <= select_ln35_4_fu_691_p3;
                select_ln35_5_reg_1161 <= select_ln35_5_fu_726_p3;
                select_ln41_1_reg_1123 <= select_ln41_1_fu_507_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                max_value_2_reg_1205 <= max_value_2_fu_956_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                max_value_4_fu_98 <= max_value_2_fu_956_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                output_addr_reg_1181 <= zext_ln45_2_fu_845_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                select_ln34_2_reg_1176 <= select_ln34_2_fu_830_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln44_reg_1119_pp0_iter3_reg))) then
                select_ln5_reg_1212 <= select_ln5_fu_1008_p3;
            end if;
        end if;
    end process;
    shl_ln_reg_1021(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, icmp_ln32_fu_255_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln32_fu_255_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((icmp_ln32_fu_255_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln32_fu_261_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten117_phi_fu_131_p4) + unsigned(ap_const_lv13_1));
    add_ln33_1_fu_746_p2 <= std_logic_vector(unsigned(indvar_flatten63_reg_150) + unsigned(ap_const_lv10_1));
    add_ln34_1_fu_733_p2 <= std_logic_vector(unsigned(indvar_flatten24_reg_173) + unsigned(ap_const_lv7_1));
    add_ln35_1_fu_720_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_197) + unsigned(ap_const_lv4_1));
    add_ln40_1_fu_699_p2 <= std_logic_vector(unsigned(zext_ln36_fu_696_p1) + unsigned(select_ln34_1_fu_621_p3));
    add_ln40_2_fu_638_p2 <= std_logic_vector(unsigned(zext_ln35_1_fu_635_p1) + unsigned(select_ln33_1_fu_573_p3));
    add_ln40_fu_249_p2 <= std_logic_vector(unsigned(shl_ln_fu_237_p3) + unsigned(zext_ln35_fu_245_p1));
    add_ln41_1_fu_709_p2 <= std_logic_vector(unsigned(sub_ln41_1_fu_685_p2) + unsigned(zext_ln41_2_fu_705_p1));
    add_ln41_fu_655_p2 <= std_logic_vector(signed(sext_ln41_fu_543_p1) + signed(zext_ln35_2_fu_651_p1));
    add_ln45_1_fu_839_p2 <= std_logic_vector(unsigned(sub_ln45_1_fu_824_p2) + unsigned(zext_ln34_fu_835_p1));
    add_ln45_fu_794_p2 <= std_logic_vector(signed(sext_ln45_fu_787_p1) + signed(zext_ln33_fu_791_p1));
    and_ln33_1_fu_381_p2 <= (or_ln33_1_fu_369_p2 and and_ln41_3_fu_309_p2);
    and_ln33_2_fu_387_p2 <= (or_ln33_1_fu_369_p2 and and_ln41_4_fu_321_p2);
    and_ln33_3_fu_393_p2 <= (or_ln33_1_fu_369_p2 and and_ln41_5_fu_333_p2);
    and_ln33_fu_375_p2 <= (or_ln33_1_fu_369_p2 and and_ln41_2_fu_297_p2);
    and_ln34_1_fu_431_p2 <= (xor_ln34_fu_419_p2 and and_ln33_1_fu_381_p2);
    and_ln34_2_fu_437_p2 <= (xor_ln34_fu_419_p2 and and_ln33_2_fu_387_p2);
    and_ln34_fu_425_p2 <= (xor_ln34_fu_419_p2 and and_ln33_fu_375_p2);
    and_ln41_1_fu_950_p2 <= (grp_fu_231_p2 and and_ln41_fu_944_p2);
    and_ln41_2_fu_297_p2 <= (xor_ln41_fu_287_p2 and trunc_ln35_fu_293_p1);
    and_ln41_3_fu_309_p2 <= (xor_ln41_fu_287_p2 and icmp_ln44_fu_303_p2);
    and_ln41_4_fu_321_p2 <= (xor_ln41_fu_287_p2 and icmp_ln36_fu_315_p2);
    and_ln41_5_fu_333_p2 <= (xor_ln41_fu_287_p2 and icmp_ln35_fu_327_p2);
    and_ln41_6_fu_345_p2 <= (xor_ln41_fu_287_p2 and icmp_ln34_fu_339_p2);
    and_ln41_fu_944_p2 <= (or_ln41_fu_920_p2 and or_ln41_1_fu_938_p2);
    and_ln44_fu_501_p2 <= (select_ln35_3_fu_487_p3 and icmp_ln44_1_fu_495_p2);
    and_ln5_fu_1002_p2 <= (or_ln5_fu_996_p2 and grp_fu_231_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln32_fu_255_p2)
    begin
        if ((icmp_ln32_fu_255_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_142_p4_assign_proc : process(c_0_reg_138, ap_CS_fsm_pp0_stage0, icmp_ln32_reg_1031, select_ln41_1_reg_1123, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_c_0_phi_fu_142_p4 <= select_ln41_1_reg_1123;
        else 
            ap_phi_mux_c_0_phi_fu_142_p4 <= c_0_reg_138;
        end if; 
    end process;


    ap_phi_mux_h_0_phi_fu_166_p4_assign_proc : process(h_0_reg_162, ap_CS_fsm_pp0_stage0, icmp_ln32_reg_1031, select_ln33_2_reg_1135, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_h_0_phi_fu_166_p4 <= select_ln33_2_reg_1135;
        else 
            ap_phi_mux_h_0_phi_fu_166_p4 <= h_0_reg_162;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_213_p4_assign_proc : process(i_0_reg_209, ap_CS_fsm_pp0_stage0, icmp_ln32_reg_1031, select_ln35_4_reg_1146, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_phi_fu_213_p4 <= select_ln35_4_reg_1146;
        else 
            ap_phi_mux_i_0_phi_fu_213_p4 <= i_0_reg_209;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten117_phi_fu_131_p4_assign_proc : process(indvar_flatten117_reg_127, ap_CS_fsm_pp0_stage0, icmp_ln32_reg_1031, add_ln32_reg_1035, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten117_phi_fu_131_p4 <= add_ln32_reg_1035;
        else 
            ap_phi_mux_indvar_flatten117_phi_fu_131_p4 <= indvar_flatten117_reg_127;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten24_phi_fu_177_p4_assign_proc : process(indvar_flatten24_reg_173, ap_CS_fsm_pp0_stage0, icmp_ln32_reg_1031, select_ln34_4_reg_1166, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten24_phi_fu_177_p4 <= select_ln34_4_reg_1166;
        else 
            ap_phi_mux_indvar_flatten24_phi_fu_177_p4 <= indvar_flatten24_reg_173;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten63_phi_fu_154_p4_assign_proc : process(indvar_flatten63_reg_150, ap_CS_fsm_pp0_stage0, icmp_ln32_reg_1031, select_ln33_5_reg_1171, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten63_phi_fu_154_p4 <= select_ln33_5_reg_1171;
        else 
            ap_phi_mux_indvar_flatten63_phi_fu_154_p4 <= indvar_flatten63_reg_150;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_201_p4_assign_proc : process(indvar_flatten_reg_197, ap_CS_fsm_pp0_stage0, icmp_ln32_reg_1031, select_ln35_5_reg_1161, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_201_p4 <= select_ln35_5_reg_1161;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_201_p4 <= indvar_flatten_reg_197;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_224_p4_assign_proc : process(j_0_reg_220, ap_CS_fsm_pp0_stage0, icmp_ln32_reg_1031, j_reg_1156, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln32_reg_1031 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_j_0_phi_fu_224_p4 <= j_reg_1156;
        else 
            ap_phi_mux_j_0_phi_fu_224_p4 <= j_0_reg_220;
        end if; 
    end process;


    ap_phi_mux_w_0_phi_fu_189_p4_assign_proc : process(w_0_reg_185, icmp_ln32_reg_1031_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, select_ln34_2_reg_1176, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln32_reg_1031_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_w_0_phi_fu_189_p4 <= select_ln34_2_reg_1176;
        else 
            ap_phi_mux_w_0_phi_fu_189_p4 <= w_0_reg_185;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln41_1_fu_891_p1 <= input_load_reg_1198;
    bitcast_ln41_fu_874_p1 <= max_value_reg_1191;
    bitcast_ln5_fu_967_p1 <= max_value_2_reg_1205_pp0_iter3_reg;
    c_fu_267_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_c_0_phi_fu_142_p4));

    grp_fu_231_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, max_value_fu_865_p3, max_value_2_reg_1205, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_231_p0 <= max_value_2_reg_1205;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_231_p0 <= max_value_fu_865_p3;
        else 
            grp_fu_231_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_231_p1_assign_proc : process(input_r_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_231_p1 <= ap_const_lv32_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_231_p1 <= input_r_q0;
        else 
            grp_fu_231_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    h_fu_351_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln41_fu_279_p3));
    i_fu_443_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln34_fu_411_p3));
    icmp_ln32_fu_255_p2 <= "1" when (ap_phi_mux_indvar_flatten117_phi_fu_131_p4 = ap_const_lv13_1260) else "0";
    icmp_ln33_fu_273_p2 <= "1" when (ap_phi_mux_indvar_flatten63_phi_fu_154_p4 = ap_const_lv10_310) else "0";
    icmp_ln34_fu_339_p2 <= "1" when (ap_phi_mux_indvar_flatten24_phi_fu_177_p4 = ap_const_lv7_38) else "0";
    icmp_ln35_fu_327_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_201_p4 = ap_const_lv4_4) else "0";
    icmp_ln36_fu_315_p2 <= "1" when (ap_phi_mux_j_0_phi_fu_224_p4 = ap_const_lv2_2) else "0";
    icmp_ln41_1_fu_914_p2 <= "1" when (trunc_ln41_1_fu_887_p1 = ap_const_lv23_0) else "0";
    icmp_ln41_2_fu_926_p2 <= "0" when (tmp_6_fu_894_p4 = ap_const_lv8_FF) else "1";
    icmp_ln41_3_fu_932_p2 <= "1" when (trunc_ln41_2_fu_904_p1 = ap_const_lv23_0) else "0";
    icmp_ln41_fu_908_p2 <= "0" when (tmp_fu_877_p4 = ap_const_lv8_FF) else "1";
    icmp_ln44_1_fu_495_p2 <= "1" when (select_ln35_fu_461_p3 = ap_const_lv2_1) else "0";
    icmp_ln44_2_fu_481_p2 <= "1" when (select_ln34_fu_411_p3 = ap_const_lv2_0) else "0";
    icmp_ln44_fu_303_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_213_p4 = ap_const_lv2_1) else "0";
    icmp_ln5_2_fu_990_p2 <= "1" when (trunc_ln5_fu_980_p1 = ap_const_lv23_0) else "0";
    icmp_ln5_fu_984_p2 <= "0" when (tmp_8_fu_970_p4 = ap_const_lv8_FF) else "1";
    input_r_address0 <= zext_ln41_3_fu_850_p1(13 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_715_p2 <= std_logic_vector(unsigned(select_ln35_reg_1107) + unsigned(ap_const_lv2_1));
    max_value_2_fu_956_p3 <= 
        max_value_reg_1191 when (and_ln41_1_fu_950_p2(0) = '1') else 
        input_load_reg_1198;
    max_value_fu_865_p3 <= 
        max_value_4_fu_98 when (or_ln38_fu_860_p2(0) = '1') else 
        ap_const_lv32_D368D4A5;
    or_ln33_1_fu_369_p2 <= (xor_ln33_fu_363_p2 or icmp_ln33_fu_273_p2);
    or_ln33_fu_357_p2 <= (icmp_ln33_fu_273_p2 or and_ln41_6_fu_345_p2);
    or_ln34_1_fu_405_p2 <= (or_ln34_fu_399_p2 or icmp_ln33_fu_273_p2);
    or_ln34_fu_399_p2 <= (and_ln41_6_fu_345_p2 or and_ln33_3_fu_393_p2);
    or_ln35_1_fu_455_p2 <= (or_ln35_fu_449_p2 or or_ln33_fu_357_p2);
    or_ln35_fu_449_p2 <= (and_ln34_2_fu_437_p2 or and_ln33_3_fu_393_p2);
    or_ln38_fu_860_p2 <= (trunc_ln36_fu_857_p1 or select_ln35_1_reg_1114_pp0_iter1_reg);
    or_ln41_1_fu_938_p2 <= (icmp_ln41_3_fu_932_p2 or icmp_ln41_2_fu_926_p2);
    or_ln41_fu_920_p2 <= (icmp_ln41_fu_908_p2 or icmp_ln41_1_fu_914_p2);
    or_ln5_fu_996_p2 <= (icmp_ln5_fu_984_p2 or icmp_ln5_2_fu_990_p2);
    output_r_address0 <= output_addr_reg_1181_pp0_iter3_reg;

    output_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= select_ln5_reg_1212;

    output_r_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, and_ln44_reg_1119_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_lv1_1 = and_ln44_reg_1119_pp0_iter3_reg))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl3_cast_fu_804_p3 <= (trunc_ln45_fu_800_p1 & ap_const_lv4_0);
    p_shl_cast_fu_665_p3 <= (trunc_ln41_fu_661_p1 & ap_const_lv5_0);
    select_ln33_1_fu_573_p3 <= 
        shl_ln40_mid1_fu_566_p3 when (and_ln41_6_reg_1058(0) = '1') else 
        select_ln41_2_fu_547_p3;
    select_ln33_2_fu_580_p3 <= 
        h_reg_1065 when (and_ln41_6_reg_1058(0) = '1') else 
        select_ln41_reg_1053;
    select_ln33_3_fu_593_p3 <= 
        ap_const_lv5_0 when (or_ln33_reg_1071(0) = '1') else 
        shl_ln40_s_fu_585_p3;
    select_ln33_4_fu_600_p3 <= 
        shl_ln40_mid1_fu_566_p3 when (and_ln41_6_reg_1058(0) = '1') else 
        select_ln41_3_fu_553_p3;
    select_ln33_5_fu_752_p3 <= 
        ap_const_lv10_1 when (icmp_ln33_reg_1045(0) = '1') else 
        add_ln33_1_fu_746_p2;
    select_ln33_fu_559_p3 <= 
        ap_const_lv4_0 when (or_ln33_reg_1071(0) = '1') else 
        ap_phi_mux_w_0_phi_fu_189_p4;
    select_ln34_1_fu_621_p3 <= 
        shl_ln40_1_mid1_fu_613_p3 when (and_ln33_3_reg_1078(0) = '1') else 
        select_ln33_3_fu_593_p3;
    select_ln34_2_fu_830_p3 <= 
        w_reg_1141 when (and_ln33_3_reg_1078(0) = '1') else 
        select_ln33_reg_1130;
    select_ln34_3_fu_628_p3 <= 
        select_ln33_1_fu_573_p3 when (and_ln33_3_reg_1078(0) = '1') else 
        select_ln33_4_fu_600_p3;
    select_ln34_4_fu_739_p3 <= 
        ap_const_lv7_1 when (or_ln33_reg_1071(0) = '1') else 
        add_ln34_1_fu_733_p2;
    select_ln34_fu_411_p3 <= 
        ap_const_lv2_0 when (or_ln34_1_fu_405_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_213_p4;
    select_ln35_1_fu_473_p3 <= 
        trunc_ln35_1_fu_469_p1 when (and_ln34_2_fu_437_p2(0) = '1') else 
        and_ln34_fu_425_p2;
    select_ln35_2_fu_644_p3 <= 
        add_ln40_2_fu_638_p2 when (and_ln34_2_reg_1095(0) = '1') else 
        select_ln34_3_fu_628_p3;
    select_ln35_3_fu_487_p3 <= 
        icmp_ln44_2_fu_481_p2 when (and_ln34_2_fu_437_p2(0) = '1') else 
        and_ln34_1_fu_431_p2;
    select_ln35_4_fu_691_p3 <= 
        i_reg_1101 when (and_ln34_2_reg_1095(0) = '1') else 
        select_ln34_reg_1090;
    select_ln35_5_fu_726_p3 <= 
        ap_const_lv4_1 when (or_ln34_1_reg_1085(0) = '1') else 
        add_ln35_1_fu_720_p2;
    select_ln35_fu_461_p3 <= 
        ap_const_lv2_0 when (or_ln35_1_fu_455_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_224_p4;
    select_ln41_1_fu_507_p3 <= 
        c_reg_1040 when (icmp_ln33_reg_1045(0) = '1') else 
        c_0_reg_138;
    select_ln41_2_fu_547_p3 <= 
        ap_const_lv5_0 when (icmp_ln33_reg_1045(0) = '1') else 
        shl_ln_reg_1021;
    select_ln41_3_fu_553_p3 <= 
        ap_const_lv5_0 when (icmp_ln33_reg_1045(0) = '1') else 
        add_ln40_reg_1026;
    select_ln41_fu_279_p3 <= 
        ap_const_lv4_0 when (icmp_ln33_fu_273_p2(0) = '1') else 
        ap_phi_mux_h_0_phi_fu_166_p4;
    select_ln5_fu_1008_p3 <= 
        max_value_2_reg_1205_pp0_iter3_reg when (and_ln5_fu_1002_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln41_1_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_673_p3),14));

        sext_ln41_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln41_fu_537_p2),10));

        sext_ln45_1_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_812_p3),12));

        sext_ln45_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln45_fu_781_p2),9));

    shl_ln40_1_mid1_fu_613_p3 <= (w_fu_607_p2 & ap_const_lv1_0);
    shl_ln40_mid1_fu_566_p3 <= (h_reg_1065 & ap_const_lv1_0);
    shl_ln40_s_fu_585_p3 <= (ap_phi_mux_w_0_phi_fu_189_p4 & ap_const_lv1_0);
    shl_ln_fu_237_p3 <= (ap_phi_mux_h_0_phi_fu_166_p4 & ap_const_lv1_0);
    sub_ln41_1_fu_685_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_665_p3) - unsigned(sext_ln41_1_fu_681_p1));
    sub_ln41_fu_537_p2 <= std_logic_vector(unsigned(zext_ln41_fu_521_p1) - unsigned(zext_ln41_1_fu_533_p1));
    sub_ln45_1_fu_824_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_804_p3) - unsigned(sext_ln45_1_fu_820_p1));
    sub_ln45_fu_781_p2 <= std_logic_vector(unsigned(zext_ln45_fu_766_p1) - unsigned(zext_ln45_1_fu_777_p1));
    tmp_10_fu_812_p3 <= (add_ln45_fu_794_p2 & ap_const_lv1_0);
    tmp_11_fu_673_p3 <= (add_ln41_fu_655_p2 & ap_const_lv2_0);
    tmp_1_fu_525_p3 <= (select_ln41_1_fu_507_p3 & ap_const_lv2_0);
    tmp_3_fu_759_p3 <= (select_ln41_1_reg_1123 & ap_const_lv4_0);
    tmp_4_fu_770_p3 <= (select_ln41_1_reg_1123 & ap_const_lv1_0);
    tmp_6_fu_894_p4 <= bitcast_ln41_1_fu_891_p1(30 downto 23);
    tmp_8_fu_970_p4 <= bitcast_ln5_fu_967_p1(30 downto 23);
    tmp_fu_877_p4 <= bitcast_ln41_fu_874_p1(30 downto 23);
    tmp_s_fu_513_p3 <= (select_ln41_1_fu_507_p3 & ap_const_lv5_0);
    trunc_ln35_1_fu_469_p1 <= i_fu_443_p2(1 - 1 downto 0);
    trunc_ln35_fu_293_p1 <= ap_phi_mux_i_0_phi_fu_213_p4(1 - 1 downto 0);
    trunc_ln36_fu_857_p1 <= select_ln35_reg_1107_pp0_iter1_reg(1 - 1 downto 0);
    trunc_ln41_1_fu_887_p1 <= bitcast_ln41_fu_874_p1(23 - 1 downto 0);
    trunc_ln41_2_fu_904_p1 <= bitcast_ln41_1_fu_891_p1(23 - 1 downto 0);
    trunc_ln41_fu_661_p1 <= add_ln41_fu_655_p2(9 - 1 downto 0);
    trunc_ln45_fu_800_p1 <= add_ln45_fu_794_p2(8 - 1 downto 0);
    trunc_ln5_fu_980_p1 <= bitcast_ln5_fu_967_p1(23 - 1 downto 0);
    w_fu_607_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln33_fu_559_p3));
    xor_ln33_fu_363_p2 <= (icmp_ln34_fu_339_p2 xor ap_const_lv1_1);
    xor_ln34_fu_419_p2 <= (ap_const_lv1_1 xor and_ln33_3_fu_393_p2);
    xor_ln41_fu_287_p2 <= (icmp_ln33_fu_273_p2 xor ap_const_lv1_1);
    zext_ln33_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln33_2_reg_1135),9));
    zext_ln34_fu_835_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln34_2_fu_830_p3),12));
    zext_ln35_1_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_1101),5));
    zext_ln35_2_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_644_p3),10));
    zext_ln35_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_0_phi_fu_213_p4),5));
    zext_ln36_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_reg_1107),5));
    zext_ln41_1_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_525_p3),9));
    zext_ln41_2_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln40_1_fu_699_p2),14));
    zext_ln41_3_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln41_1_reg_1151),64));
    zext_ln41_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_513_p3),9));
    zext_ln45_1_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_770_p3),8));
    zext_ln45_2_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_1_fu_839_p2),64));
    zext_ln45_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_759_p3),8));
end behav;
