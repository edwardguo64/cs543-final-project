-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet_cnn is
generic (
    C_M_AXI_DATA_IMAGE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_IMAGE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_IMAGE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_IMAGE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_IMAGE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_IMAGE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_IMAGE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_IMAGE_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PARAMETERS_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_PARAMETERS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PARAMETERS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PARAMETERS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_PARAMETERS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PARAMETERS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PARAMETERS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_PARAMETERS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_OUTPUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_FC6_OUTPUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_OUTPUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_OUTPUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_FC6_OUTPUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_OUTPUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_OUTPUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA_FC6_OUTPUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA_IMAGE_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_IMAGE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_IMAGE_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_PARAMETERS_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_PARAMETERS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_PARAMETERS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA_FC6_OUTPUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA_FC6_OUTPUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA_FC6_OUTPUT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_DATA_IMAGE_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_IMAGE_AWREADY : IN STD_LOGIC;
    m_axi_DATA_IMAGE_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_ID_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_IMAGE_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_IMAGE_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_IMAGE_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_IMAGE_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_IMAGE_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_IMAGE_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_IMAGE_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_IMAGE_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_WVALID : OUT STD_LOGIC;
    m_axi_DATA_IMAGE_WREADY : IN STD_LOGIC;
    m_axi_DATA_IMAGE_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_DATA_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_IMAGE_WLAST : OUT STD_LOGIC;
    m_axi_DATA_IMAGE_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_ID_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_IMAGE_ARREADY : IN STD_LOGIC;
    m_axi_DATA_IMAGE_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_ID_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_IMAGE_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_IMAGE_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_IMAGE_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_IMAGE_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_IMAGE_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_IMAGE_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_IMAGE_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_IMAGE_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_RVALID : IN STD_LOGIC;
    m_axi_DATA_IMAGE_RREADY : OUT STD_LOGIC;
    m_axi_DATA_IMAGE_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_DATA_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_RLAST : IN STD_LOGIC;
    m_axi_DATA_IMAGE_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_ID_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_IMAGE_BVALID : IN STD_LOGIC;
    m_axi_DATA_IMAGE_BREADY : OUT STD_LOGIC;
    m_axi_DATA_IMAGE_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_IMAGE_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_ID_WIDTH-1 downto 0);
    m_axi_DATA_IMAGE_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_IMAGE_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_PARAMETERS_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_PARAMETERS_AWREADY : IN STD_LOGIC;
    m_axi_DATA_PARAMETERS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_PARAMETERS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_ID_WIDTH-1 downto 0);
    m_axi_DATA_PARAMETERS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_PARAMETERS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_PARAMETERS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_PARAMETERS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_PARAMETERS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_PARAMETERS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_PARAMETERS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_PARAMETERS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_PARAMETERS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_PARAMETERS_WVALID : OUT STD_LOGIC;
    m_axi_DATA_PARAMETERS_WREADY : IN STD_LOGIC;
    m_axi_DATA_PARAMETERS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_DATA_WIDTH-1 downto 0);
    m_axi_DATA_PARAMETERS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_PARAMETERS_WLAST : OUT STD_LOGIC;
    m_axi_DATA_PARAMETERS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_ID_WIDTH-1 downto 0);
    m_axi_DATA_PARAMETERS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_PARAMETERS_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_PARAMETERS_ARREADY : IN STD_LOGIC;
    m_axi_DATA_PARAMETERS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_PARAMETERS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_ID_WIDTH-1 downto 0);
    m_axi_DATA_PARAMETERS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_PARAMETERS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_PARAMETERS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_PARAMETERS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_PARAMETERS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_PARAMETERS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_PARAMETERS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_PARAMETERS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_PARAMETERS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_PARAMETERS_RVALID : IN STD_LOGIC;
    m_axi_DATA_PARAMETERS_RREADY : OUT STD_LOGIC;
    m_axi_DATA_PARAMETERS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_DATA_WIDTH-1 downto 0);
    m_axi_DATA_PARAMETERS_RLAST : IN STD_LOGIC;
    m_axi_DATA_PARAMETERS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_ID_WIDTH-1 downto 0);
    m_axi_DATA_PARAMETERS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_PARAMETERS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_PARAMETERS_BVALID : IN STD_LOGIC;
    m_axi_DATA_PARAMETERS_BREADY : OUT STD_LOGIC;
    m_axi_DATA_PARAMETERS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_PARAMETERS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_ID_WIDTH-1 downto 0);
    m_axi_DATA_PARAMETERS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_PARAMETERS_BUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_AWVALID : OUT STD_LOGIC;
    m_axi_DATA_FC6_OUTPUT_AWREADY : IN STD_LOGIC;
    m_axi_DATA_FC6_OUTPUT_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_FC6_OUTPUT_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_OUTPUT_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_OUTPUT_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_OUTPUT_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_OUTPUT_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_OUTPUT_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_OUTPUT_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_OUTPUT_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_AWUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_WVALID : OUT STD_LOGIC;
    m_axi_DATA_FC6_OUTPUT_WREADY : IN STD_LOGIC;
    m_axi_DATA_FC6_OUTPUT_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_DATA_WIDTH/8-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_WLAST : OUT STD_LOGIC;
    m_axi_DATA_FC6_OUTPUT_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_WUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_ARVALID : OUT STD_LOGIC;
    m_axi_DATA_FC6_OUTPUT_ARREADY : IN STD_LOGIC;
    m_axi_DATA_FC6_OUTPUT_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_ADDR_WIDTH-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_DATA_FC6_OUTPUT_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_OUTPUT_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_OUTPUT_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_OUTPUT_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_OUTPUT_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_DATA_FC6_OUTPUT_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_OUTPUT_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_DATA_FC6_OUTPUT_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_ARUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_RVALID : IN STD_LOGIC;
    m_axi_DATA_FC6_OUTPUT_RREADY : OUT STD_LOGIC;
    m_axi_DATA_FC6_OUTPUT_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_DATA_WIDTH-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_RLAST : IN STD_LOGIC;
    m_axi_DATA_FC6_OUTPUT_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_RUSER_WIDTH-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_OUTPUT_BVALID : IN STD_LOGIC;
    m_axi_DATA_FC6_OUTPUT_BREADY : OUT STD_LOGIC;
    m_axi_DATA_FC6_OUTPUT_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_DATA_FC6_OUTPUT_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_ID_WIDTH-1 downto 0);
    m_axi_DATA_FC6_OUTPUT_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_FC6_OUTPUT_BUSER_WIDTH-1 downto 0);
    s_axi_CTL_AWVALID : IN STD_LOGIC;
    s_axi_CTL_AWREADY : OUT STD_LOGIC;
    s_axi_CTL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_ADDR_WIDTH-1 downto 0);
    s_axi_CTL_WVALID : IN STD_LOGIC;
    s_axi_CTL_WREADY : OUT STD_LOGIC;
    s_axi_CTL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH-1 downto 0);
    s_axi_CTL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTL_ARVALID : IN STD_LOGIC;
    s_axi_CTL_ARREADY : OUT STD_LOGIC;
    s_axi_CTL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTL_ADDR_WIDTH-1 downto 0);
    s_axi_CTL_RVALID : OUT STD_LOGIC;
    s_axi_CTL_RREADY : IN STD_LOGIC;
    s_axi_CTL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTL_DATA_WIDTH-1 downto 0);
    s_axi_CTL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTL_BVALID : OUT STD_LOGIC;
    s_axi_CTL_BREADY : IN STD_LOGIC;
    s_axi_CTL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of lenet_cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lenet_cnn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.560510,HLS_SYN_LAT=549664,HLS_SYN_TPT=none,HLS_SYN_MEM=175,HLS_SYN_DSP=26,HLS_SYN_FF=27720,HLS_SYN_LUT=33852,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (89 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (89 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (89 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (89 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (89 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp8_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (89 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp9_stage0 : STD_LOGIC_VECTOR (89 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (89 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (89 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (89 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (89 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (89 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_960 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100101100000";
    constant ap_const_lv32_BB80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001011101110000000";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_4B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010010110000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_19 : STD_LOGIC_VECTOR (7 downto 0) := "00011001";
    constant ap_const_lv16_148 : STD_LOGIC_VECTOR (15 downto 0) := "0000000101001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv12_34 : STD_LOGIC_VECTOR (11 downto 0) := "000000110100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv31_96 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010010110";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv31_9C : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010011100";
    constant ap_const_lv12_960 : STD_LOGIC_VECTOR (11 downto 0) := "100101100000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv31_9FC : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100111111100";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv31_A0C : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000101000001100";
    constant ap_const_lv16_BB80 : STD_LOGIC_VECTOR (15 downto 0) := "1011101110000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv31_C58C : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001100010110001100";
    constant ap_const_lv7_78 : STD_LOGIC_VECTOR (6 downto 0) := "1111000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv31_C604 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001100011000000100";
    constant ap_const_lv11_4B0 : STD_LOGIC_VECTOR (10 downto 0) := "10010110000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv31_CAB4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001100101010110100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (89 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal image_r : STD_LOGIC_VECTOR (31 downto 0);
    signal parameters : STD_LOGIC_VECTOR (31 downto 0);
    signal fc6_output : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_PARAMETERS_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal DATA_PARAMETERS_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln154_reg_1430 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln154_reg_1430_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln155_reg_1486 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln157_reg_1511 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln158_reg_1536 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal icmp_ln160_reg_1561 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal icmp_ln161_reg_1586 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal icmp_ln163_reg_1611 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal icmp_ln164_reg_1636 : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_OUTPUT_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal DATA_FC6_OUTPUT_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp9_iter2 : STD_LOGIC := '0';
    signal ap_block_pp9_stage0 : BOOLEAN;
    signal icmp_ln178_reg_1744 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln178_reg_1744_pp9_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_OUTPUT_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal DATA_IMAGE_AWREADY : STD_LOGIC;
    signal DATA_IMAGE_WREADY : STD_LOGIC;
    signal DATA_IMAGE_ARVALID : STD_LOGIC;
    signal DATA_IMAGE_ARREADY : STD_LOGIC;
    signal DATA_IMAGE_RVALID : STD_LOGIC;
    signal DATA_IMAGE_RREADY : STD_LOGIC;
    signal DATA_IMAGE_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_IMAGE_RLAST : STD_LOGIC;
    signal DATA_IMAGE_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_IMAGE_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_IMAGE_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_IMAGE_BVALID : STD_LOGIC;
    signal DATA_IMAGE_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_IMAGE_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_IMAGE_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_PARAMETERS_AWREADY : STD_LOGIC;
    signal DATA_PARAMETERS_WREADY : STD_LOGIC;
    signal DATA_PARAMETERS_ARVALID : STD_LOGIC;
    signal DATA_PARAMETERS_ARREADY : STD_LOGIC;
    signal DATA_PARAMETERS_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_PARAMETERS_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_PARAMETERS_RVALID : STD_LOGIC;
    signal DATA_PARAMETERS_RREADY : STD_LOGIC;
    signal DATA_PARAMETERS_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_PARAMETERS_RLAST : STD_LOGIC;
    signal DATA_PARAMETERS_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_PARAMETERS_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_PARAMETERS_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_PARAMETERS_BVALID : STD_LOGIC;
    signal DATA_PARAMETERS_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_PARAMETERS_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_PARAMETERS_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_OUTPUT_AWVALID : STD_LOGIC;
    signal DATA_FC6_OUTPUT_AWREADY : STD_LOGIC;
    signal DATA_FC6_OUTPUT_WVALID : STD_LOGIC;
    signal DATA_FC6_OUTPUT_WREADY : STD_LOGIC;
    signal DATA_FC6_OUTPUT_ARREADY : STD_LOGIC;
    signal DATA_FC6_OUTPUT_RVALID : STD_LOGIC;
    signal DATA_FC6_OUTPUT_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal DATA_FC6_OUTPUT_RLAST : STD_LOGIC;
    signal DATA_FC6_OUTPUT_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_OUTPUT_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_OUTPUT_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_FC6_OUTPUT_BVALID : STD_LOGIC;
    signal DATA_FC6_OUTPUT_BREADY : STD_LOGIC;
    signal DATA_FC6_OUTPUT_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal DATA_FC6_OUTPUT_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal DATA_FC6_OUTPUT_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln154_reg_603 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_mul_reg_614 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_urem_reg_625 : STD_LOGIC_VECTOR (7 downto 0);
    signal phi_ln155_reg_636 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln155_reg_636_pp1_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state27_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state29_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal phi_ln157_reg_648 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_ln157_reg_648_pp2_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state38_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state39_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state40_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal phi_ln158_reg_660 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_ln158_reg_660_pp3_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state49_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state50_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state51_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal phi_ln160_reg_672 : STD_LOGIC_VECTOR (15 downto 0);
    signal phi_ln160_reg_672_pp4_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state60_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state61_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state62_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal phi_ln161_reg_684 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_ln161_reg_684_pp5_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state71_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state72_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state73_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal phi_ln163_reg_696 : STD_LOGIC_VECTOR (10 downto 0);
    signal phi_ln163_reg_696_pp6_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state82_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state83_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_state84_pp6_stage0_iter2 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal phi_ln164_reg_708 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln164_reg_708_pp7_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state93_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state94_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state95_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal indvar_flatten_reg_720 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_0_i_reg_731 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_0_i_reg_742 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_ln178_reg_753 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc6_output5_reg_1391 : STD_LOGIC_VECTOR (29 downto 0);
    signal parameters3_reg_1396 : STD_LOGIC_VECTOR (29 downto 0);
    signal image1_reg_1402 : STD_LOGIC_VECTOR (29 downto 0);
    signal DATA_FC6_OUTPUT_addr_reg_1413 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_cast_fu_859_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_cast_reg_1419 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln154_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln154_reg_1430_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln154_reg_1430_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln154_reg_1430_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln154_reg_1430_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln154_reg_1430_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln154_reg_1430_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln154_reg_1430_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln154_fu_868_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln154_1_fu_886_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln154_7_fu_894_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_1449 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_1449_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_1449_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_1449_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_1449_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_1449_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_1449_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_1449_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln154_fu_926_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_reg_1460 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_reg_1460_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_reg_1460_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_reg_1460_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_reg_1460_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_reg_1460_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_reg_1460_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_reg_1460_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal DATA_PARAMETERS_addr_9_reg_1465 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln154_6_fu_1019_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln154_6_reg_1470 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln155_1_fu_1029_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln155_1_reg_1475 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln155_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_reg_1486_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln155_fu_1050_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln155_reg_1490 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal DATA_PARAMETERS_addr_11_reg_1495 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln157_1_fu_1061_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln157_1_reg_1500 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal icmp_ln157_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln157_reg_1511_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln157_fu_1082_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln157_reg_1515 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal DATA_PARAMETERS_addr_13_reg_1520 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln158_1_fu_1093_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln158_1_reg_1525 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal icmp_ln158_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln158_reg_1536_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln158_fu_1114_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln158_reg_1540 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal DATA_PARAMETERS_addr_15_reg_1545 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln160_1_fu_1125_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln160_1_reg_1550 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal icmp_ln160_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1561_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln160_fu_1146_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln160_reg_1565 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal DATA_PARAMETERS_addr_17_reg_1570 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln161_1_fu_1157_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln161_1_reg_1575 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal icmp_ln161_fu_1172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln161_reg_1586_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln161_fu_1178_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln161_reg_1590 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal DATA_PARAMETERS_addr_19_reg_1595 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln163_1_fu_1189_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln163_1_reg_1600 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal icmp_ln163_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln163_reg_1611_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln163_fu_1210_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln163_reg_1615 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal DATA_PARAMETERS_addr_21_reg_1620 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln164_1_fu_1221_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln164_1_reg_1625 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal icmp_ln164_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_reg_1636_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln164_fu_1242_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln164_reg_1640 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal DATA_PARAMETERS_addr_23_reg_1645 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln122_fu_1253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_1650 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp8_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp8_stage0 : signal is "none";
    signal ap_block_state106_pp8_stage0_iter0 : BOOLEAN;
    signal ap_block_state107_pp8_stage0_iter1 : BOOLEAN;
    signal ap_block_state108_pp8_stage0_iter2 : BOOLEAN;
    signal ap_block_state109_pp8_stage0_iter3 : BOOLEAN;
    signal ap_block_state110_pp8_stage0_iter4 : BOOLEAN;
    signal ap_block_state111_pp8_stage0_iter5 : BOOLEAN;
    signal ap_block_state112_pp8_stage0_iter6 : BOOLEAN;
    signal ap_block_state113_pp8_stage0_iter7 : BOOLEAN;
    signal ap_block_state114_pp8_stage0_iter8 : BOOLEAN;
    signal ap_block_state115_pp8_stage0_iter9 : BOOLEAN;
    signal ap_block_state116_pp8_stage0_iter10 : BOOLEAN;
    signal ap_block_state117_pp8_stage0_iter11 : BOOLEAN;
    signal ap_block_state118_pp8_stage0_iter12 : BOOLEAN;
    signal ap_block_pp8_stage0_11001 : BOOLEAN;
    signal icmp_ln122_reg_1650_pp8_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_1650_pp8_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_1650_pp8_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_1650_pp8_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_1650_pp8_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_1650_pp8_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_1650_pp8_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_1650_pp8_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_1650_pp8_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_1650_pp8_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln122_reg_1650_pp8_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln122_fu_1259_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp8_iter0 : STD_LOGIC := '0';
    signal c_fu_1265_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_reg_1659 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln123_fu_1271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_1664 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_1664_pp8_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_1664_pp8_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_1664_pp8_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_1664_pp8_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_1664_pp8_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln125_fu_1277_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln125_reg_1669 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln125_reg_1669_pp8_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln125_reg_1669_pp8_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln125_reg_1669_pp8_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln125_reg_1669_pp8_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln125_1_fu_1285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_1_reg_1676 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_1_reg_1676_pp8_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_1_reg_1676_pp8_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_1_reg_1676_pp8_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_1_reg_1676_pp8_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_1_reg_1676_pp8_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln125_3_fu_1291_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln125_3_reg_1681 : STD_LOGIC_VECTOR (6 downto 0);
    signal n_fu_1299_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln125_fu_1305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_reg_1693 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_reg_1693_pp8_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_reg_1693_pp8_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_reg_1693_pp8_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_reg_1693_pp8_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal conv5_output_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv5_output_0_0_l_reg_1708 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc6_weights_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc6_weights_0_0_lo_reg_1713 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp8_iter2 : STD_LOGIC := '0';
    signal output_assign_addr_1_reg_1723 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_assign_addr_1_reg_1723_pp8_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_assign_addr_1_reg_1723_pp8_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_assign_addr_1_reg_1723_pp8_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_assign_addr_1_reg_1723_pp8_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_assign_addr_1_reg_1723_pp8_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal output_assign_addr_1_reg_1723_pp8_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal acc_fu_1366_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_reg_1729 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_806_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_1734 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_802_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_reg_1739 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln178_fu_1374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp9_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp9_stage0 : signal is "none";
    signal ap_block_state120_pp9_stage0_iter0 : BOOLEAN;
    signal ap_block_state121_pp9_stage0_iter1 : BOOLEAN;
    signal ap_block_state122_pp9_stage0_iter2 : BOOLEAN;
    signal ap_block_state122_io : BOOLEAN;
    signal ap_block_pp9_stage0_11001 : BOOLEAN;
    signal add_ln178_fu_1380_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp9_iter0 : STD_LOGIC := '0';
    signal output_assign_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_assign_load_reg_1758 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp9_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state27 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state38 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state49 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state60 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state71 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state82 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state93 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal grp_convolution5_fu_772_ap_ready : STD_LOGIC;
    signal grp_convolution5_fu_772_ap_done : STD_LOGIC;
    signal ap_block_pp8_stage0_subdone : BOOLEAN;
    signal ap_condition_pp8_exit_iter0_state106 : STD_LOGIC;
    signal ap_enable_reg_pp8_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp8_iter12 : STD_LOGIC := '0';
    signal ap_block_pp9_stage0_subdone : BOOLEAN;
    signal ap_condition_pp9_exit_iter0_state120 : STD_LOGIC;
    signal conv1_weights_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv1_weights_0_ce0 : STD_LOGIC;
    signal conv1_weights_0_we0 : STD_LOGIC;
    signal conv1_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_weights_0_ce1 : STD_LOGIC;
    signal conv1_weights_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv1_bias_ce0 : STD_LOGIC;
    signal conv1_bias_we0 : STD_LOGIC;
    signal conv1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_weights_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv3_weights_ce0 : STD_LOGIC;
    signal conv3_weights_we0 : STD_LOGIC;
    signal conv3_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_weights_ce1 : STD_LOGIC;
    signal conv3_weights_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv3_bias_ce0 : STD_LOGIC;
    signal conv3_bias_we0 : STD_LOGIC;
    signal conv3_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv5_weights_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv5_weights_ce0 : STD_LOGIC;
    signal conv5_weights_we0 : STD_LOGIC;
    signal conv5_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv5_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv5_bias_ce0 : STD_LOGIC;
    signal conv5_bias_we0 : STD_LOGIC;
    signal conv5_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal fc6_weights_0_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal fc6_weights_0_0_ce0 : STD_LOGIC;
    signal fc6_weights_0_0_we0 : STD_LOGIC;
    signal fc6_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal fc6_bias_ce0 : STD_LOGIC;
    signal fc6_bias_we0 : STD_LOGIC;
    signal fc6_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_assign_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_assign_ce0 : STD_LOGIC;
    signal output_assign_ce1 : STD_LOGIC;
    signal output_assign_we1 : STD_LOGIC;
    signal conv1_output_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv1_output_ce0 : STD_LOGIC;
    signal conv1_output_we0 : STD_LOGIC;
    signal conv1_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool2_output_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal pool2_output_ce0 : STD_LOGIC;
    signal pool2_output_we0 : STD_LOGIC;
    signal pool2_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool2_output_ce1 : STD_LOGIC;
    signal pool2_output_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv3_output_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv3_output_ce0 : STD_LOGIC;
    signal conv3_output_we0 : STD_LOGIC;
    signal conv3_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal pool4_output_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal pool4_output_ce0 : STD_LOGIC;
    signal pool4_output_we0 : STD_LOGIC;
    signal pool4_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv5_output_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv5_output_0_0_ce0 : STD_LOGIC;
    signal conv5_output_0_0_we0 : STD_LOGIC;
    signal grp_convolution3_fu_764_ap_start : STD_LOGIC;
    signal grp_convolution3_fu_764_ap_done : STD_LOGIC;
    signal grp_convolution3_fu_764_ap_idle : STD_LOGIC;
    signal grp_convolution3_fu_764_ap_ready : STD_LOGIC;
    signal grp_convolution3_fu_764_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_convolution3_fu_764_input_r_ce0 : STD_LOGIC;
    signal grp_convolution3_fu_764_input_r_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_convolution3_fu_764_input_r_ce1 : STD_LOGIC;
    signal grp_convolution3_fu_764_weights_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution3_fu_764_weights_ce0 : STD_LOGIC;
    signal grp_convolution3_fu_764_weights_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_convolution3_fu_764_weights_ce1 : STD_LOGIC;
    signal grp_convolution3_fu_764_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution3_fu_764_bias_ce0 : STD_LOGIC;
    signal grp_convolution3_fu_764_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_convolution3_fu_764_output_r_ce0 : STD_LOGIC;
    signal grp_convolution3_fu_764_output_r_we0 : STD_LOGIC;
    signal grp_convolution3_fu_764_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution5_fu_772_ap_start : STD_LOGIC;
    signal grp_convolution5_fu_772_ap_idle : STD_LOGIC;
    signal grp_convolution5_fu_772_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_convolution5_fu_772_input_r_ce0 : STD_LOGIC;
    signal grp_convolution5_fu_772_weights_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_convolution5_fu_772_weights_ce0 : STD_LOGIC;
    signal grp_convolution5_fu_772_bias_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_convolution5_fu_772_bias_ce0 : STD_LOGIC;
    signal grp_convolution5_fu_772_output_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_convolution5_fu_772_output_0_0_ce0 : STD_LOGIC;
    signal grp_convolution5_fu_772_output_0_0_we0 : STD_LOGIC;
    signal grp_convolution5_fu_772_output_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_fu_780_ap_start : STD_LOGIC;
    signal grp_convolution1_fu_780_ap_done : STD_LOGIC;
    signal grp_convolution1_fu_780_ap_idle : STD_LOGIC;
    signal grp_convolution1_fu_780_ap_ready : STD_LOGIC;
    signal grp_convolution1_fu_780_m_axi_input_r_AWVALID : STD_LOGIC;
    signal grp_convolution1_fu_780_m_axi_input_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_WVALID : STD_LOGIC;
    signal grp_convolution1_fu_780_m_axi_input_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_WLAST : STD_LOGIC;
    signal grp_convolution1_fu_780_m_axi_input_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_ARVALID : STD_LOGIC;
    signal grp_convolution1_fu_780_m_axi_input_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_convolution1_fu_780_m_axi_input_r_RREADY : STD_LOGIC;
    signal grp_convolution1_fu_780_m_axi_input_r_BREADY : STD_LOGIC;
    signal grp_convolution1_fu_780_weights_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution1_fu_780_weights_0_ce0 : STD_LOGIC;
    signal grp_convolution1_fu_780_weights_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_convolution1_fu_780_weights_0_ce1 : STD_LOGIC;
    signal grp_convolution1_fu_780_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_convolution1_fu_780_bias_ce0 : STD_LOGIC;
    signal grp_convolution1_fu_780_output_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_convolution1_fu_780_output_r_ce0 : STD_LOGIC;
    signal grp_convolution1_fu_780_output_r_we0 : STD_LOGIC;
    signal grp_convolution1_fu_780_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling2_fu_790_ap_start : STD_LOGIC;
    signal grp_max_pooling2_fu_790_ap_done : STD_LOGIC;
    signal grp_max_pooling2_fu_790_ap_idle : STD_LOGIC;
    signal grp_max_pooling2_fu_790_ap_ready : STD_LOGIC;
    signal grp_max_pooling2_fu_790_input_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_max_pooling2_fu_790_input_r_ce0 : STD_LOGIC;
    signal grp_max_pooling2_fu_790_output_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pooling2_fu_790_output_r_ce0 : STD_LOGIC;
    signal grp_max_pooling2_fu_790_output_r_we0 : STD_LOGIC;
    signal grp_max_pooling2_fu_790_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pooling4_fu_796_ap_start : STD_LOGIC;
    signal grp_max_pooling4_fu_796_ap_done : STD_LOGIC;
    signal grp_max_pooling4_fu_796_ap_idle : STD_LOGIC;
    signal grp_max_pooling4_fu_796_ap_ready : STD_LOGIC;
    signal grp_max_pooling4_fu_796_input_r_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pooling4_fu_796_input_r_ce0 : STD_LOGIC;
    signal grp_max_pooling4_fu_796_output_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pooling4_fu_796_output_r_ce0 : STD_LOGIC;
    signal grp_max_pooling4_fu_796_output_r_we0 : STD_LOGIC;
    signal grp_max_pooling4_fu_796_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_phi_ln155_phi_fu_640_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_phi_ln157_phi_fu_652_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_phi_ln158_phi_fu_664_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_phi_ln160_phi_fu_676_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_phi_ln161_phi_fu_688_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_phi_ln163_phi_fu_700_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_phi_ln164_phi_fu_712_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_c_0_i_phi_fu_735_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp8_stage0 : BOOLEAN;
    signal grp_convolution3_fu_764_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal grp_convolution5_fu_772_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal grp_convolution1_fu_780_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal grp_max_pooling2_fu_790_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal grp_max_pooling4_fu_796_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal zext_ln154_5_fu_1025_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln155_fu_1056_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln157_1_fu_1088_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_fu_1120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln160_1_fu_1152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_fu_1184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln163_1_fu_1216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln164_fu_1248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_1_fu_1310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln126_fu_1351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln125_fu_1356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln178_fu_1386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_15_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_850_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln155_1_fu_1034_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln157_fu_1066_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln158_1_fu_1098_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln160_fu_1130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln161_1_fu_1162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln163_fu_1194_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln164_1_fu_1226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp9_stage0_01001 : BOOLEAN;
    signal add_ln154_1_fu_874_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln154_2_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln154_fu_910_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln154_1_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln154_3_fu_920_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln154_fu_938_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln154_fu_938_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_954_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_963_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln154_fu_960_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln154_1_fu_970_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln154_fu_980_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln154_2_fu_974_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln154_3_fu_983_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln154_4_fu_987_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln154_2_fu_997_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln154_1_fu_993_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_1001_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_954_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln154_5_fu_1009_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln154_4_fu_1015_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_1317_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_1328_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln126_1_fu_1324_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln126_2_fu_1335_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln126_fu_1339_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln126_fu_1314_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln126_fu_1345_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln125_1_fu_1361_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_954_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (89 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal ap_idle_pp8 : STD_LOGIC;
    signal ap_enable_pp8 : STD_LOGIC;
    signal ap_idle_pp9 : STD_LOGIC;
    signal ap_enable_pp9 : STD_LOGIC;
    signal mul_ln154_fu_938_p10 : STD_LOGIC_VECTOR (11 downto 0);

    component convolution3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_ce0 : OUT STD_LOGIC;
        weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        weights_ce1 : OUT STD_LOGIC;
        weights_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        weights_ce0 : OUT STD_LOGIC;
        weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_0_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_0_0_ce0 : OUT STD_LOGIC;
        output_0_0_we0 : OUT STD_LOGIC;
        output_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_r_AWVALID : OUT STD_LOGIC;
        m_axi_input_r_AWREADY : IN STD_LOGIC;
        m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WVALID : OUT STD_LOGIC;
        m_axi_input_r_WREADY : IN STD_LOGIC;
        m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_WLAST : OUT STD_LOGIC;
        m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARVALID : OUT STD_LOGIC;
        m_axi_input_r_ARREADY : IN STD_LOGIC;
        m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RVALID : IN STD_LOGIC;
        m_axi_input_r_RREADY : OUT STD_LOGIC;
        m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_RLAST : IN STD_LOGIC;
        m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BVALID : IN STD_LOGIC;
        m_axi_input_r_BREADY : OUT STD_LOGIC;
        m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_offset : IN STD_LOGIC_VECTOR (29 downto 0);
        weights_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weights_0_ce0 : OUT STD_LOGIC;
        weights_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        weights_0_ce1 : OUT STD_LOGIC;
        weights_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        bias_ce0 : OUT STD_LOGIC;
        bias_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component max_pooling2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component max_pooling4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_fmul_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_urem_5nsc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component lenet_cnn_conv1_wfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_conv1_bg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_conv3_whbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_conv3_bibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_conv5_wjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_conv5_bkbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_fc6_weilbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_fc6_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_output_mb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_conv1_oncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_pool2_oocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_conv3_opcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_pool4_oqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_CTL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        image_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        parameters : OUT STD_LOGIC_VECTOR (31 downto 0);
        fc6_output : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_cnn_DATA_IMAGE_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_cnn_DATA_PARAMETERS_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_cnn_DATA_FC6_OUTPUT_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    lenet_cnn_CTL_s_axi_U : component lenet_cnn_CTL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTL_AWVALID,
        AWREADY => s_axi_CTL_AWREADY,
        AWADDR => s_axi_CTL_AWADDR,
        WVALID => s_axi_CTL_WVALID,
        WREADY => s_axi_CTL_WREADY,
        WDATA => s_axi_CTL_WDATA,
        WSTRB => s_axi_CTL_WSTRB,
        ARVALID => s_axi_CTL_ARVALID,
        ARREADY => s_axi_CTL_ARREADY,
        ARADDR => s_axi_CTL_ARADDR,
        RVALID => s_axi_CTL_RVALID,
        RREADY => s_axi_CTL_RREADY,
        RDATA => s_axi_CTL_RDATA,
        RRESP => s_axi_CTL_RRESP,
        BVALID => s_axi_CTL_BVALID,
        BREADY => s_axi_CTL_BREADY,
        BRESP => s_axi_CTL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        image_r => image_r,
        parameters => parameters,
        fc6_output => fc6_output);

    lenet_cnn_DATA_IMAGE_m_axi_U : component lenet_cnn_DATA_IMAGE_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_IMAGE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_IMAGE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_IMAGE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_IMAGE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_IMAGE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_IMAGE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_IMAGE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_IMAGE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_IMAGE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_IMAGE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_IMAGE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_IMAGE_AWVALID,
        AWREADY => m_axi_DATA_IMAGE_AWREADY,
        AWADDR => m_axi_DATA_IMAGE_AWADDR,
        AWID => m_axi_DATA_IMAGE_AWID,
        AWLEN => m_axi_DATA_IMAGE_AWLEN,
        AWSIZE => m_axi_DATA_IMAGE_AWSIZE,
        AWBURST => m_axi_DATA_IMAGE_AWBURST,
        AWLOCK => m_axi_DATA_IMAGE_AWLOCK,
        AWCACHE => m_axi_DATA_IMAGE_AWCACHE,
        AWPROT => m_axi_DATA_IMAGE_AWPROT,
        AWQOS => m_axi_DATA_IMAGE_AWQOS,
        AWREGION => m_axi_DATA_IMAGE_AWREGION,
        AWUSER => m_axi_DATA_IMAGE_AWUSER,
        WVALID => m_axi_DATA_IMAGE_WVALID,
        WREADY => m_axi_DATA_IMAGE_WREADY,
        WDATA => m_axi_DATA_IMAGE_WDATA,
        WSTRB => m_axi_DATA_IMAGE_WSTRB,
        WLAST => m_axi_DATA_IMAGE_WLAST,
        WID => m_axi_DATA_IMAGE_WID,
        WUSER => m_axi_DATA_IMAGE_WUSER,
        ARVALID => m_axi_DATA_IMAGE_ARVALID,
        ARREADY => m_axi_DATA_IMAGE_ARREADY,
        ARADDR => m_axi_DATA_IMAGE_ARADDR,
        ARID => m_axi_DATA_IMAGE_ARID,
        ARLEN => m_axi_DATA_IMAGE_ARLEN,
        ARSIZE => m_axi_DATA_IMAGE_ARSIZE,
        ARBURST => m_axi_DATA_IMAGE_ARBURST,
        ARLOCK => m_axi_DATA_IMAGE_ARLOCK,
        ARCACHE => m_axi_DATA_IMAGE_ARCACHE,
        ARPROT => m_axi_DATA_IMAGE_ARPROT,
        ARQOS => m_axi_DATA_IMAGE_ARQOS,
        ARREGION => m_axi_DATA_IMAGE_ARREGION,
        ARUSER => m_axi_DATA_IMAGE_ARUSER,
        RVALID => m_axi_DATA_IMAGE_RVALID,
        RREADY => m_axi_DATA_IMAGE_RREADY,
        RDATA => m_axi_DATA_IMAGE_RDATA,
        RLAST => m_axi_DATA_IMAGE_RLAST,
        RID => m_axi_DATA_IMAGE_RID,
        RUSER => m_axi_DATA_IMAGE_RUSER,
        RRESP => m_axi_DATA_IMAGE_RRESP,
        BVALID => m_axi_DATA_IMAGE_BVALID,
        BREADY => m_axi_DATA_IMAGE_BREADY,
        BRESP => m_axi_DATA_IMAGE_BRESP,
        BID => m_axi_DATA_IMAGE_BID,
        BUSER => m_axi_DATA_IMAGE_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_IMAGE_ARVALID,
        I_ARREADY => DATA_IMAGE_ARREADY,
        I_ARADDR => grp_convolution1_fu_780_m_axi_input_r_ARADDR,
        I_ARID => grp_convolution1_fu_780_m_axi_input_r_ARID,
        I_ARLEN => grp_convolution1_fu_780_m_axi_input_r_ARLEN,
        I_ARSIZE => grp_convolution1_fu_780_m_axi_input_r_ARSIZE,
        I_ARLOCK => grp_convolution1_fu_780_m_axi_input_r_ARLOCK,
        I_ARCACHE => grp_convolution1_fu_780_m_axi_input_r_ARCACHE,
        I_ARQOS => grp_convolution1_fu_780_m_axi_input_r_ARQOS,
        I_ARPROT => grp_convolution1_fu_780_m_axi_input_r_ARPROT,
        I_ARUSER => grp_convolution1_fu_780_m_axi_input_r_ARUSER,
        I_ARBURST => grp_convolution1_fu_780_m_axi_input_r_ARBURST,
        I_ARREGION => grp_convolution1_fu_780_m_axi_input_r_ARREGION,
        I_RVALID => DATA_IMAGE_RVALID,
        I_RREADY => DATA_IMAGE_RREADY,
        I_RDATA => DATA_IMAGE_RDATA,
        I_RID => DATA_IMAGE_RID,
        I_RUSER => DATA_IMAGE_RUSER,
        I_RRESP => DATA_IMAGE_RRESP,
        I_RLAST => DATA_IMAGE_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_IMAGE_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_IMAGE_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_IMAGE_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_IMAGE_BRESP,
        I_BID => DATA_IMAGE_BID,
        I_BUSER => DATA_IMAGE_BUSER);

    lenet_cnn_DATA_PARAMETERS_m_axi_U : component lenet_cnn_DATA_PARAMETERS_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_PARAMETERS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_PARAMETERS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_PARAMETERS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_PARAMETERS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_PARAMETERS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_PARAMETERS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_PARAMETERS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_PARAMETERS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_PARAMETERS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_PARAMETERS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_PARAMETERS_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_PARAMETERS_AWVALID,
        AWREADY => m_axi_DATA_PARAMETERS_AWREADY,
        AWADDR => m_axi_DATA_PARAMETERS_AWADDR,
        AWID => m_axi_DATA_PARAMETERS_AWID,
        AWLEN => m_axi_DATA_PARAMETERS_AWLEN,
        AWSIZE => m_axi_DATA_PARAMETERS_AWSIZE,
        AWBURST => m_axi_DATA_PARAMETERS_AWBURST,
        AWLOCK => m_axi_DATA_PARAMETERS_AWLOCK,
        AWCACHE => m_axi_DATA_PARAMETERS_AWCACHE,
        AWPROT => m_axi_DATA_PARAMETERS_AWPROT,
        AWQOS => m_axi_DATA_PARAMETERS_AWQOS,
        AWREGION => m_axi_DATA_PARAMETERS_AWREGION,
        AWUSER => m_axi_DATA_PARAMETERS_AWUSER,
        WVALID => m_axi_DATA_PARAMETERS_WVALID,
        WREADY => m_axi_DATA_PARAMETERS_WREADY,
        WDATA => m_axi_DATA_PARAMETERS_WDATA,
        WSTRB => m_axi_DATA_PARAMETERS_WSTRB,
        WLAST => m_axi_DATA_PARAMETERS_WLAST,
        WID => m_axi_DATA_PARAMETERS_WID,
        WUSER => m_axi_DATA_PARAMETERS_WUSER,
        ARVALID => m_axi_DATA_PARAMETERS_ARVALID,
        ARREADY => m_axi_DATA_PARAMETERS_ARREADY,
        ARADDR => m_axi_DATA_PARAMETERS_ARADDR,
        ARID => m_axi_DATA_PARAMETERS_ARID,
        ARLEN => m_axi_DATA_PARAMETERS_ARLEN,
        ARSIZE => m_axi_DATA_PARAMETERS_ARSIZE,
        ARBURST => m_axi_DATA_PARAMETERS_ARBURST,
        ARLOCK => m_axi_DATA_PARAMETERS_ARLOCK,
        ARCACHE => m_axi_DATA_PARAMETERS_ARCACHE,
        ARPROT => m_axi_DATA_PARAMETERS_ARPROT,
        ARQOS => m_axi_DATA_PARAMETERS_ARQOS,
        ARREGION => m_axi_DATA_PARAMETERS_ARREGION,
        ARUSER => m_axi_DATA_PARAMETERS_ARUSER,
        RVALID => m_axi_DATA_PARAMETERS_RVALID,
        RREADY => m_axi_DATA_PARAMETERS_RREADY,
        RDATA => m_axi_DATA_PARAMETERS_RDATA,
        RLAST => m_axi_DATA_PARAMETERS_RLAST,
        RID => m_axi_DATA_PARAMETERS_RID,
        RUSER => m_axi_DATA_PARAMETERS_RUSER,
        RRESP => m_axi_DATA_PARAMETERS_RRESP,
        BVALID => m_axi_DATA_PARAMETERS_BVALID,
        BREADY => m_axi_DATA_PARAMETERS_BREADY,
        BRESP => m_axi_DATA_PARAMETERS_BRESP,
        BID => m_axi_DATA_PARAMETERS_BID,
        BUSER => m_axi_DATA_PARAMETERS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => DATA_PARAMETERS_ARVALID,
        I_ARREADY => DATA_PARAMETERS_ARREADY,
        I_ARADDR => DATA_PARAMETERS_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => DATA_PARAMETERS_ARLEN,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_PARAMETERS_RVALID,
        I_RREADY => DATA_PARAMETERS_RREADY,
        I_RDATA => DATA_PARAMETERS_RDATA,
        I_RID => DATA_PARAMETERS_RID,
        I_RUSER => DATA_PARAMETERS_RUSER,
        I_RRESP => DATA_PARAMETERS_RRESP,
        I_RLAST => DATA_PARAMETERS_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => DATA_PARAMETERS_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => DATA_PARAMETERS_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => DATA_PARAMETERS_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => DATA_PARAMETERS_BRESP,
        I_BID => DATA_PARAMETERS_BID,
        I_BUSER => DATA_PARAMETERS_BUSER);

    lenet_cnn_DATA_FC6_OUTPUT_m_axi_U : component lenet_cnn_DATA_FC6_OUTPUT_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA_FC6_OUTPUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA_FC6_OUTPUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA_FC6_OUTPUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA_FC6_OUTPUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA_FC6_OUTPUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA_FC6_OUTPUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA_FC6_OUTPUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA_FC6_OUTPUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA_FC6_OUTPUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA_FC6_OUTPUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA_FC6_OUTPUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_DATA_FC6_OUTPUT_AWVALID,
        AWREADY => m_axi_DATA_FC6_OUTPUT_AWREADY,
        AWADDR => m_axi_DATA_FC6_OUTPUT_AWADDR,
        AWID => m_axi_DATA_FC6_OUTPUT_AWID,
        AWLEN => m_axi_DATA_FC6_OUTPUT_AWLEN,
        AWSIZE => m_axi_DATA_FC6_OUTPUT_AWSIZE,
        AWBURST => m_axi_DATA_FC6_OUTPUT_AWBURST,
        AWLOCK => m_axi_DATA_FC6_OUTPUT_AWLOCK,
        AWCACHE => m_axi_DATA_FC6_OUTPUT_AWCACHE,
        AWPROT => m_axi_DATA_FC6_OUTPUT_AWPROT,
        AWQOS => m_axi_DATA_FC6_OUTPUT_AWQOS,
        AWREGION => m_axi_DATA_FC6_OUTPUT_AWREGION,
        AWUSER => m_axi_DATA_FC6_OUTPUT_AWUSER,
        WVALID => m_axi_DATA_FC6_OUTPUT_WVALID,
        WREADY => m_axi_DATA_FC6_OUTPUT_WREADY,
        WDATA => m_axi_DATA_FC6_OUTPUT_WDATA,
        WSTRB => m_axi_DATA_FC6_OUTPUT_WSTRB,
        WLAST => m_axi_DATA_FC6_OUTPUT_WLAST,
        WID => m_axi_DATA_FC6_OUTPUT_WID,
        WUSER => m_axi_DATA_FC6_OUTPUT_WUSER,
        ARVALID => m_axi_DATA_FC6_OUTPUT_ARVALID,
        ARREADY => m_axi_DATA_FC6_OUTPUT_ARREADY,
        ARADDR => m_axi_DATA_FC6_OUTPUT_ARADDR,
        ARID => m_axi_DATA_FC6_OUTPUT_ARID,
        ARLEN => m_axi_DATA_FC6_OUTPUT_ARLEN,
        ARSIZE => m_axi_DATA_FC6_OUTPUT_ARSIZE,
        ARBURST => m_axi_DATA_FC6_OUTPUT_ARBURST,
        ARLOCK => m_axi_DATA_FC6_OUTPUT_ARLOCK,
        ARCACHE => m_axi_DATA_FC6_OUTPUT_ARCACHE,
        ARPROT => m_axi_DATA_FC6_OUTPUT_ARPROT,
        ARQOS => m_axi_DATA_FC6_OUTPUT_ARQOS,
        ARREGION => m_axi_DATA_FC6_OUTPUT_ARREGION,
        ARUSER => m_axi_DATA_FC6_OUTPUT_ARUSER,
        RVALID => m_axi_DATA_FC6_OUTPUT_RVALID,
        RREADY => m_axi_DATA_FC6_OUTPUT_RREADY,
        RDATA => m_axi_DATA_FC6_OUTPUT_RDATA,
        RLAST => m_axi_DATA_FC6_OUTPUT_RLAST,
        RID => m_axi_DATA_FC6_OUTPUT_RID,
        RUSER => m_axi_DATA_FC6_OUTPUT_RUSER,
        RRESP => m_axi_DATA_FC6_OUTPUT_RRESP,
        BVALID => m_axi_DATA_FC6_OUTPUT_BVALID,
        BREADY => m_axi_DATA_FC6_OUTPUT_BREADY,
        BRESP => m_axi_DATA_FC6_OUTPUT_BRESP,
        BID => m_axi_DATA_FC6_OUTPUT_BID,
        BUSER => m_axi_DATA_FC6_OUTPUT_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => DATA_FC6_OUTPUT_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => DATA_FC6_OUTPUT_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => DATA_FC6_OUTPUT_RDATA,
        I_RID => DATA_FC6_OUTPUT_RID,
        I_RUSER => DATA_FC6_OUTPUT_RUSER,
        I_RRESP => DATA_FC6_OUTPUT_RRESP,
        I_RLAST => DATA_FC6_OUTPUT_RLAST,
        I_AWVALID => DATA_FC6_OUTPUT_AWVALID,
        I_AWREADY => DATA_FC6_OUTPUT_AWREADY,
        I_AWADDR => DATA_FC6_OUTPUT_addr_reg_1413,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_A,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => DATA_FC6_OUTPUT_WVALID,
        I_WREADY => DATA_FC6_OUTPUT_WREADY,
        I_WDATA => output_assign_load_reg_1758,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => DATA_FC6_OUTPUT_BVALID,
        I_BREADY => DATA_FC6_OUTPUT_BREADY,
        I_BRESP => DATA_FC6_OUTPUT_BRESP,
        I_BID => DATA_FC6_OUTPUT_BID,
        I_BUSER => DATA_FC6_OUTPUT_BUSER);

    conv1_weights_0_U : component lenet_cnn_conv1_wfYi
    generic map (
        DataWidth => 32,
        AddressRange => 150,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv1_weights_0_address0,
        ce0 => conv1_weights_0_ce0,
        we0 => conv1_weights_0_we0,
        d0 => DATA_PARAMETERS_addr_9_reg_1465,
        q0 => conv1_weights_0_q0,
        address1 => grp_convolution1_fu_780_weights_0_address1,
        ce1 => conv1_weights_0_ce1,
        q1 => conv1_weights_0_q1);

    conv1_bias_U : component lenet_cnn_conv1_bg8j
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv1_bias_address0,
        ce0 => conv1_bias_ce0,
        we0 => conv1_bias_we0,
        d0 => DATA_PARAMETERS_addr_11_reg_1495,
        q0 => conv1_bias_q0);

    conv3_weights_U : component lenet_cnn_conv3_whbi
    generic map (
        DataWidth => 32,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv3_weights_address0,
        ce0 => conv3_weights_ce0,
        we0 => conv3_weights_we0,
        d0 => DATA_PARAMETERS_addr_13_reg_1520,
        q0 => conv3_weights_q0,
        address1 => grp_convolution3_fu_764_weights_address1,
        ce1 => conv3_weights_ce1,
        q1 => conv3_weights_q1);

    conv3_bias_U : component lenet_cnn_conv3_bibs
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv3_bias_address0,
        ce0 => conv3_bias_ce0,
        we0 => conv3_bias_we0,
        d0 => DATA_PARAMETERS_addr_15_reg_1545,
        q0 => conv3_bias_q0);

    conv5_weights_U : component lenet_cnn_conv5_wjbC
    generic map (
        DataWidth => 32,
        AddressRange => 48000,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv5_weights_address0,
        ce0 => conv5_weights_ce0,
        we0 => conv5_weights_we0,
        d0 => DATA_PARAMETERS_addr_17_reg_1570,
        q0 => conv5_weights_q0);

    conv5_bias_U : component lenet_cnn_conv5_bkbM
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv5_bias_address0,
        ce0 => conv5_bias_ce0,
        we0 => conv5_bias_we0,
        d0 => DATA_PARAMETERS_addr_19_reg_1595,
        q0 => conv5_bias_q0);

    fc6_weights_0_0_U : component lenet_cnn_fc6_weilbW
    generic map (
        DataWidth => 32,
        AddressRange => 1200,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc6_weights_0_0_address0,
        ce0 => fc6_weights_0_0_ce0,
        we0 => fc6_weights_0_0_we0,
        d0 => DATA_PARAMETERS_addr_21_reg_1620,
        q0 => fc6_weights_0_0_q0);

    fc6_bias_U : component lenet_cnn_fc6_bias
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => fc6_bias_address0,
        ce0 => fc6_bias_ce0,
        we0 => fc6_bias_we0,
        d0 => DATA_PARAMETERS_addr_23_reg_1645,
        q0 => fc6_bias_q0);

    output_assign_U : component lenet_cnn_output_mb6
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_assign_address0,
        ce0 => output_assign_ce0,
        q0 => output_assign_q0,
        address1 => output_assign_addr_1_reg_1723_pp8_iter11_reg,
        ce1 => output_assign_ce1,
        we1 => output_assign_we1,
        d1 => tmp_7_i_reg_1739);

    conv1_output_U : component lenet_cnn_conv1_oncg
    generic map (
        DataWidth => 32,
        AddressRange => 4704,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv1_output_address0,
        ce0 => conv1_output_ce0,
        we0 => conv1_output_we0,
        d0 => grp_convolution1_fu_780_output_r_d0,
        q0 => conv1_output_q0);

    pool2_output_U : component lenet_cnn_pool2_oocq
    generic map (
        DataWidth => 32,
        AddressRange => 1176,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => pool2_output_address0,
        ce0 => pool2_output_ce0,
        we0 => pool2_output_we0,
        d0 => grp_max_pooling2_fu_790_output_r_d0,
        q0 => pool2_output_q0,
        address1 => grp_convolution3_fu_764_input_r_address1,
        ce1 => pool2_output_ce1,
        q1 => pool2_output_q1);

    conv3_output_U : component lenet_cnn_conv3_opcA
    generic map (
        DataWidth => 32,
        AddressRange => 1600,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv3_output_address0,
        ce0 => conv3_output_ce0,
        we0 => conv3_output_we0,
        d0 => grp_convolution3_fu_764_output_r_d0,
        q0 => conv3_output_q0);

    pool4_output_U : component lenet_cnn_pool4_oqcK
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => pool4_output_address0,
        ce0 => pool4_output_ce0,
        we0 => pool4_output_we0,
        d0 => grp_max_pooling4_fu_796_output_r_d0,
        q0 => pool4_output_q0);

    conv5_output_0_0_U : component lenet_cnn_conv5_bkbM
    generic map (
        DataWidth => 32,
        AddressRange => 120,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv5_output_0_0_address0,
        ce0 => conv5_output_0_0_ce0,
        we0 => conv5_output_0_0_we0,
        d0 => grp_convolution5_fu_772_output_0_0_d0,
        q0 => conv5_output_0_0_q0);

    grp_convolution3_fu_764 : component convolution3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_convolution3_fu_764_ap_start,
        ap_done => grp_convolution3_fu_764_ap_done,
        ap_idle => grp_convolution3_fu_764_ap_idle,
        ap_ready => grp_convolution3_fu_764_ap_ready,
        input_r_address0 => grp_convolution3_fu_764_input_r_address0,
        input_r_ce0 => grp_convolution3_fu_764_input_r_ce0,
        input_r_q0 => pool2_output_q0,
        input_r_address1 => grp_convolution3_fu_764_input_r_address1,
        input_r_ce1 => grp_convolution3_fu_764_input_r_ce1,
        input_r_q1 => pool2_output_q1,
        weights_address0 => grp_convolution3_fu_764_weights_address0,
        weights_ce0 => grp_convolution3_fu_764_weights_ce0,
        weights_q0 => conv3_weights_q0,
        weights_address1 => grp_convolution3_fu_764_weights_address1,
        weights_ce1 => grp_convolution3_fu_764_weights_ce1,
        weights_q1 => conv3_weights_q1,
        bias_address0 => grp_convolution3_fu_764_bias_address0,
        bias_ce0 => grp_convolution3_fu_764_bias_ce0,
        bias_q0 => conv3_bias_q0,
        output_r_address0 => grp_convolution3_fu_764_output_r_address0,
        output_r_ce0 => grp_convolution3_fu_764_output_r_ce0,
        output_r_we0 => grp_convolution3_fu_764_output_r_we0,
        output_r_d0 => grp_convolution3_fu_764_output_r_d0);

    grp_convolution5_fu_772 : component convolution5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_convolution5_fu_772_ap_start,
        ap_done => grp_convolution5_fu_772_ap_done,
        ap_idle => grp_convolution5_fu_772_ap_idle,
        ap_ready => grp_convolution5_fu_772_ap_ready,
        input_r_address0 => grp_convolution5_fu_772_input_r_address0,
        input_r_ce0 => grp_convolution5_fu_772_input_r_ce0,
        input_r_q0 => pool4_output_q0,
        weights_address0 => grp_convolution5_fu_772_weights_address0,
        weights_ce0 => grp_convolution5_fu_772_weights_ce0,
        weights_q0 => conv5_weights_q0,
        bias_address0 => grp_convolution5_fu_772_bias_address0,
        bias_ce0 => grp_convolution5_fu_772_bias_ce0,
        bias_q0 => conv5_bias_q0,
        output_0_0_address0 => grp_convolution5_fu_772_output_0_0_address0,
        output_0_0_ce0 => grp_convolution5_fu_772_output_0_0_ce0,
        output_0_0_we0 => grp_convolution5_fu_772_output_0_0_we0,
        output_0_0_d0 => grp_convolution5_fu_772_output_0_0_d0);

    grp_convolution1_fu_780 : component convolution1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_convolution1_fu_780_ap_start,
        ap_done => grp_convolution1_fu_780_ap_done,
        ap_idle => grp_convolution1_fu_780_ap_idle,
        ap_ready => grp_convolution1_fu_780_ap_ready,
        m_axi_input_r_AWVALID => grp_convolution1_fu_780_m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY => ap_const_logic_0,
        m_axi_input_r_AWADDR => grp_convolution1_fu_780_m_axi_input_r_AWADDR,
        m_axi_input_r_AWID => grp_convolution1_fu_780_m_axi_input_r_AWID,
        m_axi_input_r_AWLEN => grp_convolution1_fu_780_m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE => grp_convolution1_fu_780_m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST => grp_convolution1_fu_780_m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK => grp_convolution1_fu_780_m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE => grp_convolution1_fu_780_m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT => grp_convolution1_fu_780_m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS => grp_convolution1_fu_780_m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION => grp_convolution1_fu_780_m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER => grp_convolution1_fu_780_m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID => grp_convolution1_fu_780_m_axi_input_r_WVALID,
        m_axi_input_r_WREADY => ap_const_logic_0,
        m_axi_input_r_WDATA => grp_convolution1_fu_780_m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB => grp_convolution1_fu_780_m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST => grp_convolution1_fu_780_m_axi_input_r_WLAST,
        m_axi_input_r_WID => grp_convolution1_fu_780_m_axi_input_r_WID,
        m_axi_input_r_WUSER => grp_convolution1_fu_780_m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID => grp_convolution1_fu_780_m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY => DATA_IMAGE_ARREADY,
        m_axi_input_r_ARADDR => grp_convolution1_fu_780_m_axi_input_r_ARADDR,
        m_axi_input_r_ARID => grp_convolution1_fu_780_m_axi_input_r_ARID,
        m_axi_input_r_ARLEN => grp_convolution1_fu_780_m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE => grp_convolution1_fu_780_m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST => grp_convolution1_fu_780_m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK => grp_convolution1_fu_780_m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE => grp_convolution1_fu_780_m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT => grp_convolution1_fu_780_m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS => grp_convolution1_fu_780_m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION => grp_convolution1_fu_780_m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER => grp_convolution1_fu_780_m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID => DATA_IMAGE_RVALID,
        m_axi_input_r_RREADY => grp_convolution1_fu_780_m_axi_input_r_RREADY,
        m_axi_input_r_RDATA => DATA_IMAGE_RDATA,
        m_axi_input_r_RLAST => DATA_IMAGE_RLAST,
        m_axi_input_r_RID => DATA_IMAGE_RID,
        m_axi_input_r_RUSER => DATA_IMAGE_RUSER,
        m_axi_input_r_RRESP => DATA_IMAGE_RRESP,
        m_axi_input_r_BVALID => ap_const_logic_0,
        m_axi_input_r_BREADY => grp_convolution1_fu_780_m_axi_input_r_BREADY,
        m_axi_input_r_BRESP => ap_const_lv2_0,
        m_axi_input_r_BID => ap_const_lv1_0,
        m_axi_input_r_BUSER => ap_const_lv1_0,
        input_offset => image1_reg_1402,
        weights_0_address0 => grp_convolution1_fu_780_weights_0_address0,
        weights_0_ce0 => grp_convolution1_fu_780_weights_0_ce0,
        weights_0_q0 => conv1_weights_0_q0,
        weights_0_address1 => grp_convolution1_fu_780_weights_0_address1,
        weights_0_ce1 => grp_convolution1_fu_780_weights_0_ce1,
        weights_0_q1 => conv1_weights_0_q1,
        bias_address0 => grp_convolution1_fu_780_bias_address0,
        bias_ce0 => grp_convolution1_fu_780_bias_ce0,
        bias_q0 => conv1_bias_q0,
        output_r_address0 => grp_convolution1_fu_780_output_r_address0,
        output_r_ce0 => grp_convolution1_fu_780_output_r_ce0,
        output_r_we0 => grp_convolution1_fu_780_output_r_we0,
        output_r_d0 => grp_convolution1_fu_780_output_r_d0);

    grp_max_pooling2_fu_790 : component max_pooling2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pooling2_fu_790_ap_start,
        ap_done => grp_max_pooling2_fu_790_ap_done,
        ap_idle => grp_max_pooling2_fu_790_ap_idle,
        ap_ready => grp_max_pooling2_fu_790_ap_ready,
        input_r_address0 => grp_max_pooling2_fu_790_input_r_address0,
        input_r_ce0 => grp_max_pooling2_fu_790_input_r_ce0,
        input_r_q0 => conv1_output_q0,
        output_r_address0 => grp_max_pooling2_fu_790_output_r_address0,
        output_r_ce0 => grp_max_pooling2_fu_790_output_r_ce0,
        output_r_we0 => grp_max_pooling2_fu_790_output_r_we0,
        output_r_d0 => grp_max_pooling2_fu_790_output_r_d0);

    grp_max_pooling4_fu_796 : component max_pooling4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pooling4_fu_796_ap_start,
        ap_done => grp_max_pooling4_fu_796_ap_done,
        ap_idle => grp_max_pooling4_fu_796_ap_idle,
        ap_ready => grp_max_pooling4_fu_796_ap_ready,
        input_r_address0 => grp_max_pooling4_fu_796_input_r_address0,
        input_r_ce0 => grp_max_pooling4_fu_796_input_r_ce0,
        input_r_q0 => conv3_output_q0,
        output_r_address0 => grp_max_pooling4_fu_796_output_r_address0,
        output_r_ce0 => grp_max_pooling4_fu_796_output_r_ce0,
        output_r_we0 => grp_max_pooling4_fu_796_output_r_we0,
        output_r_d0 => grp_max_pooling4_fu_796_output_r_d0);

    lenet_cnn_fadd_32bkb_U36 : component lenet_cnn_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => acc_reg_1729,
        din1 => tmp_i_reg_1734,
        ce => ap_const_logic_1,
        dout => grp_fu_802_p2);

    lenet_cnn_fmul_32cud_U37 : component lenet_cnn_fmul_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => fc6_weights_0_0_lo_reg_1713,
        din1 => conv5_output_0_0_l_reg_1708,
        ce => ap_const_logic_1,
        dout => grp_fu_806_p2);

    lenet_cnn_urem_5nsc4_U38 : component lenet_cnn_urem_5nsc4
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => select_ln154_fu_926_p3,
        din1 => grp_fu_954_p1,
        ce => grp_fu_954_ce,
        dout => grp_fu_954_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state27) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state27)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state27);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state38) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state38)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state38);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state49) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state49)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state49);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state60) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state60)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state60);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state71) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state71)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state71);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state82) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp6_exit_iter0_state82)) then 
                        ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state82);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter2 <= ap_enable_reg_pp6_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                    ap_enable_reg_pp6_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state93) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state93)) then 
                        ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state93);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
                    ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp8_exit_iter0_state106) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state105) and (grp_convolution5_fu_772_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp8_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp8_exit_iter0_state106)) then 
                        ap_enable_reg_pp8_iter1 <= (ap_const_logic_1 xor ap_condition_pp8_exit_iter0_state106);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp8_iter1 <= ap_enable_reg_pp8_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter10 <= ap_enable_reg_pp8_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter11 <= ap_enable_reg_pp8_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter12 <= ap_enable_reg_pp8_iter11;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state105) and (grp_convolution5_fu_772_ap_done = ap_const_logic_1))) then 
                    ap_enable_reg_pp8_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter2 <= ap_enable_reg_pp8_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter3 <= ap_enable_reg_pp8_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter4 <= ap_enable_reg_pp8_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter5 <= ap_enable_reg_pp8_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter6 <= ap_enable_reg_pp8_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter7 <= ap_enable_reg_pp8_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter8 <= ap_enable_reg_pp8_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp8_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp8_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) then 
                    ap_enable_reg_pp8_iter9 <= ap_enable_reg_pp8_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp9_exit_iter0_state120) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = DATA_FC6_OUTPUT_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state119))) then 
                    ap_enable_reg_pp9_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp9_exit_iter0_state120)) then 
                        ap_enable_reg_pp9_iter1 <= (ap_const_logic_1 xor ap_condition_pp9_exit_iter0_state120);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp9_iter1 <= ap_enable_reg_pp9_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp9_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp9_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp9_stage0_subdone)) then 
                    ap_enable_reg_pp9_iter2 <= ap_enable_reg_pp9_iter1;
                elsif (((ap_const_logic_1 = DATA_FC6_OUTPUT_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state119))) then 
                    ap_enable_reg_pp9_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution1_fu_780_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_convolution1_fu_780_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
                    grp_convolution1_fu_780_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution1_fu_780_ap_ready = ap_const_logic_1)) then 
                    grp_convolution1_fu_780_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution3_fu_764_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_convolution3_fu_764_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
                    grp_convolution3_fu_764_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution3_fu_764_ap_ready = ap_const_logic_1)) then 
                    grp_convolution3_fu_764_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_convolution5_fu_772_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_convolution5_fu_772_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
                    grp_convolution5_fu_772_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_convolution5_fu_772_ap_ready = ap_const_logic_1)) then 
                    grp_convolution5_fu_772_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pooling2_fu_790_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pooling2_fu_790_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                    grp_max_pooling2_fu_790_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pooling2_fu_790_ap_ready = ap_const_logic_1)) then 
                    grp_max_pooling2_fu_790_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pooling4_fu_796_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pooling4_fu_796_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                    grp_max_pooling4_fu_796_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pooling4_fu_796_ap_ready = ap_const_logic_1)) then 
                    grp_max_pooling4_fu_796_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_i_reg_731_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_1650 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then 
                c_0_i_reg_731 <= select_ln125_3_reg_1681;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state105) and (grp_convolution5_fu_772_ap_done = ap_const_logic_1))) then 
                c_0_i_reg_731 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_720_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_1253_p2 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then 
                indvar_flatten_reg_720 <= add_ln122_fu_1259_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state105) and (grp_convolution5_fu_772_ap_done = ap_const_logic_1))) then 
                indvar_flatten_reg_720 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    n_0_i_reg_742_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_1253_p2 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then 
                n_0_i_reg_742 <= n_fu_1299_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state105) and (grp_convolution5_fu_772_ap_done = ap_const_logic_1))) then 
                n_0_i_reg_742 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_ln154_reg_603_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln154_fu_862_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_ln154_reg_603 <= add_ln154_fu_868_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_ln154_reg_603 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_ln155_reg_636_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln155_reg_1486 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                phi_ln155_reg_636 <= add_ln155_reg_1490;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                phi_ln155_reg_636 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_ln157_reg_648_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln157_reg_1511 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                phi_ln157_reg_648 <= add_ln157_reg_1515;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                phi_ln157_reg_648 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    phi_ln158_reg_660_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln158_reg_1536 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                phi_ln158_reg_660 <= add_ln158_reg_1540;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                phi_ln158_reg_660 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_ln160_reg_672_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln160_reg_1561 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                phi_ln160_reg_672 <= add_ln160_reg_1565;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
                phi_ln160_reg_672 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_ln161_reg_684_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln161_reg_1586 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                phi_ln161_reg_684 <= add_ln161_reg_1590;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
                phi_ln161_reg_684 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_ln163_reg_696_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln163_reg_1611 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                phi_ln163_reg_696 <= add_ln163_reg_1615;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                phi_ln163_reg_696 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    phi_ln164_reg_708_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln164_reg_1636 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                phi_ln164_reg_708 <= add_ln164_reg_1640;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
                phi_ln164_reg_708 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_ln178_reg_753_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = DATA_FC6_OUTPUT_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state119))) then 
                phi_ln178_reg_753 <= ap_const_lv4_0;
            elsif (((icmp_ln178_fu_1374_p2 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then 
                phi_ln178_reg_753 <= add_ln178_fu_1380_p2;
            end if; 
        end if;
    end process;

    phi_mul_reg_614_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln154_fu_862_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_mul_reg_614 <= add_ln154_7_fu_894_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_mul_reg_614 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_625_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln154_fu_862_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_urem_reg_625 <= select_ln154_1_fu_886_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_urem_reg_625 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                    DATA_FC6_OUTPUT_addr_reg_1413(29 downto 0) <= empty_fu_850_p1(32 - 1 downto 0)(29 downto 0);
                    p_cast_reg_1419(29 downto 0) <= p_cast_fu_859_p1(29 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln155_reg_1486 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                DATA_PARAMETERS_addr_11_reg_1495 <= DATA_PARAMETERS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln157_reg_1511 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                DATA_PARAMETERS_addr_13_reg_1520 <= DATA_PARAMETERS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln158_reg_1536 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                DATA_PARAMETERS_addr_15_reg_1545 <= DATA_PARAMETERS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln160_reg_1561 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                DATA_PARAMETERS_addr_17_reg_1570 <= DATA_PARAMETERS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln161_reg_1586 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                DATA_PARAMETERS_addr_19_reg_1595 <= DATA_PARAMETERS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln163_reg_1611 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                DATA_PARAMETERS_addr_21_reg_1620 <= DATA_PARAMETERS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln164_reg_1636 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                DATA_PARAMETERS_addr_23_reg_1645 <= DATA_PARAMETERS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln154_reg_1430_pp0_iter7_reg = ap_const_lv1_0))) then
                DATA_PARAMETERS_addr_9_reg_1465 <= DATA_PARAMETERS_RDATA;
                add_ln154_6_reg_1470 <= add_ln154_6_fu_1019_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_1650_pp8_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                acc_reg_1729 <= acc_fu_1366_p3;
                tmp_i_reg_1734 <= grp_fu_806_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln155_1_reg_1475 <= add_ln155_1_fu_1029_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                add_ln155_reg_1490 <= add_ln155_fu_1050_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                add_ln157_1_reg_1500 <= add_ln157_1_fu_1061_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                add_ln157_reg_1515 <= add_ln157_fu_1082_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                add_ln158_1_reg_1525 <= add_ln158_1_fu_1093_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                add_ln158_reg_1540 <= add_ln158_fu_1114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                add_ln160_1_reg_1550 <= add_ln160_1_fu_1125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                add_ln160_reg_1565 <= add_ln160_fu_1146_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                add_ln161_1_reg_1575 <= add_ln161_1_fu_1157_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then
                add_ln161_reg_1590 <= add_ln161_fu_1178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                add_ln163_1_reg_1600 <= add_ln163_1_fu_1189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) then
                add_ln163_reg_1615 <= add_ln163_fu_1210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                add_ln164_1_reg_1625 <= add_ln164_1_fu_1221_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1))) then
                add_ln164_reg_1640 <= add_ln164_fu_1242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_1253_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                c_reg_1659 <= c_fu_1265_p2;
                icmp_ln123_reg_1664 <= icmp_ln123_fu_1271_p2;
                icmp_ln125_1_reg_1676 <= icmp_ln125_1_fu_1285_p2;
                select_ln125_reg_1669 <= select_ln125_fu_1277_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_1650_pp8_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                conv5_output_0_0_l_reg_1708 <= conv5_output_0_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                fc6_output5_reg_1391 <= fc6_output(31 downto 2);
                image1_reg_1402 <= image_r(31 downto 2);
                parameters3_reg_1396 <= parameters(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_1650_pp8_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                fc6_weights_0_0_lo_reg_1713 <= fc6_weights_0_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                icmp_ln122_reg_1650 <= icmp_ln122_fu_1253_p2;
                icmp_ln122_reg_1650_pp8_iter1_reg <= icmp_ln122_reg_1650;
                icmp_ln123_reg_1664_pp8_iter1_reg <= icmp_ln123_reg_1664;
                icmp_ln125_1_reg_1676_pp8_iter1_reg <= icmp_ln125_1_reg_1676;
                select_ln125_reg_1669_pp8_iter1_reg <= select_ln125_reg_1669;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp8_stage0_11001)) then
                icmp_ln122_reg_1650_pp8_iter10_reg <= icmp_ln122_reg_1650_pp8_iter9_reg;
                icmp_ln122_reg_1650_pp8_iter11_reg <= icmp_ln122_reg_1650_pp8_iter10_reg;
                icmp_ln122_reg_1650_pp8_iter2_reg <= icmp_ln122_reg_1650_pp8_iter1_reg;
                icmp_ln122_reg_1650_pp8_iter3_reg <= icmp_ln122_reg_1650_pp8_iter2_reg;
                icmp_ln122_reg_1650_pp8_iter4_reg <= icmp_ln122_reg_1650_pp8_iter3_reg;
                icmp_ln122_reg_1650_pp8_iter5_reg <= icmp_ln122_reg_1650_pp8_iter4_reg;
                icmp_ln122_reg_1650_pp8_iter6_reg <= icmp_ln122_reg_1650_pp8_iter5_reg;
                icmp_ln122_reg_1650_pp8_iter7_reg <= icmp_ln122_reg_1650_pp8_iter6_reg;
                icmp_ln122_reg_1650_pp8_iter8_reg <= icmp_ln122_reg_1650_pp8_iter7_reg;
                icmp_ln122_reg_1650_pp8_iter9_reg <= icmp_ln122_reg_1650_pp8_iter8_reg;
                icmp_ln123_reg_1664_pp8_iter2_reg <= icmp_ln123_reg_1664_pp8_iter1_reg;
                icmp_ln123_reg_1664_pp8_iter3_reg <= icmp_ln123_reg_1664_pp8_iter2_reg;
                icmp_ln123_reg_1664_pp8_iter4_reg <= icmp_ln123_reg_1664_pp8_iter3_reg;
                icmp_ln123_reg_1664_pp8_iter5_reg <= icmp_ln123_reg_1664_pp8_iter4_reg;
                icmp_ln125_1_reg_1676_pp8_iter2_reg <= icmp_ln125_1_reg_1676_pp8_iter1_reg;
                icmp_ln125_1_reg_1676_pp8_iter3_reg <= icmp_ln125_1_reg_1676_pp8_iter2_reg;
                icmp_ln125_1_reg_1676_pp8_iter4_reg <= icmp_ln125_1_reg_1676_pp8_iter3_reg;
                icmp_ln125_1_reg_1676_pp8_iter5_reg <= icmp_ln125_1_reg_1676_pp8_iter4_reg;
                icmp_ln125_reg_1693_pp8_iter2_reg <= icmp_ln125_reg_1693;
                icmp_ln125_reg_1693_pp8_iter3_reg <= icmp_ln125_reg_1693_pp8_iter2_reg;
                icmp_ln125_reg_1693_pp8_iter4_reg <= icmp_ln125_reg_1693_pp8_iter3_reg;
                icmp_ln125_reg_1693_pp8_iter5_reg <= icmp_ln125_reg_1693_pp8_iter4_reg;
                output_assign_addr_1_reg_1723_pp8_iter10_reg <= output_assign_addr_1_reg_1723_pp8_iter9_reg;
                output_assign_addr_1_reg_1723_pp8_iter11_reg <= output_assign_addr_1_reg_1723_pp8_iter10_reg;
                output_assign_addr_1_reg_1723_pp8_iter6_reg <= output_assign_addr_1_reg_1723;
                output_assign_addr_1_reg_1723_pp8_iter7_reg <= output_assign_addr_1_reg_1723_pp8_iter6_reg;
                output_assign_addr_1_reg_1723_pp8_iter8_reg <= output_assign_addr_1_reg_1723_pp8_iter7_reg;
                output_assign_addr_1_reg_1723_pp8_iter9_reg <= output_assign_addr_1_reg_1723_pp8_iter8_reg;
                select_ln125_reg_1669_pp8_iter2_reg <= select_ln125_reg_1669_pp8_iter1_reg;
                select_ln125_reg_1669_pp8_iter3_reg <= select_ln125_reg_1669_pp8_iter2_reg;
                select_ln125_reg_1669_pp8_iter4_reg <= select_ln125_reg_1669_pp8_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_1650 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (icmp_ln123_reg_1664 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                icmp_ln125_reg_1693 <= icmp_ln125_fu_1305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln154_reg_1430 <= icmp_ln154_fu_862_p2;
                icmp_ln154_reg_1430_pp0_iter1_reg <= icmp_ln154_reg_1430;
                tmp_13_reg_1460_pp0_iter1_reg <= tmp_13_reg_1460;
                tmp_reg_1449_pp0_iter1_reg <= tmp_reg_1449;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln154_reg_1430_pp0_iter2_reg <= icmp_ln154_reg_1430_pp0_iter1_reg;
                icmp_ln154_reg_1430_pp0_iter3_reg <= icmp_ln154_reg_1430_pp0_iter2_reg;
                icmp_ln154_reg_1430_pp0_iter4_reg <= icmp_ln154_reg_1430_pp0_iter3_reg;
                icmp_ln154_reg_1430_pp0_iter5_reg <= icmp_ln154_reg_1430_pp0_iter4_reg;
                icmp_ln154_reg_1430_pp0_iter6_reg <= icmp_ln154_reg_1430_pp0_iter5_reg;
                icmp_ln154_reg_1430_pp0_iter7_reg <= icmp_ln154_reg_1430_pp0_iter6_reg;
                icmp_ln154_reg_1430_pp0_iter8_reg <= icmp_ln154_reg_1430_pp0_iter7_reg;
                tmp_13_reg_1460_pp0_iter2_reg <= tmp_13_reg_1460_pp0_iter1_reg;
                tmp_13_reg_1460_pp0_iter3_reg <= tmp_13_reg_1460_pp0_iter2_reg;
                tmp_13_reg_1460_pp0_iter4_reg <= tmp_13_reg_1460_pp0_iter3_reg;
                tmp_13_reg_1460_pp0_iter5_reg <= tmp_13_reg_1460_pp0_iter4_reg;
                tmp_13_reg_1460_pp0_iter6_reg <= tmp_13_reg_1460_pp0_iter5_reg;
                tmp_13_reg_1460_pp0_iter7_reg <= tmp_13_reg_1460_pp0_iter6_reg;
                tmp_reg_1449_pp0_iter2_reg <= tmp_reg_1449_pp0_iter1_reg;
                tmp_reg_1449_pp0_iter3_reg <= tmp_reg_1449_pp0_iter2_reg;
                tmp_reg_1449_pp0_iter4_reg <= tmp_reg_1449_pp0_iter3_reg;
                tmp_reg_1449_pp0_iter5_reg <= tmp_reg_1449_pp0_iter4_reg;
                tmp_reg_1449_pp0_iter6_reg <= tmp_reg_1449_pp0_iter5_reg;
                tmp_reg_1449_pp0_iter7_reg <= tmp_reg_1449_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln155_reg_1486 <= icmp_ln155_fu_1044_p2;
                icmp_ln155_reg_1486_pp1_iter1_reg <= icmp_ln155_reg_1486;
                phi_ln155_reg_636_pp1_iter1_reg <= phi_ln155_reg_636;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln157_reg_1511 <= icmp_ln157_fu_1076_p2;
                icmp_ln157_reg_1511_pp2_iter1_reg <= icmp_ln157_reg_1511;
                phi_ln157_reg_648_pp2_iter1_reg <= phi_ln157_reg_648;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln158_reg_1536 <= icmp_ln158_fu_1108_p2;
                icmp_ln158_reg_1536_pp3_iter1_reg <= icmp_ln158_reg_1536;
                phi_ln158_reg_660_pp3_iter1_reg <= phi_ln158_reg_660;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln160_reg_1561 <= icmp_ln160_fu_1140_p2;
                icmp_ln160_reg_1561_pp4_iter1_reg <= icmp_ln160_reg_1561;
                phi_ln160_reg_672_pp4_iter1_reg <= phi_ln160_reg_672;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln161_reg_1586 <= icmp_ln161_fu_1172_p2;
                icmp_ln161_reg_1586_pp5_iter1_reg <= icmp_ln161_reg_1586;
                phi_ln161_reg_684_pp5_iter1_reg <= phi_ln161_reg_684;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln163_reg_1611 <= icmp_ln163_fu_1204_p2;
                icmp_ln163_reg_1611_pp6_iter1_reg <= icmp_ln163_reg_1611;
                phi_ln163_reg_696_pp6_iter1_reg <= phi_ln163_reg_696;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln164_reg_1636 <= icmp_ln164_fu_1236_p2;
                icmp_ln164_reg_1636_pp7_iter1_reg <= icmp_ln164_reg_1636;
                phi_ln164_reg_708_pp7_iter1_reg <= phi_ln164_reg_708;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then
                icmp_ln178_reg_1744 <= icmp_ln178_fu_1374_p2;
                icmp_ln178_reg_1744_pp9_iter1_reg <= icmp_ln178_reg_1744;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_1650_pp8_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                output_assign_addr_1_reg_1723 <= zext_ln125_fu_1356_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln178_reg_1744 = ap_const_lv1_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then
                output_assign_load_reg_1758 <= output_assign_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_fu_1253_p2 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                select_ln125_3_reg_1681 <= select_ln125_3_fu_1291_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln154_fu_862_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_13_reg_1460 <= mul_ln154_fu_938_p2(11 downto 8);
                tmp_reg_1449 <= phi_mul_reg_614(15 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln122_reg_1650_pp8_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then
                tmp_7_i_reg_1739 <= grp_fu_802_p2;
            end if;
        end if;
    end process;
    DATA_FC6_OUTPUT_addr_reg_1413(31 downto 30) <= "00";
    p_cast_reg_1419(30) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter8, ap_CS_fsm_state20, ap_enable_reg_pp1_iter1, ap_CS_fsm_state31, ap_enable_reg_pp2_iter1, ap_CS_fsm_state42, ap_enable_reg_pp3_iter1, ap_CS_fsm_state53, ap_enable_reg_pp4_iter1, ap_CS_fsm_state64, ap_enable_reg_pp5_iter1, ap_CS_fsm_state75, ap_enable_reg_pp6_iter1, ap_CS_fsm_state86, ap_enable_reg_pp7_iter1, ap_CS_fsm_state119, ap_enable_reg_pp9_iter2, ap_CS_fsm_state127, DATA_PARAMETERS_ARREADY, DATA_FC6_OUTPUT_AWREADY, DATA_FC6_OUTPUT_BVALID, icmp_ln154_fu_862_p2, ap_enable_reg_pp0_iter0, icmp_ln155_fu_1044_p2, ap_enable_reg_pp1_iter0, icmp_ln157_fu_1076_p2, ap_enable_reg_pp2_iter0, icmp_ln158_fu_1108_p2, ap_enable_reg_pp3_iter0, icmp_ln160_fu_1140_p2, ap_enable_reg_pp4_iter0, icmp_ln161_fu_1172_p2, ap_enable_reg_pp5_iter0, icmp_ln163_fu_1204_p2, ap_enable_reg_pp6_iter0, icmp_ln164_fu_1236_p2, ap_enable_reg_pp7_iter0, icmp_ln122_fu_1253_p2, ap_enable_reg_pp8_iter0, icmp_ln178_fu_1374_p2, ap_enable_reg_pp9_iter0, ap_enable_reg_pp9_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter2, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter2, ap_block_pp6_stage0_subdone, ap_enable_reg_pp6_iter2, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter2, ap_CS_fsm_state105, grp_convolution5_fu_772_ap_done, ap_block_pp8_stage0_subdone, ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter11, ap_enable_reg_pp8_iter12, ap_block_pp9_stage0_subdone, grp_convolution3_fu_764_ap_done, grp_convolution1_fu_780_ap_done, grp_max_pooling2_fu_790_ap_done, grp_max_pooling4_fu_796_ap_done, ap_CS_fsm_state101, ap_CS_fsm_state97, ap_CS_fsm_state99, ap_CS_fsm_state103)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln154_fu_862_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln154_fu_862_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln155_fu_1044_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) and not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((icmp_ln155_fu_1044_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((icmp_ln157_fu_1076_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((icmp_ln157_fu_1076_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((icmp_ln158_fu_1108_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((icmp_ln158_fu_1108_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((icmp_ln160_fu_1140_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))) and not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((icmp_ln160_fu_1140_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                if (((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln161_fu_1172_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln161_fu_1172_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if (((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state76;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (icmp_ln163_fu_1204_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif ((((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) or ((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (icmp_ln163_fu_1204_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                if (((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state86))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (icmp_ln164_fu_1236_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif ((((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) or ((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (icmp_ln164_fu_1236_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state97) and (grp_convolution1_fu_780_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state99) and (grp_max_pooling2_fu_790_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state101) and (grp_convolution3_fu_764_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state102;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state103) and (grp_max_pooling4_fu_796_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state105) and (grp_convolution5_fu_772_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state105;
                end if;
            when ap_ST_fsm_pp8_stage0 => 
                if ((not(((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (icmp_ln122_fu_1253_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp8_iter12 = ap_const_logic_1) and (ap_enable_reg_pp8_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                elsif ((((ap_enable_reg_pp8_iter12 = ap_const_logic_1) and (ap_enable_reg_pp8_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone)) or ((ap_enable_reg_pp8_iter0 = ap_const_logic_1) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp8_stage0_subdone) and (icmp_ln122_fu_1253_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state119;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp8_stage0;
                end if;
            when ap_ST_fsm_state119 => 
                if (((ap_const_logic_1 = DATA_FC6_OUTPUT_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state119))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state119;
                end if;
            when ap_ST_fsm_pp9_stage0 => 
                if ((not(((ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (icmp_ln178_fu_1374_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                elsif ((((ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_subdone) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (icmp_ln178_fu_1374_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state123;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp9_stage0;
                end if;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                if (((ap_const_logic_1 = DATA_FC6_OUTPUT_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state127))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state127;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    DATA_FC6_OUTPUT_AWVALID_assign_proc : process(ap_CS_fsm_state119, DATA_FC6_OUTPUT_AWREADY)
    begin
        if (((ap_const_logic_1 = DATA_FC6_OUTPUT_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            DATA_FC6_OUTPUT_AWVALID <= ap_const_logic_1;
        else 
            DATA_FC6_OUTPUT_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_FC6_OUTPUT_BREADY_assign_proc : process(ap_CS_fsm_state127, DATA_FC6_OUTPUT_BVALID)
    begin
        if (((ap_const_logic_1 = DATA_FC6_OUTPUT_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state127))) then 
            DATA_FC6_OUTPUT_BREADY <= ap_const_logic_1;
        else 
            DATA_FC6_OUTPUT_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_FC6_OUTPUT_WVALID_assign_proc : process(ap_enable_reg_pp9_iter2, icmp_ln178_reg_1744_pp9_iter1_reg, ap_block_pp9_stage0_11001)
    begin
        if (((icmp_ln178_reg_1744_pp9_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001))) then 
            DATA_FC6_OUTPUT_WVALID <= ap_const_logic_1;
        else 
            DATA_FC6_OUTPUT_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_FC6_OUTPUT_blk_n_AW_assign_proc : process(m_axi_DATA_FC6_OUTPUT_AWREADY, ap_CS_fsm_state119)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            DATA_FC6_OUTPUT_blk_n_AW <= m_axi_DATA_FC6_OUTPUT_AWREADY;
        else 
            DATA_FC6_OUTPUT_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    DATA_FC6_OUTPUT_blk_n_B_assign_proc : process(m_axi_DATA_FC6_OUTPUT_BVALID, ap_CS_fsm_state127)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
            DATA_FC6_OUTPUT_blk_n_B <= m_axi_DATA_FC6_OUTPUT_BVALID;
        else 
            DATA_FC6_OUTPUT_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    DATA_FC6_OUTPUT_blk_n_W_assign_proc : process(m_axi_DATA_FC6_OUTPUT_WREADY, ap_enable_reg_pp9_iter2, ap_block_pp9_stage0, icmp_ln178_reg_1744_pp9_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp9_stage0) and (icmp_ln178_reg_1744_pp9_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp9_iter2 = ap_const_logic_1))) then 
            DATA_FC6_OUTPUT_blk_n_W <= m_axi_DATA_FC6_OUTPUT_WREADY;
        else 
            DATA_FC6_OUTPUT_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    DATA_IMAGE_ARVALID_assign_proc : process(grp_convolution1_fu_780_m_axi_input_r_ARVALID, ap_CS_fsm_state96, ap_CS_fsm_state97)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96))) then 
            DATA_IMAGE_ARVALID <= grp_convolution1_fu_780_m_axi_input_r_ARVALID;
        else 
            DATA_IMAGE_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_IMAGE_RREADY_assign_proc : process(grp_convolution1_fu_780_m_axi_input_r_RREADY, ap_CS_fsm_state96, ap_CS_fsm_state97)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96))) then 
            DATA_IMAGE_RREADY <= grp_convolution1_fu_780_m_axi_input_r_RREADY;
        else 
            DATA_IMAGE_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_PARAMETERS_ARADDR_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state20, ap_CS_fsm_state31, ap_CS_fsm_state42, ap_CS_fsm_state53, ap_CS_fsm_state64, ap_CS_fsm_state75, ap_CS_fsm_state86, DATA_PARAMETERS_ARREADY, empty_15_fu_840_p1, zext_ln155_1_fu_1034_p1, zext_ln157_fu_1066_p1, zext_ln158_1_fu_1098_p1, zext_ln160_fu_1130_p1, zext_ln161_1_fu_1162_p1, zext_ln163_fu_1194_p1, zext_ln164_1_fu_1226_p1)
    begin
        if ((ap_const_logic_1 = DATA_PARAMETERS_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                DATA_PARAMETERS_ARADDR <= zext_ln164_1_fu_1226_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                DATA_PARAMETERS_ARADDR <= zext_ln163_fu_1194_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                DATA_PARAMETERS_ARADDR <= zext_ln161_1_fu_1162_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                DATA_PARAMETERS_ARADDR <= zext_ln160_fu_1130_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                DATA_PARAMETERS_ARADDR <= zext_ln158_1_fu_1098_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                DATA_PARAMETERS_ARADDR <= zext_ln157_fu_1066_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                DATA_PARAMETERS_ARADDR <= zext_ln155_1_fu_1034_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                DATA_PARAMETERS_ARADDR <= empty_15_fu_840_p1(32 - 1 downto 0);
            else 
                DATA_PARAMETERS_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            DATA_PARAMETERS_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    DATA_PARAMETERS_ARLEN_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state20, ap_CS_fsm_state31, ap_CS_fsm_state42, ap_CS_fsm_state53, ap_CS_fsm_state64, ap_CS_fsm_state75, ap_CS_fsm_state86, DATA_PARAMETERS_ARREADY)
    begin
        if ((ap_const_logic_1 = DATA_PARAMETERS_ARREADY)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                DATA_PARAMETERS_ARLEN <= ap_const_lv32_A;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                DATA_PARAMETERS_ARLEN <= ap_const_lv32_4B0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
                DATA_PARAMETERS_ARLEN <= ap_const_lv32_78;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
                DATA_PARAMETERS_ARLEN <= ap_const_lv32_BB80;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                DATA_PARAMETERS_ARLEN <= ap_const_lv32_10;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                DATA_PARAMETERS_ARLEN <= ap_const_lv32_960;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                DATA_PARAMETERS_ARLEN <= ap_const_lv32_6;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                DATA_PARAMETERS_ARLEN <= ap_const_lv32_96;
            else 
                DATA_PARAMETERS_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            DATA_PARAMETERS_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    DATA_PARAMETERS_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state20, ap_CS_fsm_state31, ap_CS_fsm_state42, ap_CS_fsm_state53, ap_CS_fsm_state64, ap_CS_fsm_state75, ap_CS_fsm_state86, DATA_PARAMETERS_ARREADY)
    begin
        if ((((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state86)) or ((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state64)) or ((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((ap_const_logic_1 = DATA_PARAMETERS_ARREADY) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            DATA_PARAMETERS_ARVALID <= ap_const_logic_1;
        else 
            DATA_PARAMETERS_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    DATA_PARAMETERS_RREADY_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln154_reg_1430_pp0_iter7_reg, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln155_reg_1486, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln157_reg_1511, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln158_reg_1536, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, icmp_ln160_reg_1561, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, icmp_ln161_reg_1586, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, icmp_ln163_reg_1611, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, icmp_ln164_reg_1636, ap_block_pp1_stage0_11001, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_block_pp4_stage0_11001, ap_block_pp5_stage0_11001, ap_block_pp6_stage0_11001, ap_block_pp7_stage0_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln164_reg_1636 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln163_reg_1611 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln161_reg_1586 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln160_reg_1561 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln158_reg_1536 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln157_reg_1511 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln155_reg_1486 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln154_reg_1430_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)))) then 
            DATA_PARAMETERS_RREADY <= ap_const_logic_1;
        else 
            DATA_PARAMETERS_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    DATA_PARAMETERS_blk_n_AR_assign_proc : process(m_axi_DATA_PARAMETERS_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state20, ap_CS_fsm_state31, ap_CS_fsm_state42, ap_CS_fsm_state53, ap_CS_fsm_state64, ap_CS_fsm_state75, ap_CS_fsm_state86)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            DATA_PARAMETERS_blk_n_AR <= m_axi_DATA_PARAMETERS_ARREADY;
        else 
            DATA_PARAMETERS_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    DATA_PARAMETERS_blk_n_R_assign_proc : process(m_axi_DATA_PARAMETERS_RVALID, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0, icmp_ln154_reg_1430_pp0_iter7_reg, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln155_reg_1486, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln157_reg_1511, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln158_reg_1536, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, icmp_ln160_reg_1561, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, icmp_ln161_reg_1586, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, icmp_ln163_reg_1611, ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0, icmp_ln164_reg_1636)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp7_stage0) and (icmp_ln164_reg_1636 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)) or ((ap_const_boolean_0 = ap_block_pp6_stage0) and (icmp_ln163_reg_1611 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0) and (icmp_ln161_reg_1586 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0) and (icmp_ln160_reg_1561 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln158_reg_1536 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln157_reg_1511 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln155_reg_1486 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((icmp_ln154_reg_1430_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)))) then 
            DATA_PARAMETERS_blk_n_R <= m_axi_DATA_PARAMETERS_RVALID;
        else 
            DATA_PARAMETERS_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    acc_fu_1366_p3 <= 
        fc6_bias_q0 when (select_ln125_1_fu_1361_p3(0) = '1') else 
        output_assign_q0;
    add_ln122_fu_1259_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_720) + unsigned(ap_const_lv11_1));
    add_ln126_fu_1345_p2 <= std_logic_vector(unsigned(sub_ln126_fu_1339_p2) + unsigned(zext_ln126_fu_1314_p1));
    add_ln154_1_fu_874_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(phi_urem_reg_625));
    add_ln154_2_fu_974_p2 <= std_logic_vector(unsigned(zext_ln154_fu_960_p1) + unsigned(zext_ln154_1_fu_970_p1));
    add_ln154_3_fu_920_p2 <= std_logic_vector(unsigned(ap_const_lv5_7) + unsigned(trunc_ln154_fu_910_p1));
    add_ln154_4_fu_987_p2 <= std_logic_vector(unsigned(add_ln154_2_fu_974_p2) + unsigned(zext_ln154_3_fu_983_p1));
    add_ln154_5_fu_1009_p2 <= std_logic_vector(unsigned(trunc_ln154_1_fu_993_p1) + unsigned(p_shl_cast_fu_1001_p3));
    add_ln154_6_fu_1019_p2 <= std_logic_vector(unsigned(add_ln154_5_fu_1009_p2) + unsigned(zext_ln154_4_fu_1015_p1));
    add_ln154_7_fu_894_p2 <= std_logic_vector(unsigned(ap_const_lv16_148) + unsigned(phi_mul_reg_614));
    add_ln154_fu_868_p2 <= std_logic_vector(unsigned(phi_ln154_reg_603) + unsigned(ap_const_lv8_1));
    add_ln155_1_fu_1029_p2 <= std_logic_vector(unsigned(p_cast_reg_1419) + unsigned(ap_const_lv31_96));
    add_ln155_fu_1050_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln155_phi_fu_640_p4) + unsigned(ap_const_lv3_1));
    add_ln157_1_fu_1061_p2 <= std_logic_vector(unsigned(p_cast_reg_1419) + unsigned(ap_const_lv31_9C));
    add_ln157_fu_1082_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln157_phi_fu_652_p4) + unsigned(ap_const_lv12_1));
    add_ln158_1_fu_1093_p2 <= std_logic_vector(unsigned(p_cast_reg_1419) + unsigned(ap_const_lv31_9FC));
    add_ln158_fu_1114_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln158_phi_fu_664_p4) + unsigned(ap_const_lv5_1));
    add_ln160_1_fu_1125_p2 <= std_logic_vector(unsigned(p_cast_reg_1419) + unsigned(ap_const_lv31_A0C));
    add_ln160_fu_1146_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln160_phi_fu_676_p4) + unsigned(ap_const_lv16_1));
    add_ln161_1_fu_1157_p2 <= std_logic_vector(unsigned(p_cast_reg_1419) + unsigned(ap_const_lv31_C58C));
    add_ln161_fu_1178_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln161_phi_fu_688_p4) + unsigned(ap_const_lv7_1));
    add_ln163_1_fu_1189_p2 <= std_logic_vector(unsigned(p_cast_reg_1419) + unsigned(ap_const_lv31_C604));
    add_ln163_fu_1210_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln163_phi_fu_700_p4) + unsigned(ap_const_lv11_1));
    add_ln164_1_fu_1221_p2 <= std_logic_vector(unsigned(p_cast_reg_1419) + unsigned(ap_const_lv31_CAB4));
    add_ln164_fu_1242_p2 <= std_logic_vector(unsigned(ap_phi_mux_phi_ln164_phi_fu_712_p4) + unsigned(ap_const_lv4_1));
    add_ln178_fu_1380_p2 <= std_logic_vector(unsigned(phi_ln178_reg_753) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(17);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(26);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(35);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(44);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(53);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(62);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(71);
    ap_CS_fsm_pp8_stage0 <= ap_CS_fsm(82);
    ap_CS_fsm_pp9_stage0 <= ap_CS_fsm(84);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(76);
    ap_CS_fsm_state101 <= ap_CS_fsm(77);
    ap_CS_fsm_state102 <= ap_CS_fsm(78);
    ap_CS_fsm_state103 <= ap_CS_fsm(79);
    ap_CS_fsm_state104 <= ap_CS_fsm(80);
    ap_CS_fsm_state105 <= ap_CS_fsm(81);
    ap_CS_fsm_state119 <= ap_CS_fsm(83);
    ap_CS_fsm_state127 <= ap_CS_fsm(89);
    ap_CS_fsm_state19 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(10);
    ap_CS_fsm_state26 <= ap_CS_fsm(16);
    ap_CS_fsm_state30 <= ap_CS_fsm(18);
    ap_CS_fsm_state31 <= ap_CS_fsm(19);
    ap_CS_fsm_state37 <= ap_CS_fsm(25);
    ap_CS_fsm_state41 <= ap_CS_fsm(27);
    ap_CS_fsm_state42 <= ap_CS_fsm(28);
    ap_CS_fsm_state48 <= ap_CS_fsm(34);
    ap_CS_fsm_state52 <= ap_CS_fsm(36);
    ap_CS_fsm_state53 <= ap_CS_fsm(37);
    ap_CS_fsm_state59 <= ap_CS_fsm(43);
    ap_CS_fsm_state63 <= ap_CS_fsm(45);
    ap_CS_fsm_state64 <= ap_CS_fsm(46);
    ap_CS_fsm_state70 <= ap_CS_fsm(52);
    ap_CS_fsm_state74 <= ap_CS_fsm(54);
    ap_CS_fsm_state75 <= ap_CS_fsm(55);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state81 <= ap_CS_fsm(61);
    ap_CS_fsm_state85 <= ap_CS_fsm(63);
    ap_CS_fsm_state86 <= ap_CS_fsm(64);
    ap_CS_fsm_state92 <= ap_CS_fsm(70);
    ap_CS_fsm_state96 <= ap_CS_fsm(72);
    ap_CS_fsm_state97 <= ap_CS_fsm(73);
    ap_CS_fsm_state98 <= ap_CS_fsm(74);
    ap_CS_fsm_state99 <= ap_CS_fsm(75);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln154_reg_1430_pp0_iter7_reg, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln154_reg_1430_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln154_reg_1430_pp0_iter7_reg, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln154_reg_1430_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln155_reg_1486, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln155_reg_1486 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln155_reg_1486, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln155_reg_1486 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln157_reg_1511, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp2_stage0_11001 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln157_reg_1511 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(ap_enable_reg_pp2_iter1, icmp_ln157_reg_1511, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp2_stage0_subdone <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln157_reg_1511 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(ap_enable_reg_pp3_iter1, icmp_ln158_reg_1536, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp3_stage0_11001 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln158_reg_1536 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(ap_enable_reg_pp3_iter1, icmp_ln158_reg_1536, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp3_stage0_subdone <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln158_reg_1536 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ap_enable_reg_pp4_iter1, icmp_ln160_reg_1561, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp4_stage0_11001 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln160_reg_1561 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ap_enable_reg_pp4_iter1, icmp_ln160_reg_1561, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp4_stage0_subdone <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln160_reg_1561 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_11001_assign_proc : process(ap_enable_reg_pp5_iter1, icmp_ln161_reg_1586, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp5_stage0_11001 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln161_reg_1586 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(ap_enable_reg_pp5_iter1, icmp_ln161_reg_1586, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp5_stage0_subdone <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln161_reg_1586 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp6_stage0_11001_assign_proc : process(ap_enable_reg_pp6_iter1, icmp_ln163_reg_1611, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp6_stage0_11001 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln163_reg_1611 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp6_stage0_subdone_assign_proc : process(ap_enable_reg_pp6_iter1, icmp_ln163_reg_1611, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp6_stage0_subdone <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln163_reg_1611 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp7_stage0_11001_assign_proc : process(ap_enable_reg_pp7_iter1, icmp_ln164_reg_1636, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp7_stage0_11001 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln164_reg_1636 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp7_stage0_subdone_assign_proc : process(ap_enable_reg_pp7_iter1, icmp_ln164_reg_1636, DATA_PARAMETERS_RVALID)
    begin
                ap_block_pp7_stage0_subdone <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln164_reg_1636 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp8_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp8_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp9_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp9_stage0_11001_assign_proc : process(ap_enable_reg_pp9_iter2, ap_block_state122_io)
    begin
                ap_block_pp9_stage0_11001 <= ((ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state122_io));
    end process;


    ap_block_pp9_stage0_subdone_assign_proc : process(ap_enable_reg_pp9_iter2, ap_block_state122_io)
    begin
                ap_block_pp9_stage0_subdone <= ((ap_enable_reg_pp9_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state122_io));
    end process;

        ap_block_state106_pp8_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp8_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp8_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp8_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state110_pp8_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state111_pp8_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state112_pp8_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state113_pp8_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state114_pp8_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state115_pp8_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state116_pp8_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state117_pp8_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state118_pp8_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state120_pp9_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state121_pp9_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state122_io_assign_proc : process(icmp_ln178_reg_1744_pp9_iter1_reg, DATA_FC6_OUTPUT_WREADY)
    begin
                ap_block_state122_io <= ((ap_const_logic_0 = DATA_FC6_OUTPUT_WREADY) and (icmp_ln178_reg_1744_pp9_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state122_pp9_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter8_assign_proc : process(icmp_ln154_reg_1430_pp0_iter7_reg, DATA_PARAMETERS_RVALID)
    begin
                ap_block_state17_pp0_stage0_iter8 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln154_reg_1430_pp0_iter7_reg = ap_const_lv1_0));
    end process;

        ap_block_state18_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state28_pp1_stage0_iter1_assign_proc : process(icmp_ln155_reg_1486, DATA_PARAMETERS_RVALID)
    begin
                ap_block_state28_pp1_stage0_iter1 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln155_reg_1486 = ap_const_lv1_0));
    end process;

        ap_block_state29_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state39_pp2_stage0_iter1_assign_proc : process(icmp_ln157_reg_1511, DATA_PARAMETERS_RVALID)
    begin
                ap_block_state39_pp2_stage0_iter1 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln157_reg_1511 = ap_const_lv1_0));
    end process;

        ap_block_state40_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state50_pp3_stage0_iter1_assign_proc : process(icmp_ln158_reg_1536, DATA_PARAMETERS_RVALID)
    begin
                ap_block_state50_pp3_stage0_iter1 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln158_reg_1536 = ap_const_lv1_0));
    end process;

        ap_block_state51_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state61_pp4_stage0_iter1_assign_proc : process(icmp_ln160_reg_1561, DATA_PARAMETERS_RVALID)
    begin
                ap_block_state61_pp4_stage0_iter1 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln160_reg_1561 = ap_const_lv1_0));
    end process;

        ap_block_state62_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state71_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state72_pp5_stage0_iter1_assign_proc : process(icmp_ln161_reg_1586, DATA_PARAMETERS_RVALID)
    begin
                ap_block_state72_pp5_stage0_iter1 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln161_reg_1586 = ap_const_lv1_0));
    end process;

        ap_block_state73_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state83_pp6_stage0_iter1_assign_proc : process(icmp_ln163_reg_1611, DATA_PARAMETERS_RVALID)
    begin
                ap_block_state83_pp6_stage0_iter1 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln163_reg_1611 = ap_const_lv1_0));
    end process;

        ap_block_state84_pp6_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state94_pp7_stage0_iter1_assign_proc : process(icmp_ln164_reg_1636, DATA_PARAMETERS_RVALID)
    begin
                ap_block_state94_pp7_stage0_iter1 <= ((ap_const_logic_0 = DATA_PARAMETERS_RVALID) and (icmp_ln164_reg_1636 = ap_const_lv1_0));
    end process;

        ap_block_state95_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln154_fu_862_p2)
    begin
        if ((icmp_ln154_fu_862_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state27_assign_proc : process(icmp_ln155_fu_1044_p2)
    begin
        if ((icmp_ln155_fu_1044_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state27 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state38_assign_proc : process(icmp_ln157_fu_1076_p2)
    begin
        if ((icmp_ln157_fu_1076_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state38 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state49_assign_proc : process(icmp_ln158_fu_1108_p2)
    begin
        if ((icmp_ln158_fu_1108_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state49 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state49 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state60_assign_proc : process(icmp_ln160_fu_1140_p2)
    begin
        if ((icmp_ln160_fu_1140_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state60 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state60 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state71_assign_proc : process(icmp_ln161_fu_1172_p2)
    begin
        if ((icmp_ln161_fu_1172_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state71 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state71 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state82_assign_proc : process(icmp_ln163_fu_1204_p2)
    begin
        if ((icmp_ln163_fu_1204_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state82 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state82 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state93_assign_proc : process(icmp_ln164_fu_1236_p2)
    begin
        if ((icmp_ln164_fu_1236_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state93 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state93 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp8_exit_iter0_state106_assign_proc : process(icmp_ln122_fu_1253_p2)
    begin
        if ((icmp_ln122_fu_1253_p2 = ap_const_lv1_1)) then 
            ap_condition_pp8_exit_iter0_state106 <= ap_const_logic_1;
        else 
            ap_condition_pp8_exit_iter0_state106 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp9_exit_iter0_state120_assign_proc : process(icmp_ln178_fu_1374_p2)
    begin
        if ((icmp_ln178_fu_1374_p2 = ap_const_lv1_1)) then 
            ap_condition_pp9_exit_iter0_state120 <= ap_const_logic_1;
        else 
            ap_condition_pp9_exit_iter0_state120 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state127, DATA_FC6_OUTPUT_BVALID)
    begin
        if (((ap_const_logic_1 = DATA_FC6_OUTPUT_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state127))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);
    ap_enable_pp8 <= (ap_idle_pp8 xor ap_const_logic_1);
    ap_enable_pp9 <= (ap_idle_pp9 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter1, ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter2)
    begin
        if (((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp8_assign_proc : process(ap_enable_reg_pp8_iter0, ap_enable_reg_pp8_iter2, ap_enable_reg_pp8_iter1, ap_enable_reg_pp8_iter3, ap_enable_reg_pp8_iter4, ap_enable_reg_pp8_iter5, ap_enable_reg_pp8_iter6, ap_enable_reg_pp8_iter7, ap_enable_reg_pp8_iter8, ap_enable_reg_pp8_iter9, ap_enable_reg_pp8_iter10, ap_enable_reg_pp8_iter11, ap_enable_reg_pp8_iter12)
    begin
        if (((ap_enable_reg_pp8_iter12 = ap_const_logic_0) and (ap_enable_reg_pp8_iter11 = ap_const_logic_0) and (ap_enable_reg_pp8_iter10 = ap_const_logic_0) and (ap_enable_reg_pp8_iter9 = ap_const_logic_0) and (ap_enable_reg_pp8_iter8 = ap_const_logic_0) and (ap_enable_reg_pp8_iter7 = ap_const_logic_0) and (ap_enable_reg_pp8_iter6 = ap_const_logic_0) and (ap_enable_reg_pp8_iter5 = ap_const_logic_0) and (ap_enable_reg_pp8_iter4 = ap_const_logic_0) and (ap_enable_reg_pp8_iter3 = ap_const_logic_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_0) and (ap_enable_reg_pp8_iter2 = ap_const_logic_0) and (ap_enable_reg_pp8_iter0 = ap_const_logic_0))) then 
            ap_idle_pp8 <= ap_const_logic_1;
        else 
            ap_idle_pp8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp9_assign_proc : process(ap_enable_reg_pp9_iter2, ap_enable_reg_pp9_iter0, ap_enable_reg_pp9_iter1)
    begin
        if (((ap_enable_reg_pp9_iter2 = ap_const_logic_0) and (ap_enable_reg_pp9_iter1 = ap_const_logic_0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_0))) then 
            ap_idle_pp9 <= ap_const_logic_1;
        else 
            ap_idle_pp9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_i_phi_fu_735_p4_assign_proc : process(c_0_i_reg_731, icmp_ln122_reg_1650, ap_CS_fsm_pp8_stage0, select_ln125_3_reg_1681, ap_enable_reg_pp8_iter1, ap_block_pp8_stage0)
    begin
        if (((icmp_ln122_reg_1650 = ap_const_lv1_0) and (ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0))) then 
            ap_phi_mux_c_0_i_phi_fu_735_p4 <= select_ln125_3_reg_1681;
        else 
            ap_phi_mux_c_0_i_phi_fu_735_p4 <= c_0_i_reg_731;
        end if; 
    end process;


    ap_phi_mux_phi_ln155_phi_fu_640_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln155_reg_1486, phi_ln155_reg_636, add_ln155_reg_1490)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln155_reg_1486 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_phi_ln155_phi_fu_640_p4 <= add_ln155_reg_1490;
        else 
            ap_phi_mux_phi_ln155_phi_fu_640_p4 <= phi_ln155_reg_636;
        end if; 
    end process;


    ap_phi_mux_phi_ln157_phi_fu_652_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln157_reg_1511, phi_ln157_reg_648, add_ln157_reg_1515)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (icmp_ln157_reg_1511 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_phi_ln157_phi_fu_652_p4 <= add_ln157_reg_1515;
        else 
            ap_phi_mux_phi_ln157_phi_fu_652_p4 <= phi_ln157_reg_648;
        end if; 
    end process;


    ap_phi_mux_phi_ln158_phi_fu_664_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln158_reg_1536, phi_ln158_reg_660, add_ln158_reg_1540)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (icmp_ln158_reg_1536 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            ap_phi_mux_phi_ln158_phi_fu_664_p4 <= add_ln158_reg_1540;
        else 
            ap_phi_mux_phi_ln158_phi_fu_664_p4 <= phi_ln158_reg_660;
        end if; 
    end process;


    ap_phi_mux_phi_ln160_phi_fu_676_p4_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, icmp_ln160_reg_1561, phi_ln160_reg_672, add_ln160_reg_1565)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (icmp_ln160_reg_1561 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            ap_phi_mux_phi_ln160_phi_fu_676_p4 <= add_ln160_reg_1565;
        else 
            ap_phi_mux_phi_ln160_phi_fu_676_p4 <= phi_ln160_reg_672;
        end if; 
    end process;


    ap_phi_mux_phi_ln161_phi_fu_688_p4_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, icmp_ln161_reg_1586, phi_ln161_reg_684, add_ln161_reg_1590)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (icmp_ln161_reg_1586 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            ap_phi_mux_phi_ln161_phi_fu_688_p4 <= add_ln161_reg_1590;
        else 
            ap_phi_mux_phi_ln161_phi_fu_688_p4 <= phi_ln161_reg_684;
        end if; 
    end process;


    ap_phi_mux_phi_ln163_phi_fu_700_p4_assign_proc : process(ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, icmp_ln163_reg_1611, phi_ln163_reg_696, add_ln163_reg_1615)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (icmp_ln163_reg_1611 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            ap_phi_mux_phi_ln163_phi_fu_700_p4 <= add_ln163_reg_1615;
        else 
            ap_phi_mux_phi_ln163_phi_fu_700_p4 <= phi_ln163_reg_696;
        end if; 
    end process;


    ap_phi_mux_phi_ln164_phi_fu_712_p4_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter1, ap_block_pp7_stage0, icmp_ln164_reg_1636, phi_ln164_reg_708, add_ln164_reg_1640)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0) and (icmp_ln164_reg_1636 = ap_const_lv1_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
            ap_phi_mux_phi_ln164_phi_fu_712_p4 <= add_ln164_reg_1640;
        else 
            ap_phi_mux_phi_ln164_phi_fu_712_p4 <= phi_ln164_reg_708;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state127, DATA_FC6_OUTPUT_BVALID)
    begin
        if (((ap_const_logic_1 = DATA_FC6_OUTPUT_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state127))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    c_fu_1265_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_i_phi_fu_735_p4) + unsigned(ap_const_lv7_1));

    conv1_bias_address0_assign_proc : process(ap_block_pp1_stage0, ap_enable_reg_pp1_iter2, grp_convolution1_fu_780_bias_address0, ap_CS_fsm_state97, zext_ln155_fu_1056_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            conv1_bias_address0 <= zext_ln155_fu_1056_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            conv1_bias_address0 <= grp_convolution1_fu_780_bias_address0;
        else 
            conv1_bias_address0 <= "XXX";
        end if; 
    end process;


    conv1_bias_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, grp_convolution1_fu_780_bias_ce0, ap_CS_fsm_state97)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            conv1_bias_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            conv1_bias_ce0 <= grp_convolution1_fu_780_bias_ce0;
        else 
            conv1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_bias_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln155_reg_1486_pp1_iter1_reg, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln155_reg_1486_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            conv1_bias_we0 <= ap_const_logic_1;
        else 
            conv1_bias_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_address0_assign_proc : process(grp_convolution1_fu_780_output_r_address0, grp_max_pooling2_fu_790_input_r_address0, ap_CS_fsm_state97, ap_CS_fsm_state99)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            conv1_output_address0 <= grp_max_pooling2_fu_790_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            conv1_output_address0 <= grp_convolution1_fu_780_output_r_address0;
        else 
            conv1_output_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv1_output_ce0_assign_proc : process(grp_convolution1_fu_780_output_r_ce0, grp_max_pooling2_fu_790_input_r_ce0, ap_CS_fsm_state97, ap_CS_fsm_state99)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            conv1_output_ce0 <= grp_max_pooling2_fu_790_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            conv1_output_ce0 <= grp_convolution1_fu_780_output_r_ce0;
        else 
            conv1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_output_we0_assign_proc : process(grp_convolution1_fu_780_output_r_we0, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            conv1_output_we0 <= grp_convolution1_fu_780_output_r_we0;
        else 
            conv1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_weights_0_address0_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, grp_convolution1_fu_780_weights_0_address0, ap_CS_fsm_state97, zext_ln154_5_fu_1025_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            conv1_weights_0_address0 <= zext_ln154_5_fu_1025_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            conv1_weights_0_address0 <= grp_convolution1_fu_780_weights_0_address0;
        else 
            conv1_weights_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv1_weights_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter9, grp_convolution1_fu_780_weights_0_ce0, ap_CS_fsm_state97)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            conv1_weights_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            conv1_weights_0_ce0 <= grp_convolution1_fu_780_weights_0_ce0;
        else 
            conv1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_weights_0_ce1_assign_proc : process(grp_convolution1_fu_780_weights_0_ce1, ap_CS_fsm_state97)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            conv1_weights_0_ce1 <= grp_convolution1_fu_780_weights_0_ce1;
        else 
            conv1_weights_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv1_weights_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln154_reg_1430_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln154_reg_1430_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            conv1_weights_0_we0 <= ap_const_logic_1;
        else 
            conv1_weights_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv3_bias_address0_assign_proc : process(ap_block_pp3_stage0, ap_enable_reg_pp3_iter2, grp_convolution3_fu_764_bias_address0, ap_CS_fsm_state101, zext_ln158_fu_1120_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            conv3_bias_address0 <= zext_ln158_fu_1120_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            conv3_bias_address0 <= grp_convolution3_fu_764_bias_address0;
        else 
            conv3_bias_address0 <= "XXXX";
        end if; 
    end process;


    conv3_bias_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2, grp_convolution3_fu_764_bias_ce0, ap_CS_fsm_state101)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            conv3_bias_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            conv3_bias_ce0 <= grp_convolution3_fu_764_bias_ce0;
        else 
            conv3_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv3_bias_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln158_reg_1536_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln158_reg_1536_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            conv3_bias_we0 <= ap_const_logic_1;
        else 
            conv3_bias_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv3_output_address0_assign_proc : process(grp_convolution3_fu_764_output_r_address0, grp_max_pooling4_fu_796_input_r_address0, ap_CS_fsm_state101, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            conv3_output_address0 <= grp_max_pooling4_fu_796_input_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            conv3_output_address0 <= grp_convolution3_fu_764_output_r_address0;
        else 
            conv3_output_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv3_output_ce0_assign_proc : process(grp_convolution3_fu_764_output_r_ce0, grp_max_pooling4_fu_796_input_r_ce0, ap_CS_fsm_state101, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            conv3_output_ce0 <= grp_max_pooling4_fu_796_input_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            conv3_output_ce0 <= grp_convolution3_fu_764_output_r_ce0;
        else 
            conv3_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv3_output_we0_assign_proc : process(grp_convolution3_fu_764_output_r_we0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            conv3_output_we0 <= grp_convolution3_fu_764_output_r_we0;
        else 
            conv3_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv3_weights_address0_assign_proc : process(ap_block_pp2_stage0, ap_enable_reg_pp2_iter2, grp_convolution3_fu_764_weights_address0, ap_CS_fsm_state101, zext_ln157_1_fu_1088_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            conv3_weights_address0 <= zext_ln157_1_fu_1088_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            conv3_weights_address0 <= grp_convolution3_fu_764_weights_address0;
        else 
            conv3_weights_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv3_weights_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2, grp_convolution3_fu_764_weights_ce0, ap_CS_fsm_state101)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            conv3_weights_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            conv3_weights_ce0 <= grp_convolution3_fu_764_weights_ce0;
        else 
            conv3_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv3_weights_ce1_assign_proc : process(grp_convolution3_fu_764_weights_ce1, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            conv3_weights_ce1 <= grp_convolution3_fu_764_weights_ce1;
        else 
            conv3_weights_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv3_weights_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln157_reg_1511_pp2_iter1_reg, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln157_reg_1511_pp2_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_1))) then 
            conv3_weights_we0 <= ap_const_logic_1;
        else 
            conv3_weights_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv5_bias_address0_assign_proc : process(ap_block_pp5_stage0, ap_enable_reg_pp5_iter2, ap_CS_fsm_state105, grp_convolution5_fu_772_bias_address0, zext_ln161_fu_1184_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            conv5_bias_address0 <= zext_ln161_fu_1184_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            conv5_bias_address0 <= grp_convolution5_fu_772_bias_address0;
        else 
            conv5_bias_address0 <= "XXXXXXX";
        end if; 
    end process;


    conv5_bias_ce0_assign_proc : process(ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter2, ap_CS_fsm_state105, grp_convolution5_fu_772_bias_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            conv5_bias_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            conv5_bias_ce0 <= grp_convolution5_fu_772_bias_ce0;
        else 
            conv5_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv5_bias_we0_assign_proc : process(ap_block_pp5_stage0_11001, icmp_ln161_reg_1586_pp5_iter1_reg, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (icmp_ln161_reg_1586_pp5_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            conv5_bias_we0 <= ap_const_logic_1;
        else 
            conv5_bias_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv5_output_0_0_address0_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_CS_fsm_state105, ap_enable_reg_pp8_iter1, grp_convolution5_fu_772_output_0_0_address0, ap_block_pp8_stage0, zext_ln125_1_fu_1310_p1)
    begin
        if (((ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0))) then 
            conv5_output_0_0_address0 <= zext_ln125_1_fu_1310_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            conv5_output_0_0_address0 <= grp_convolution5_fu_772_output_0_0_address0;
        else 
            conv5_output_0_0_address0 <= "XXXXXXX";
        end if; 
    end process;


    conv5_output_0_0_ce0_assign_proc : process(ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0_11001, ap_CS_fsm_state105, ap_enable_reg_pp8_iter1, grp_convolution5_fu_772_output_0_0_ce0)
    begin
        if (((ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then 
            conv5_output_0_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            conv5_output_0_0_ce0 <= grp_convolution5_fu_772_output_0_0_ce0;
        else 
            conv5_output_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv5_output_0_0_we0_assign_proc : process(ap_CS_fsm_state105, grp_convolution5_fu_772_output_0_0_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            conv5_output_0_0_we0 <= grp_convolution5_fu_772_output_0_0_we0;
        else 
            conv5_output_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv5_weights_address0_assign_proc : process(ap_block_pp4_stage0, ap_enable_reg_pp4_iter2, ap_CS_fsm_state105, grp_convolution5_fu_772_weights_address0, zext_ln160_1_fu_1152_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            conv5_weights_address0 <= zext_ln160_1_fu_1152_p1(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            conv5_weights_address0 <= grp_convolution5_fu_772_weights_address0;
        else 
            conv5_weights_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv5_weights_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter2, ap_CS_fsm_state105, grp_convolution5_fu_772_weights_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            conv5_weights_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            conv5_weights_ce0 <= grp_convolution5_fu_772_weights_ce0;
        else 
            conv5_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv5_weights_we0_assign_proc : process(ap_block_pp4_stage0_11001, icmp_ln160_reg_1561_pp4_iter1_reg, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln160_reg_1561_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            conv5_weights_we0 <= ap_const_logic_1;
        else 
            conv5_weights_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_15_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(parameters3_reg_1396),64));
    empty_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fc6_output5_reg_1391),64));

    fc6_bias_address0_assign_proc : process(ap_block_pp7_stage0, ap_enable_reg_pp7_iter2, ap_enable_reg_pp8_iter5, ap_block_pp8_stage0, zext_ln164_fu_1248_p1, zext_ln125_fu_1356_p1)
    begin
        if (((ap_enable_reg_pp8_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0))) then 
            fc6_bias_address0 <= zext_ln125_fu_1356_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp7_stage0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))) then 
            fc6_bias_address0 <= zext_ln164_fu_1248_p1(4 - 1 downto 0);
        else 
            fc6_bias_address0 <= "XXXX";
        end if; 
    end process;


    fc6_bias_ce0_assign_proc : process(ap_block_pp7_stage0_11001, ap_block_pp8_stage0_11001, ap_enable_reg_pp7_iter2, ap_enable_reg_pp8_iter5)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp8_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001)))) then 
            fc6_bias_ce0 <= ap_const_logic_1;
        else 
            fc6_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc6_bias_we0_assign_proc : process(ap_block_pp7_stage0_11001, icmp_ln164_reg_1636_pp7_iter1_reg, ap_enable_reg_pp7_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (icmp_ln164_reg_1636_pp7_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))) then 
            fc6_bias_we0 <= ap_const_logic_1;
        else 
            fc6_bias_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fc6_weights_0_0_address0_assign_proc : process(ap_block_pp6_stage0, ap_CS_fsm_pp8_stage0, ap_enable_reg_pp6_iter2, ap_enable_reg_pp8_iter1, ap_block_pp8_stage0, zext_ln163_1_fu_1216_p1, sext_ln126_fu_1351_p1)
    begin
        if (((ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0))) then 
            fc6_weights_0_0_address0 <= sext_ln126_fu_1351_p1(11 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))) then 
            fc6_weights_0_0_address0 <= zext_ln163_1_fu_1216_p1(11 - 1 downto 0);
        else 
            fc6_weights_0_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    fc6_weights_0_0_ce0_assign_proc : process(ap_block_pp6_stage0_11001, ap_CS_fsm_pp8_stage0, ap_block_pp8_stage0_11001, ap_enable_reg_pp6_iter2, ap_enable_reg_pp8_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp8_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp8_stage0) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001)))) then 
            fc6_weights_0_0_ce0 <= ap_const_logic_1;
        else 
            fc6_weights_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fc6_weights_0_0_we0_assign_proc : process(ap_block_pp6_stage0_11001, icmp_ln163_reg_1611_pp6_iter1_reg, ap_enable_reg_pp6_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (icmp_ln163_reg_1611_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter2 = ap_const_logic_1))) then 
            fc6_weights_0_0_we0 <= ap_const_logic_1;
        else 
            fc6_weights_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_convolution1_fu_780_ap_start <= grp_convolution1_fu_780_ap_start_reg;
    grp_convolution3_fu_764_ap_start <= grp_convolution3_fu_764_ap_start_reg;
    grp_convolution5_fu_772_ap_start <= grp_convolution5_fu_772_ap_start_reg;

    grp_fu_954_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_954_ce <= ap_const_logic_1;
        else 
            grp_fu_954_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_954_p1 <= ap_const_lv5_5(4 - 1 downto 0);
    grp_max_pooling2_fu_790_ap_start <= grp_max_pooling2_fu_790_ap_start_reg;
    grp_max_pooling4_fu_796_ap_start <= grp_max_pooling4_fu_796_ap_start_reg;
    icmp_ln122_fu_1253_p2 <= "1" when (indvar_flatten_reg_720 = ap_const_lv11_4B0) else "0";
    icmp_ln123_fu_1271_p2 <= "1" when (n_0_i_reg_742 = ap_const_lv4_A) else "0";
    icmp_ln125_1_fu_1285_p2 <= "1" when (ap_phi_mux_c_0_i_phi_fu_735_p4 = ap_const_lv7_0) else "0";
    icmp_ln125_fu_1305_p2 <= "1" when (c_reg_1659 = ap_const_lv7_0) else "0";
    icmp_ln154_1_fu_914_p2 <= "1" when (unsigned(trunc_ln154_fu_910_p1) < unsigned(ap_const_lv5_19)) else "0";
    icmp_ln154_2_fu_880_p2 <= "1" when (unsigned(add_ln154_1_fu_874_p2) < unsigned(ap_const_lv8_19)) else "0";
    icmp_ln154_fu_862_p2 <= "1" when (phi_ln154_reg_603 = ap_const_lv8_96) else "0";
    icmp_ln155_fu_1044_p2 <= "1" when (ap_phi_mux_phi_ln155_phi_fu_640_p4 = ap_const_lv3_6) else "0";
    icmp_ln157_fu_1076_p2 <= "1" when (ap_phi_mux_phi_ln157_phi_fu_652_p4 = ap_const_lv12_960) else "0";
    icmp_ln158_fu_1108_p2 <= "1" when (ap_phi_mux_phi_ln158_phi_fu_664_p4 = ap_const_lv5_10) else "0";
    icmp_ln160_fu_1140_p2 <= "1" when (ap_phi_mux_phi_ln160_phi_fu_676_p4 = ap_const_lv16_BB80) else "0";
    icmp_ln161_fu_1172_p2 <= "1" when (ap_phi_mux_phi_ln161_phi_fu_688_p4 = ap_const_lv7_78) else "0";
    icmp_ln163_fu_1204_p2 <= "1" when (ap_phi_mux_phi_ln163_phi_fu_700_p4 = ap_const_lv11_4B0) else "0";
    icmp_ln164_fu_1236_p2 <= "1" when (ap_phi_mux_phi_ln164_phi_fu_712_p4 = ap_const_lv4_A) else "0";
    icmp_ln178_fu_1374_p2 <= "1" when (phi_ln178_reg_753 = ap_const_lv4_A) else "0";
    mul_ln154_fu_938_p1 <= mul_ln154_fu_938_p10(5 - 1 downto 0);
    mul_ln154_fu_938_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln154_fu_926_p3),12));
    mul_ln154_fu_938_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv12_34) * unsigned(mul_ln154_fu_938_p1), 12));
    n_fu_1299_p2 <= std_logic_vector(unsigned(select_ln125_fu_1277_p3) + unsigned(ap_const_lv4_1));

    output_assign_address0_assign_proc : process(ap_block_pp9_stage0, ap_CS_fsm_pp9_stage0, ap_enable_reg_pp9_iter0, ap_enable_reg_pp8_iter5, ap_block_pp8_stage0, zext_ln125_fu_1356_p1, zext_ln178_fu_1386_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp9_stage0) and (ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0))) then 
            output_assign_address0 <= zext_ln178_fu_1386_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp8_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0))) then 
            output_assign_address0 <= zext_ln125_fu_1356_p1(4 - 1 downto 0);
        else 
            output_assign_address0 <= "XXXX";
        end if; 
    end process;


    output_assign_ce0_assign_proc : process(ap_block_pp8_stage0_11001, ap_CS_fsm_pp9_stage0, ap_block_pp9_stage0_11001, ap_enable_reg_pp9_iter0, ap_enable_reg_pp8_iter5)
    begin
        if ((((ap_enable_reg_pp9_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp9_stage0) and (ap_const_boolean_0 = ap_block_pp9_stage0_11001)) or ((ap_enable_reg_pp8_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001)))) then 
            output_assign_ce0 <= ap_const_logic_1;
        else 
            output_assign_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_assign_ce1_assign_proc : process(ap_block_pp8_stage0_11001, ap_enable_reg_pp8_iter12)
    begin
        if (((ap_enable_reg_pp8_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then 
            output_assign_ce1 <= ap_const_logic_1;
        else 
            output_assign_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_assign_we1_assign_proc : process(ap_block_pp8_stage0_11001, icmp_ln122_reg_1650_pp8_iter11_reg, ap_enable_reg_pp8_iter12)
    begin
        if (((icmp_ln122_reg_1650_pp8_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp8_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp8_stage0_11001))) then 
            output_assign_we1 <= ap_const_logic_1;
        else 
            output_assign_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(parameters3_reg_1396),31));
    p_shl_cast_fu_1001_p3 <= (trunc_ln154_2_fu_997_p1 & ap_const_lv2_0);

    pool2_output_address0_assign_proc : process(grp_convolution3_fu_764_input_r_address0, grp_max_pooling2_fu_790_output_r_address0, ap_CS_fsm_state101, ap_CS_fsm_state99)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            pool2_output_address0 <= grp_max_pooling2_fu_790_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            pool2_output_address0 <= grp_convolution3_fu_764_input_r_address0;
        else 
            pool2_output_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    pool2_output_ce0_assign_proc : process(grp_convolution3_fu_764_input_r_ce0, grp_max_pooling2_fu_790_output_r_ce0, ap_CS_fsm_state101, ap_CS_fsm_state99)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            pool2_output_ce0 <= grp_max_pooling2_fu_790_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            pool2_output_ce0 <= grp_convolution3_fu_764_input_r_ce0;
        else 
            pool2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool2_output_ce1_assign_proc : process(grp_convolution3_fu_764_input_r_ce1, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            pool2_output_ce1 <= grp_convolution3_fu_764_input_r_ce1;
        else 
            pool2_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    pool2_output_we0_assign_proc : process(grp_max_pooling2_fu_790_output_r_we0, ap_CS_fsm_state99)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            pool2_output_we0 <= grp_max_pooling2_fu_790_output_r_we0;
        else 
            pool2_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    pool4_output_address0_assign_proc : process(ap_CS_fsm_state105, grp_convolution5_fu_772_input_r_address0, grp_max_pooling4_fu_796_output_r_address0, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            pool4_output_address0 <= grp_max_pooling4_fu_796_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            pool4_output_address0 <= grp_convolution5_fu_772_input_r_address0;
        else 
            pool4_output_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    pool4_output_ce0_assign_proc : process(ap_CS_fsm_state105, grp_convolution5_fu_772_input_r_ce0, grp_max_pooling4_fu_796_output_r_ce0, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            pool4_output_ce0 <= grp_max_pooling4_fu_796_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            pool4_output_ce0 <= grp_convolution5_fu_772_input_r_ce0;
        else 
            pool4_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pool4_output_we0_assign_proc : process(grp_max_pooling4_fu_796_output_r_we0, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            pool4_output_we0 <= grp_max_pooling4_fu_796_output_r_we0;
        else 
            pool4_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln125_1_fu_1361_p3 <= 
        icmp_ln125_reg_1693_pp8_iter5_reg when (icmp_ln123_reg_1664_pp8_iter5_reg(0) = '1') else 
        icmp_ln125_1_reg_1676_pp8_iter5_reg;
    select_ln125_3_fu_1291_p3 <= 
        c_fu_1265_p2 when (icmp_ln123_fu_1271_p2(0) = '1') else 
        ap_phi_mux_c_0_i_phi_fu_735_p4;
    select_ln125_fu_1277_p3 <= 
        ap_const_lv4_0 when (icmp_ln123_fu_1271_p2(0) = '1') else 
        n_0_i_reg_742;
    select_ln154_1_fu_886_p3 <= 
        add_ln154_1_fu_874_p2 when (icmp_ln154_2_fu_880_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln154_fu_926_p3 <= 
        trunc_ln154_fu_910_p1 when (icmp_ln154_1_fu_914_p2(0) = '1') else 
        add_ln154_3_fu_920_p2;
        sext_ln126_fu_1351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln126_fu_1345_p2),64));

        sext_ln154_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_reg_1460_pp0_iter7_reg),5));

    sub_ln126_fu_1339_p2 <= std_logic_vector(unsigned(zext_ln126_1_fu_1324_p1) - unsigned(zext_ln126_2_fu_1335_p1));
    tmp_12_fu_963_p3 <= (tmp_reg_1449_pp0_iter7_reg & ap_const_lv2_0);
    tmp_5_fu_1328_p3 <= (select_ln125_reg_1669 & ap_const_lv3_0);
    tmp_s_fu_1317_p3 <= (select_ln125_reg_1669 & ap_const_lv7_0);
    trunc_ln154_1_fu_993_p1 <= add_ln154_4_fu_987_p2(9 - 1 downto 0);
    trunc_ln154_2_fu_997_p1 <= add_ln154_4_fu_987_p2(7 - 1 downto 0);
    trunc_ln154_fu_910_p1 <= phi_urem_reg_625(5 - 1 downto 0);
    zext_ln125_1_fu_1310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln125_3_reg_1681),64));
    zext_ln125_fu_1356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln125_reg_1669_pp8_iter4_reg),64));
    zext_ln126_1_fu_1324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1317_p3),12));
    zext_ln126_2_fu_1335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_1328_p3),12));
    zext_ln126_fu_1314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln125_3_reg_1681),12));
    zext_ln154_1_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_963_p3),11));
    zext_ln154_3_fu_983_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln154_fu_980_p1),11));
    zext_ln154_4_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_954_p2),9));
    zext_ln154_5_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln154_6_reg_1470),64));
    zext_ln154_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1449_pp0_iter7_reg),11));
    zext_ln155_1_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln155_1_reg_1475),64));
    zext_ln155_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln155_reg_636_pp1_iter1_reg),64));
    zext_ln157_1_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln157_reg_648_pp2_iter1_reg),64));
    zext_ln157_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln157_1_reg_1500),64));
    zext_ln158_1_fu_1098_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln158_1_reg_1525),64));
    zext_ln158_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln158_reg_660_pp3_iter1_reg),64));
    zext_ln160_1_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln160_reg_672_pp4_iter1_reg),64));
    zext_ln160_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln160_1_reg_1550),64));
    zext_ln161_1_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln161_1_reg_1575),64));
    zext_ln161_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln161_reg_684_pp5_iter1_reg),64));
    zext_ln163_1_fu_1216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln163_reg_696_pp6_iter1_reg),64));
    zext_ln163_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln163_1_reg_1600),64));
    zext_ln164_1_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln164_1_reg_1625),64));
    zext_ln164_fu_1248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln164_reg_708_pp7_iter1_reg),64));
    zext_ln178_fu_1386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_ln178_reg_753),64));
end behav;
